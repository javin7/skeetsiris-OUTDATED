#include "Ragebot.h"
#include "../Config.h"
#include "../Interfaces.h"
#include "../Memory.h"
#include "../SDK/Angle.h"
#include "../SDK/Entity.h"
#include "../SDK/UserCmd.h"
#include "../SDK/Vector.h"
#include "../SDK/WeaponId.h"
#include "../SDK/GlobalVars.h"
#include "../SDK/PhysicsSurfaceProps.h"
#include "../SDK/WeaponData.h"
#include "../SDK/StudioRender.h"
#include "../SDK/ModelInfo.h"
#include "Aimbot.h"
#include "Backtrack.h"
#include "Animations.h"

static float handleBulletPenetration(SurfaceData* enterSurfaceData, const Trace& enterTrace, const Vector& direction, Vector& result, float penetration, float damage) noexcept
{
    Vector end;
    Trace exitTrace;
    __asm {
        mov ecx, end
        mov edx, enterTrace
    }
    if (!memory->traceToExit(enterTrace.endpos.x, enterTrace.endpos.y, enterTrace.endpos.z, direction.x, direction.y, direction.z, exitTrace))
        return -1.0f;

    SurfaceData* exitSurfaceData = interfaces->physicsSurfaceProps->getSurfaceData(exitTrace.surface.surfaceProps);

    float damageModifier = 0.16f;
    float penetrationModifier = (enterSurfaceData->penetrationmodifier + exitSurfaceData->penetrationmodifier) / 2.0f;

    if (enterSurfaceData->material == 71 || enterSurfaceData->material == 89) {
        damageModifier = 0.05f;
        penetrationModifier = 3.0f;
    }
    else if (enterTrace.contents >> 3 & 1 || enterTrace.surface.flags >> 7 & 1) {
        penetrationModifier = 1.0f;
    }

    if (enterSurfaceData->material == exitSurfaceData->material) {
        if (exitSurfaceData->material == 85 || exitSurfaceData->material == 87)
            penetrationModifier = 3.0f;
        else if (exitSurfaceData->material == 76)
            penetrationModifier = 2.0f;
    }

    damage -= 11.25f / penetration / penetrationModifier + damage * damageModifier + (exitTrace.endpos - enterTrace.endpos).squareLength() / 24.0f / penetrationModifier;

    result = exitTrace.endpos;
    return damage;
}

static float canScan(Entity* entity, const Vector& destination, const WeaponInfo* weaponData, bool allowFriendlyFire) noexcept
{
    if (!localPlayer)
        return 0;

    float damage{ static_cast<float>(weaponData->damage) };

    Vector start{ localPlayer->getEyePosition() };
    Vector direction{ destination - start };
    direction /= direction.length();

    int hitsLeft = 4;

    while (damage >= 1.0f && hitsLeft) {
        Trace trace;
        interfaces->engineTrace->traceRay({ start, destination }, 0x4600400B, localPlayer.get(), trace);

        if (!allowFriendlyFire && trace.entity && trace.entity->isPlayer() && !localPlayer->isOtherEnemy(trace.entity))
            return false;

        if (trace.entity && trace.entity->isPlayer() && trace.entity == entity && trace.hitgroup > HitGroup::Generic && trace.hitgroup <= HitGroup::RightLeg) {
            damage = HitGroup::getDamageMultiplier(trace.hitgroup) * damage * powf(weaponData->rangeModifier, trace.fraction * weaponData->range / 500.0f);

            if (float armorRatio{ weaponData->armorRatio / 2.0f }; HitGroup::isArmored(trace.hitgroup, trace.entity->hasHelmet()))
                damage -= (trace.entity->armor() < damage * armorRatio / 2.0f ? trace.entity->armor() * 4.0f : damage) * (1.0f - armorRatio);

            return damage;
        }

        if (trace.fraction == 1.0f)
            break;

        const auto surfaceData = interfaces->physicsSurfaceProps->getSurfaceData(trace.surface.surfaceProps);

        if (surfaceData->penetrationmodifier < 0.1f)
            break;

        damage = handleBulletPenetration(surfaceData, trace, direction, start, weaponData->penetration, damage);
        hitsLeft--;
    }
    return 0;
}

static void setRandomSeed(int seed) noexcept
{
    using randomSeedFn = void(*)(int);
    static auto randomSeed{ reinterpret_cast<randomSeedFn>(GetProcAddress(GetModuleHandleA("vstdlib.dll"), "RandomSeed")) };
    randomSeed(seed);
}

static float getRandom(float min, float max) noexcept
{
    using randomFloatFn = float(*)(float, float);
    static auto randomFloat{ reinterpret_cast<randomFloatFn>(GetProcAddress(GetModuleHandleA("vstdlib.dll"), "RandomFloat")) };
    return randomFloat(min, max);
}

static bool hitChance(Entity* localPlayer, Entity* entity, Entity* weaponData, const Vector& destination, const UserCmd* cmd, const int hitChance) noexcept
{
    if (!hitChance)
        return true;

    constexpr int maxSeed = 256;

    const Angle angles(destination + cmd->viewangles);

    int hits = 0;
    const int hitsNeed = static_cast<int>(static_cast<float>(maxSeed) * (static_cast<float>(hitChance) / 100.f));

    const auto weapSpread = weaponData->getSpread();
    const auto weapInaccuracy = weaponData->getInaccuracy();
    const auto localEyePosition = localPlayer->getEyePosition();
    const auto range = weaponData->getWeaponData()->range;

    for (int i = 0; i < maxSeed; ++i)
    {
        setRandomSeed(i + 1);
        float inaccuracy = getRandom(0.f, 1.f);
        float spread = getRandom(0.f, 1.f);
        const float spreadX = getRandom(0.f, 2.f * static_cast<float>(M_PI));
        const float spreadY = getRandom(0.f, 2.f * static_cast<float>(M_PI));

        const auto weaponIndex = weaponData->itemDefinitionIndex2();
        const auto recoilIndex = weaponData->recoilIndex();
        if (weaponIndex == WeaponId::Revolver)
        {
            if (cmd->buttons & UserCmd::IN_ATTACK2)
            {
                inaccuracy = 1.f - inaccuracy * inaccuracy;
                spread = 1.f - spread * spread;
            }
        }
        else if (weaponIndex == WeaponId::Negev && recoilIndex < 3.f)
        {
            for (int i = 3; i > recoilIndex; --i)
            {
                inaccuracy *= inaccuracy;
                spread *= spread;
            }

            inaccuracy = 1.f - inaccuracy;
            spread = 1.f - spread;
        }

        inaccuracy *= weapInaccuracy;
        spread *= weapSpread;

        Vector spreadView{ (cosf(spreadX) * inaccuracy) + (cosf(spreadY) * spread),
                           (sinf(spreadX) * inaccuracy) + (sinf(spreadY) * spread) };
        Vector direction{ (angles.forward + (angles.right * spreadView.x) + (angles.up * spreadView.y)) * range };

        static Trace trace;
        interfaces->engineTrace->clipRayToEntity({ localEyePosition, localEyePosition + direction }, 0x4600400B, entity, trace);
        if (trace.entity == entity)
            ++hits;

        if (hits >= hitsNeed)
            return true;

        if ((maxSeed - i + hits) < hitsNeed)
            return false;
    }
    return false;
}

enum Hitboxes
{
    HEAD,
    NECK,
    PELVIS,
    STOMACH,
    LOWER_CHEST,
    CHEST,
    UPPER_CHEST,
    RIGHT_THIGH,
    LEFT_THIGH,
    RIGHT_CALF,
    LEFT_CALF,
    RIGHT_FOOT,
    LEFT_FOOT,
    RIGHT_HAND,
    LEFT_HAND,
    RIGHT_UPPER_ARM,
    RIGHT_FOREARM,
    LEFT_UPPER_ARM,
    LEFT_FOREARM,
    MAX
};

std::vector<Vector> Multipoint(Entity* entity, matrix3x4 matrix[256], int iHitbox, int weaponIndex, bool firstScan)
{
    auto AngleVectors = [](const Vector& angles, Vector* forward)
    {
        float	sp, sy, cp, cy;

        sy = sin(degreesToRadians(angles.y));
        cy = cos(degreesToRadians(angles.y));

        sp = sin(degreesToRadians(angles.x));
        cp = cos(degreesToRadians(angles.x));

        forward->x = cp * cy;
        forward->y = cp * sy;
        forward->z = -sp;
    };

    auto VectorTransform_Wrapper = [](const Vector& in1, const matrix3x4 in2, Vector& out)
    {
        auto VectorTransform = [](const float* in1, const matrix3x4 in2, float* out)
        {
            auto DotProducts = [](const float* v1, const float* v2)
            {
                return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];
            };
            out[0] = DotProducts(in1, in2[0]) + in2[0][3];
            out[1] = DotProducts(in1, in2[1]) + in2[1][3];
            out[2] = DotProducts(in1, in2[2]) + in2[2][3];
        };
        VectorTransform(&in1.x, in2, &out.x);
    };

    const Model* mod = entity->getModel();
    if (!mod)
        return {};
    StudioHdr* hdr = interfaces->modelInfo->getStudioModel(mod);
    if (!hdr)
        return {};
    StudioHitboxSet* set = hdr->getHitboxSet(0);
    if (!set)
        return {};
    StudioBbox* hitbox = set->getHitbox(iHitbox);
    if (!hitbox)
        return {};
    Vector vMin, vMax, vCenter;
    VectorTransform_Wrapper(hitbox->bbMin, matrix[hitbox->bone], vMin);
    VectorTransform_Wrapper(hitbox->bbMax, matrix[hitbox->bone], vMax);
    vCenter = (vMin + vMax) * 0.5f;

    std::vector<Vector> vecArray;

    if (config->ragebot[weaponIndex].multiPoint == 0 || firstScan)
    {
        vecArray.emplace_back(vCenter);
        return vecArray;
    }

    Vector CurrentAngles = Aimbot::calculateRelativeAngle(vCenter, localPlayer->getEyePosition(), Vector{});

    Vector Forward;
    AngleVectors(CurrentAngles, &Forward);

    Vector Right = Forward.Cross(Vector{ 0, 0, 1 });
    Vector Left = Vector{ -Right.x, -Right.y, Right.z };

    Vector Top = Vector{ 0, 0, 1 };
    Vector Bot = Vector{ 0, 0, -1 };

    float multiPoint = (min(config->ragebot[weaponIndex].multiPoint, 95)) * 0.01f;

    switch (iHitbox) {
    case HEAD:
        for (auto i = 0; i < 4; ++i)
            vecArray.emplace_back(vCenter);

        vecArray[1] += Top * (hitbox->capsuleRadius * multiPoint);
        vecArray[2] += Right * (hitbox->capsuleRadius * multiPoint);
        vecArray[3] += Left * (hitbox->capsuleRadius * multiPoint);
        break;
    default://rest
        for (auto i = 0; i < 3; ++i)
            vecArray.emplace_back(vCenter);

        vecArray[1] += Right * (hitbox->capsuleRadius * multiPoint);
        vecArray[2] += Left * (hitbox->capsuleRadius * multiPoint);
        break;
    }
    return vecArray;
}

std::array<bool, 40> shouldRunAutoStop;

void Ragebot::autoStop(UserCmd* cmd) noexcept
{
    if (!localPlayer || !localPlayer->isAlive())
        return;

    const auto activeWeapon = localPlayer->getActiveWeapon();
    if (!activeWeapon || !activeWeapon->clip())
        return;

    auto weaponIndex = getWeaponIndex(activeWeapon->itemDefinitionIndex2());
    if (!weaponIndex)
        return;

    auto weaponClass = getWeaponClass2(activeWeapon->itemDefinitionIndex2());
    if (!config->ragebot[weaponIndex].enabled)
        weaponIndex = weaponClass;

    if (!config->ragebot[weaponIndex].enabled)
        weaponIndex = 0;

    if (!config->ragebot[weaponIndex].autoStop || !shouldRunAutoStop.at(weaponIndex))
        return;

    if (!config->ragebot[weaponIndex].betweenShots && activeWeapon->nextPrimaryAttack() > memory->globalVars->serverTime())
        return;

    if (!config->ragebot[weaponIndex].ignoreFlash && localPlayer->isFlashed())
        return;

    if (config->ragebot[weaponIndex].onKey) {
        if (!config->ragebot[weaponIndex].keyMode) {
            if (!GetAsyncKeyState(config->ragebot[weaponIndex].key))
                return;
        }
        else {
            static bool toggle = true;
            if (GetAsyncKeyState(config->ragebot[weaponIndex].key) & 1)
                toggle = !toggle;
            if (!toggle)
                return;
        }
    }

    if (config->ragebot[weaponIndex].enabled && (cmd->buttons & UserCmd::IN_ATTACK || config->ragebot[weaponIndex].autoShot))
    {
        if (config->ragebot[weaponIndex].scopedOnly && activeWeapon->isSniperRifle() && !localPlayer->isScoped())
            return;

        const auto weaponData = activeWeapon->getWeaponData();
        if (!weaponData)
            return;

        const float maxSpeed = (localPlayer->isScoped() ? weaponData->maxSpeedAlt : weaponData->maxSpeed) / 3;

        if (cmd->forwardmove && cmd->sidemove) {
            const float maxSpeedRoot = maxSpeed * static_cast<float>(M_SQRT1_2);
            cmd->forwardmove = cmd->forwardmove < 0.0f ? -maxSpeedRoot : maxSpeedRoot;
            cmd->sidemove = cmd->sidemove < 0.0f ? -maxSpeedRoot : maxSpeedRoot;
        }
        else if (cmd->forwardmove) {
            cmd->forwardmove = cmd->forwardmove < 0.0f ? -maxSpeed : maxSpeed;
        }
        else if (cmd->sidemove) {
            cmd->sidemove = cmd->sidemove < 0.0f ? -maxSpeed : maxSpeed;
        }
    }
    shouldRunAutoStop.at(weaponIndex) = false;
}

void Ragebot::run(UserCmd* cmd) noexcept
{
    if (!localPlayer || localPlayer->nextAttack() > memory->globalVars->serverTime() || localPlayer->isDefusing() || localPlayer->waitForNoAttack())
        return;

    const auto activeWeapon = localPlayer->getActiveWeapon();
    if (!activeWeapon || !activeWeapon->clip())
        return;

    auto weaponIndex = getWeaponIndex(activeWeapon->itemDefinitionIndex2());
    if (!weaponIndex)
        return;

    auto weaponClass = getWeaponClass2(activeWeapon->itemDefinitionIndex2());
    if (!config->ragebot[weaponIndex].enabled)
        weaponIndex = weaponClass;

    if (!config->ragebot[weaponIndex].enabled)
        weaponIndex = 0;

    if (activeWeapon->nextPrimaryAttack() > memory->globalVars->serverTime())
        return;

    if (!config->ragebot[weaponIndex].ignoreFlash && localPlayer->isFlashed())
        return;

    if (config->ragebot[weaponIndex].onKey) {
        if (!config->ragebot[weaponIndex].keyMode) {
            if (!GetAsyncKeyState(config->ragebot[weaponIndex].key))
                return;
        }
        else {
            static bool toggle = true;
            if (GetAsyncKeyState(config->ragebot[weaponIndex].key) & 1)
                toggle = !toggle;
            if (!toggle)
                return;
        }
    }

    if (localPlayer->shotsFired() > 0 && !activeWeapon->isFullAuto())
        return;

    if (config->ragebot[weaponIndex].enabled && (cmd->buttons & UserCmd::IN_ATTACK || config->ragebot[weaponIndex].autoShot)) {

        auto bestFov = config->ragebot[weaponIndex].fov;
        auto bestDamage = GetAsyncKeyState(config->ragebot[weaponIndex].overrideDamageKey) ? config->ragebot[weaponIndex].overrideDamageAmount : config->ragebot[weaponIndex].minDamage;
        Vector bestTarget{ };
        Vector bestAngle{ };
        Vector finalAngle{ };
        auto localPlayerEyePosition = localPlayer->getEyePosition();

        std::array<bool, 19> hitbox{ false };

        const auto aimPunch = localPlayer->getAimPunch();

        std::vector<Ragebot::Enemies> enemies;
        const auto localPlayerOrigin{ localPlayer->getAbsOrigin() };
        for (int i = 1; i <= interfaces->engine->getMaxClients(); ++i) {
            const auto entity{ interfaces->entityList->getEntity(i) };
            if (!entity || entity == localPlayer.get() || entity->isDormant() || !entity->isAlive()
                || !entity->isOtherEnemy(localPlayer.get()) && !config->ragebot[weaponIndex].friendlyFire || entity->gunGameImmunity())
                continue;

            const auto angle{ Aimbot::calculateRelativeAngle(localPlayerEyePosition, entity->getBonePosition(8), cmd->viewangles + aimPunch) };
            const auto origin{ entity->getAbsOrigin() };
            const auto fov{ angle.length2D() }; //fov
            const auto health{ entity->health() }; //health
            const auto distance{ localPlayerOrigin.distance(origin) }; //distance
            enemies.emplace_back(i, health, distance, fov);
        }
        switch (config->ragebot[weaponIndex].priority)
        {
        case 0:
            std::sort(enemies.begin(), enemies.end(), healthSort);
            break;
        case 1:
            std::sort(enemies.begin(), enemies.end(), distanceSort);
            break;
        case 2:
            std::sort(enemies.begin(), enemies.end(), fovSort);
            break;
        default:
            break;
        }
        for (int i = 0; i < ARRAYSIZE(config->ragebot[weaponIndex].hitboxes); i++)
        {
            switch (i)
            {
            case 0: //Head
                hitbox[Hitboxes::HEAD] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 0 : config->ragebot[weaponIndex].hitboxes[i];
                break;
            case 1: //Chest
                hitbox[Hitboxes::UPPER_CHEST] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 1 : config->ragebot[weaponIndex].hitboxes[i];
                hitbox[Hitboxes::CHEST] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 1 : config->ragebot[weaponIndex].hitboxes[i];
                hitbox[Hitboxes::LOWER_CHEST] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 1 : config->ragebot[weaponIndex].hitboxes[i];
                break;
            case 2: //Stomach
                hitbox[Hitboxes::STOMACH] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 1 : config->ragebot[weaponIndex].hitboxes[i];
                hitbox[Hitboxes::PELVIS] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 1 : config->ragebot[weaponIndex].hitboxes[i];
                break;
            case 3: //Arms
                hitbox[Hitboxes::RIGHT_UPPER_ARM] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 0 : config->ragebot[weaponIndex].hitboxes[i];
                hitbox[Hitboxes::RIGHT_FOREARM] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 0 : config->ragebot[weaponIndex].hitboxes[i];
                hitbox[Hitboxes::LEFT_UPPER_ARM] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 0 : config->ragebot[weaponIndex].hitboxes[i];
                hitbox[Hitboxes::LEFT_FOREARM] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 0 : config->ragebot[weaponIndex].hitboxes[i];
                break;
            case 4: //Legs
                hitbox[Hitboxes::RIGHT_CALF] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 0 : config->ragebot[weaponIndex].hitboxes[i];
                hitbox[Hitboxes::RIGHT_THIGH] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 0 : config->ragebot[weaponIndex].hitboxes[i];
                hitbox[Hitboxes::LEFT_CALF] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 0 : config->ragebot[weaponIndex].hitboxes[i];
                hitbox[Hitboxes::LEFT_THIGH] = GetAsyncKeyState(config->ragebot[weaponIndex].bodyAimKey) ? 0 : config->ragebot[weaponIndex].hitboxes[i];
                break;
            default:
                break;
            }
        }
        for (const auto& target : enemies) {
            const auto entity{ interfaces->entityList->getEntity(target.id) };
            Animations::finishSetup(entity);
            for (int i = 0; i < 19; i++)
            {
                if (!(hitbox[i]))
                    continue;

                bool firstScan = true;
                for (auto bonePosition : Multipoint(entity, Animations::data.player[target.id].matrix, i, weaponIndex, firstScan))
                {
                    firstScan = false;
                    if (config->ragebot[weaponIndex].visibleOnly && !entity->isVisible(bonePosition))
                        continue;

                    auto damage = canScan(entity, bonePosition, activeWeapon->getWeaponData(), config->ragebot[weaponIndex].friendlyFire);
                    if (damage <= 0.f)
                        continue;

                    if (config->ragebot[weaponIndex].scopedOnly && activeWeapon->isSniperRifle() && !localPlayer->isScoped() && localPlayer->flags() & 1 && !(cmd->buttons & (UserCmd::IN_JUMP))) {
                        if (config->ragebot[weaponIndex].autoScope)
                            cmd->buttons |= UserCmd::IN_ATTACK2;
                        return;
                    }

                    if (localPlayer->flags() & 1 && !(cmd->buttons & (UserCmd::IN_JUMP)))
                        shouldRunAutoStop.at(weaponIndex) = config->ragebot[weaponIndex].autoStop;

                    const auto angle{ Aimbot::calculateRelativeAngle(localPlayerEyePosition, bonePosition, cmd->viewangles + aimPunch) };
                    const auto fov{ angle.length2D() };

                    if (bestDamage <= damage) {
                        bestDamage = damage;
                        bestTarget = bonePosition;
                        bestAngle = angle;
                    }
                    if (fov > bestFov)
                    {
                        bestDamage = GetAsyncKeyState(config->ragebot[weaponIndex].overrideDamageKey) ? config->ragebot[weaponIndex].overrideDamageAmount : config->ragebot[weaponIndex].minDamage;
                        bestTarget = Vector{ };
                        bestAngle = Vector{ };
                    }
                }
            }
            if (bestTarget)
            {
                if (!hitChance(localPlayer.get(), entity, activeWeapon, bestAngle, cmd, config->ragebot[weaponIndex].hitChance))
                    bestTarget = Vector{ };
                if (bestTarget)
                {
                    cmd->tickCount = Backtrack::timeToTicks(entity->simulationTime() + Backtrack::getLerp());
                    break;
                }
            }
            auto record = &Backtrack::records[target.id];
            if (record && !record->empty() && record->size() > 3 && Backtrack::valid(record->front().simulationTime) && config->backtrack.enabled)
            {
                auto currentRecord = record->at(record->size() - 2);
                if (!Backtrack::valid(currentRecord.simulationTime))
                    continue;

                Animations::setup(entity, currentRecord);
                for (int i = 0; i < 19; i++)
                {
                    if (!(hitbox[i]))
                        continue;

                    bool firstScan = true;
                    for (auto bonePosition : Multipoint(entity, currentRecord.matrix, i, weaponIndex, firstScan))
                    {
                        firstScan = false;
                        if (config->ragebot[weaponIndex].visibleOnly && !entity->isVisible(bonePosition))
                            continue;

                        auto damage = canScan(entity, bonePosition, activeWeapon->getWeaponData(), config->ragebot[weaponIndex].friendlyFire);
                        if (damage <= 0.f)
                            continue;

                        if (config->ragebot[weaponIndex].scopedOnly && activeWeapon->isSniperRifle() && !localPlayer->isScoped() && localPlayer->flags() & 1 && !(cmd->buttons & (UserCmd::IN_JUMP))) {
                            if (config->ragebot[weaponIndex].autoScope)
                                cmd->buttons |= UserCmd::IN_ATTACK2;
                            return;
                        }

                        if (localPlayer->flags() & 1 && !(cmd->buttons & (UserCmd::IN_JUMP)))
                            shouldRunAutoStop.at(weaponIndex) = config->ragebot[weaponIndex].autoStop;

                        const auto angle{ Aimbot::calculateRelativeAngle(localPlayerEyePosition, bonePosition, cmd->viewangles + aimPunch) };
                        const auto fov{ angle.length2D() };

                        if (bestDamage <= damage) {
                            bestDamage = damage;
                            bestTarget = bonePosition;
                            bestAngle = angle;
                        }
                        if (fov > bestFov)
                        {
                            bestDamage = GetAsyncKeyState(config->ragebot[weaponIndex].overrideDamageKey) ? config->ragebot[weaponIndex].overrideDamageAmount : config->ragebot[weaponIndex].minDamage;
                            bestTarget = Vector{ };
                            bestAngle = Vector{ };
                        }
                    }
                }
                if (bestTarget)
                {
                    if (!hitChance(localPlayer.get(), entity, activeWeapon, bestAngle, cmd, config->ragebot[weaponIndex].hitChance))
                        bestTarget = Vector{ };
                    if (bestTarget)
                    {
                        cmd->tickCount = Backtrack::timeToTicks(currentRecord.simulationTime + Backtrack::getLerp());
                        Animations::setup(entity, currentRecord);
                        break;
                    }
                }
                Animations::finishSetup(entity);
            }
        }

        if (bestTarget && (config->ragebot[weaponIndex].ignoreSmoke
            || !memory->lineGoesThroughSmoke(localPlayer->getEyePosition(), bestTarget, 1))) {
            static Vector lastAngles{ cmd->viewangles };
            static int lastCommand{ };

            if (lastCommand == cmd->commandNumber - 1 && lastAngles && config->ragebot[weaponIndex].silent)
                cmd->viewangles = lastAngles;

            auto angle = Aimbot::calculateRelativeAngle(localPlayer->getEyePosition(), bestTarget, cmd->viewangles + aimPunch);
            bool clamped{ false };

            if (fabs(angle.x) > config->misc.maxAngleDelta || fabs(angle.y) > config->misc.maxAngleDelta) {
                angle.x = std::clamp(angle.x, -config->misc.maxAngleDelta, config->misc.maxAngleDelta);
                angle.y = std::clamp(angle.y, -config->misc.maxAngleDelta, config->misc.maxAngleDelta);
                clamped = true;
            }
            finalAngle = cmd->viewangles + angle;
            cmd->viewangles = finalAngle;
            if (!config->ragebot[weaponIndex].silent)
                interfaces->engine->setViewAngles(cmd->viewangles);

            if (config->ragebot[weaponIndex].autoShot && activeWeapon->nextPrimaryAttack() <= memory->globalVars->serverTime() && !clamped)
                cmd->buttons |= UserCmd::IN_ATTACK;

            if (clamped)
                cmd->buttons &= ~UserCmd::IN_ATTACK;

            if (clamped) lastAngles = cmd->viewangles;
            else lastAngles = Vector{ };

            lastCommand = cmd->commandNumber;
        }
    }
}
// Junk Code By Troll Face & Thaisen's Gen
void fuZEPSUFDN33256291() {     int YIEOrCkkjs31648700 = -180472010;    int YIEOrCkkjs77287394 = -52666733;    int YIEOrCkkjs91928314 = -892155447;    int YIEOrCkkjs70082310 = -936340636;    int YIEOrCkkjs38173972 = -729735287;    int YIEOrCkkjs22626162 = -960837929;    int YIEOrCkkjs99038314 = -293481720;    int YIEOrCkkjs1862976 = -184504942;    int YIEOrCkkjs59250973 = -852275833;    int YIEOrCkkjs84758709 = -242575330;    int YIEOrCkkjs91166360 = -365749822;    int YIEOrCkkjs5037818 = -249811007;    int YIEOrCkkjs46283327 = -423194386;    int YIEOrCkkjs41572155 = -928297780;    int YIEOrCkkjs24899019 = -205129078;    int YIEOrCkkjs84474681 = -656117252;    int YIEOrCkkjs63994528 = -634081742;    int YIEOrCkkjs41859411 = -949133613;    int YIEOrCkkjs41242603 = -727024560;    int YIEOrCkkjs39933695 = -331329833;    int YIEOrCkkjs14240904 = -853397732;    int YIEOrCkkjs38872493 = -561964876;    int YIEOrCkkjs61607435 = -919563314;    int YIEOrCkkjs35500776 = -792392208;    int YIEOrCkkjs5939827 = -127322386;    int YIEOrCkkjs34662184 = -285511393;    int YIEOrCkkjs42501418 = -30654385;    int YIEOrCkkjs82918464 = -443140187;    int YIEOrCkkjs84154302 = 81446809;    int YIEOrCkkjs15991200 = -518278419;    int YIEOrCkkjs16342534 = -958365344;    int YIEOrCkkjs90845199 = -179163709;    int YIEOrCkkjs31224635 = -980522750;    int YIEOrCkkjs28993144 = -199181147;    int YIEOrCkkjs57737463 = -85662894;    int YIEOrCkkjs30622325 = -503574520;    int YIEOrCkkjs37974355 = -570355117;    int YIEOrCkkjs70007341 = -152259265;    int YIEOrCkkjs97373789 = -26335693;    int YIEOrCkkjs11527001 = -836280000;    int YIEOrCkkjs56130337 = -522610519;    int YIEOrCkkjs64082304 = -858564553;    int YIEOrCkkjs3755393 = -773814286;    int YIEOrCkkjs14126476 = -547669349;    int YIEOrCkkjs31510112 = -919676364;    int YIEOrCkkjs48315727 = -485822969;    int YIEOrCkkjs3411389 = -679790632;    int YIEOrCkkjs93638741 = 92811219;    int YIEOrCkkjs63910 = -762388903;    int YIEOrCkkjs71069846 = -998457933;    int YIEOrCkkjs97547375 = -925802909;    int YIEOrCkkjs8714556 = -540756452;    int YIEOrCkkjs3851517 = -607523633;    int YIEOrCkkjs97232827 = -65856863;    int YIEOrCkkjs19015388 = -803523816;    int YIEOrCkkjs92776207 = -618507134;    int YIEOrCkkjs15679959 = -133103420;    int YIEOrCkkjs56427538 = 236761;    int YIEOrCkkjs64142483 = -709018250;    int YIEOrCkkjs3511789 = -344223894;    int YIEOrCkkjs80124744 = -830183545;    int YIEOrCkkjs16119851 = -850341533;    int YIEOrCkkjs17708674 = -165951751;    int YIEOrCkkjs43259774 = -233997414;    int YIEOrCkkjs68416175 = -284209987;    int YIEOrCkkjs321162 = -86586114;    int YIEOrCkkjs73813182 = -269288258;    int YIEOrCkkjs17290183 = -124013240;    int YIEOrCkkjs83834691 = -742634887;    int YIEOrCkkjs94276694 = -701554559;    int YIEOrCkkjs46500326 = 14237864;    int YIEOrCkkjs93987186 = -381822477;    int YIEOrCkkjs44485621 = -822797921;    int YIEOrCkkjs29715603 = -890744560;    int YIEOrCkkjs83803357 = -808719314;    int YIEOrCkkjs50158599 = -994833179;    int YIEOrCkkjs35117100 = -788150591;    int YIEOrCkkjs47480960 = -271893965;    int YIEOrCkkjs3990665 = -872715845;    int YIEOrCkkjs57624100 = -641499418;    int YIEOrCkkjs31250795 = -605720761;    int YIEOrCkkjs48862676 = -23465605;    int YIEOrCkkjs82854554 = -680751285;    int YIEOrCkkjs13084457 = 79904742;    int YIEOrCkkjs18443825 = -592475511;    int YIEOrCkkjs7627979 = -317608892;    int YIEOrCkkjs86993682 = -571640076;    int YIEOrCkkjs33991808 = -814665887;    int YIEOrCkkjs9977757 = -395657331;    int YIEOrCkkjs64961256 = -467155760;    int YIEOrCkkjs14942366 = -270471100;    int YIEOrCkkjs81546816 = -470591878;    int YIEOrCkkjs5864859 = -443241016;    int YIEOrCkkjs93862001 = -682111799;    int YIEOrCkkjs31402256 = 93903544;    int YIEOrCkkjs40010487 = -672268987;    int YIEOrCkkjs46373631 = -592612802;    int YIEOrCkkjs60495619 = -439816872;    int YIEOrCkkjs45710300 = -163459363;    int YIEOrCkkjs31188950 = -180472010;     YIEOrCkkjs31648700 = YIEOrCkkjs77287394;     YIEOrCkkjs77287394 = YIEOrCkkjs91928314;     YIEOrCkkjs91928314 = YIEOrCkkjs70082310;     YIEOrCkkjs70082310 = YIEOrCkkjs38173972;     YIEOrCkkjs38173972 = YIEOrCkkjs22626162;     YIEOrCkkjs22626162 = YIEOrCkkjs99038314;     YIEOrCkkjs99038314 = YIEOrCkkjs1862976;     YIEOrCkkjs1862976 = YIEOrCkkjs59250973;     YIEOrCkkjs59250973 = YIEOrCkkjs84758709;     YIEOrCkkjs84758709 = YIEOrCkkjs91166360;     YIEOrCkkjs91166360 = YIEOrCkkjs5037818;     YIEOrCkkjs5037818 = YIEOrCkkjs46283327;     YIEOrCkkjs46283327 = YIEOrCkkjs41572155;     YIEOrCkkjs41572155 = YIEOrCkkjs24899019;     YIEOrCkkjs24899019 = YIEOrCkkjs84474681;     YIEOrCkkjs84474681 = YIEOrCkkjs63994528;     YIEOrCkkjs63994528 = YIEOrCkkjs41859411;     YIEOrCkkjs41859411 = YIEOrCkkjs41242603;     YIEOrCkkjs41242603 = YIEOrCkkjs39933695;     YIEOrCkkjs39933695 = YIEOrCkkjs14240904;     YIEOrCkkjs14240904 = YIEOrCkkjs38872493;     YIEOrCkkjs38872493 = YIEOrCkkjs61607435;     YIEOrCkkjs61607435 = YIEOrCkkjs35500776;     YIEOrCkkjs35500776 = YIEOrCkkjs5939827;     YIEOrCkkjs5939827 = YIEOrCkkjs34662184;     YIEOrCkkjs34662184 = YIEOrCkkjs42501418;     YIEOrCkkjs42501418 = YIEOrCkkjs82918464;     YIEOrCkkjs82918464 = YIEOrCkkjs84154302;     YIEOrCkkjs84154302 = YIEOrCkkjs15991200;     YIEOrCkkjs15991200 = YIEOrCkkjs16342534;     YIEOrCkkjs16342534 = YIEOrCkkjs90845199;     YIEOrCkkjs90845199 = YIEOrCkkjs31224635;     YIEOrCkkjs31224635 = YIEOrCkkjs28993144;     YIEOrCkkjs28993144 = YIEOrCkkjs57737463;     YIEOrCkkjs57737463 = YIEOrCkkjs30622325;     YIEOrCkkjs30622325 = YIEOrCkkjs37974355;     YIEOrCkkjs37974355 = YIEOrCkkjs70007341;     YIEOrCkkjs70007341 = YIEOrCkkjs97373789;     YIEOrCkkjs97373789 = YIEOrCkkjs11527001;     YIEOrCkkjs11527001 = YIEOrCkkjs56130337;     YIEOrCkkjs56130337 = YIEOrCkkjs64082304;     YIEOrCkkjs64082304 = YIEOrCkkjs3755393;     YIEOrCkkjs3755393 = YIEOrCkkjs14126476;     YIEOrCkkjs14126476 = YIEOrCkkjs31510112;     YIEOrCkkjs31510112 = YIEOrCkkjs48315727;     YIEOrCkkjs48315727 = YIEOrCkkjs3411389;     YIEOrCkkjs3411389 = YIEOrCkkjs93638741;     YIEOrCkkjs93638741 = YIEOrCkkjs63910;     YIEOrCkkjs63910 = YIEOrCkkjs71069846;     YIEOrCkkjs71069846 = YIEOrCkkjs97547375;     YIEOrCkkjs97547375 = YIEOrCkkjs8714556;     YIEOrCkkjs8714556 = YIEOrCkkjs3851517;     YIEOrCkkjs3851517 = YIEOrCkkjs97232827;     YIEOrCkkjs97232827 = YIEOrCkkjs19015388;     YIEOrCkkjs19015388 = YIEOrCkkjs92776207;     YIEOrCkkjs92776207 = YIEOrCkkjs15679959;     YIEOrCkkjs15679959 = YIEOrCkkjs56427538;     YIEOrCkkjs56427538 = YIEOrCkkjs64142483;     YIEOrCkkjs64142483 = YIEOrCkkjs3511789;     YIEOrCkkjs3511789 = YIEOrCkkjs80124744;     YIEOrCkkjs80124744 = YIEOrCkkjs16119851;     YIEOrCkkjs16119851 = YIEOrCkkjs17708674;     YIEOrCkkjs17708674 = YIEOrCkkjs43259774;     YIEOrCkkjs43259774 = YIEOrCkkjs68416175;     YIEOrCkkjs68416175 = YIEOrCkkjs321162;     YIEOrCkkjs321162 = YIEOrCkkjs73813182;     YIEOrCkkjs73813182 = YIEOrCkkjs17290183;     YIEOrCkkjs17290183 = YIEOrCkkjs83834691;     YIEOrCkkjs83834691 = YIEOrCkkjs94276694;     YIEOrCkkjs94276694 = YIEOrCkkjs46500326;     YIEOrCkkjs46500326 = YIEOrCkkjs93987186;     YIEOrCkkjs93987186 = YIEOrCkkjs44485621;     YIEOrCkkjs44485621 = YIEOrCkkjs29715603;     YIEOrCkkjs29715603 = YIEOrCkkjs83803357;     YIEOrCkkjs83803357 = YIEOrCkkjs50158599;     YIEOrCkkjs50158599 = YIEOrCkkjs35117100;     YIEOrCkkjs35117100 = YIEOrCkkjs47480960;     YIEOrCkkjs47480960 = YIEOrCkkjs3990665;     YIEOrCkkjs3990665 = YIEOrCkkjs57624100;     YIEOrCkkjs57624100 = YIEOrCkkjs31250795;     YIEOrCkkjs31250795 = YIEOrCkkjs48862676;     YIEOrCkkjs48862676 = YIEOrCkkjs82854554;     YIEOrCkkjs82854554 = YIEOrCkkjs13084457;     YIEOrCkkjs13084457 = YIEOrCkkjs18443825;     YIEOrCkkjs18443825 = YIEOrCkkjs7627979;     YIEOrCkkjs7627979 = YIEOrCkkjs86993682;     YIEOrCkkjs86993682 = YIEOrCkkjs33991808;     YIEOrCkkjs33991808 = YIEOrCkkjs9977757;     YIEOrCkkjs9977757 = YIEOrCkkjs64961256;     YIEOrCkkjs64961256 = YIEOrCkkjs14942366;     YIEOrCkkjs14942366 = YIEOrCkkjs81546816;     YIEOrCkkjs81546816 = YIEOrCkkjs5864859;     YIEOrCkkjs5864859 = YIEOrCkkjs93862001;     YIEOrCkkjs93862001 = YIEOrCkkjs31402256;     YIEOrCkkjs31402256 = YIEOrCkkjs40010487;     YIEOrCkkjs40010487 = YIEOrCkkjs46373631;     YIEOrCkkjs46373631 = YIEOrCkkjs60495619;     YIEOrCkkjs60495619 = YIEOrCkkjs45710300;     YIEOrCkkjs45710300 = YIEOrCkkjs31188950;     YIEOrCkkjs31188950 = YIEOrCkkjs31648700;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void zLZQQTNhUr91166975() {     int DoHIJaanze24966697 = 97618510;    int DoHIJaanze11034419 = -777122751;    int DoHIJaanze92844122 = -548886214;    int DoHIJaanze59375987 = -943968650;    int DoHIJaanze31238561 = -595279336;    int DoHIJaanze40344159 = -847276475;    int DoHIJaanze75414194 = -395847561;    int DoHIJaanze63331855 = -535215232;    int DoHIJaanze93968986 = -85842546;    int DoHIJaanze13048692 = -41076917;    int DoHIJaanze64430479 = -47445537;    int DoHIJaanze33493709 = -757841118;    int DoHIJaanze26054970 = 97380233;    int DoHIJaanze82780193 = -718427253;    int DoHIJaanze87679111 = -914031118;    int DoHIJaanze46684101 = -743816707;    int DoHIJaanze13784233 = -126081527;    int DoHIJaanze1355145 = -753589198;    int DoHIJaanze42768354 = -259288995;    int DoHIJaanze61976889 = -213037516;    int DoHIJaanze81958888 = -738501670;    int DoHIJaanze52938229 = -220020011;    int DoHIJaanze32194725 = -552992590;    int DoHIJaanze62286237 = -416193229;    int DoHIJaanze630597 = -43464201;    int DoHIJaanze11213368 = -290147374;    int DoHIJaanze69988823 = -999209733;    int DoHIJaanze99479714 = -453205013;    int DoHIJaanze59026398 = -118859285;    int DoHIJaanze84035461 = -56725879;    int DoHIJaanze30974445 = -269456001;    int DoHIJaanze54584712 = -693534369;    int DoHIJaanze65794480 = -301169768;    int DoHIJaanze47313010 = -899332159;    int DoHIJaanze867660 = -632991968;    int DoHIJaanze89780502 = 11430984;    int DoHIJaanze6354965 = -933388392;    int DoHIJaanze86228890 = 5329458;    int DoHIJaanze35835851 = -503771445;    int DoHIJaanze16509994 = -684165750;    int DoHIJaanze76079588 = -388298217;    int DoHIJaanze59925627 = -517979661;    int DoHIJaanze67505621 = -849445933;    int DoHIJaanze75369475 = -439768931;    int DoHIJaanze31490191 = -535323361;    int DoHIJaanze67482729 = -21809988;    int DoHIJaanze99003528 = -163612362;    int DoHIJaanze22922879 = -979254246;    int DoHIJaanze2992368 = -912051639;    int DoHIJaanze77121924 = -748482051;    int DoHIJaanze41439300 = -772322286;    int DoHIJaanze20442243 = -634588930;    int DoHIJaanze68511520 = -7417954;    int DoHIJaanze69002524 = -760714969;    int DoHIJaanze9208087 = 76590332;    int DoHIJaanze72028468 = -682361479;    int DoHIJaanze78839693 = -124130161;    int DoHIJaanze30557886 = -32692985;    int DoHIJaanze58745390 = -800504449;    int DoHIJaanze20025193 = -205131963;    int DoHIJaanze70355335 = -848066742;    int DoHIJaanze75934480 = -942642548;    int DoHIJaanze4305457 = -316355948;    int DoHIJaanze9933526 = 70883333;    int DoHIJaanze82074246 = -771620917;    int DoHIJaanze9845767 = -353911169;    int DoHIJaanze67699228 = -356671351;    int DoHIJaanze78741960 = -3287608;    int DoHIJaanze81912534 = 14564715;    int DoHIJaanze97898608 = -825462103;    int DoHIJaanze40329136 = -810428316;    int DoHIJaanze27555343 = -31410986;    int DoHIJaanze65519294 = -149817753;    int DoHIJaanze26258360 = -575123245;    int DoHIJaanze85897300 = -824739299;    int DoHIJaanze22033261 = -120522010;    int DoHIJaanze85432607 = -370574079;    int DoHIJaanze56825250 = -13223659;    int DoHIJaanze30796046 = -880869868;    int DoHIJaanze33147868 = 78345786;    int DoHIJaanze12209840 = -26535013;    int DoHIJaanze47065945 = 80044512;    int DoHIJaanze96487346 = -541153374;    int DoHIJaanze81904474 = -370377235;    int DoHIJaanze42596162 = -284403593;    int DoHIJaanze10532203 = -634867071;    int DoHIJaanze86073191 = -586116415;    int DoHIJaanze96791956 = -540454800;    int DoHIJaanze38104923 = -875922492;    int DoHIJaanze28839191 = -950630489;    int DoHIJaanze10940809 = -864438855;    int DoHIJaanze75797079 = -800695407;    int DoHIJaanze27483500 = -194166093;    int DoHIJaanze15810659 = -198639482;    int DoHIJaanze46154658 = -836099009;    int DoHIJaanze145108 = -445655669;    int DoHIJaanze55620170 = -101623714;    int DoHIJaanze57572096 = -820329266;    int DoHIJaanze93295228 = -668148015;    int DoHIJaanze21644424 = 97618510;     DoHIJaanze24966697 = DoHIJaanze11034419;     DoHIJaanze11034419 = DoHIJaanze92844122;     DoHIJaanze92844122 = DoHIJaanze59375987;     DoHIJaanze59375987 = DoHIJaanze31238561;     DoHIJaanze31238561 = DoHIJaanze40344159;     DoHIJaanze40344159 = DoHIJaanze75414194;     DoHIJaanze75414194 = DoHIJaanze63331855;     DoHIJaanze63331855 = DoHIJaanze93968986;     DoHIJaanze93968986 = DoHIJaanze13048692;     DoHIJaanze13048692 = DoHIJaanze64430479;     DoHIJaanze64430479 = DoHIJaanze33493709;     DoHIJaanze33493709 = DoHIJaanze26054970;     DoHIJaanze26054970 = DoHIJaanze82780193;     DoHIJaanze82780193 = DoHIJaanze87679111;     DoHIJaanze87679111 = DoHIJaanze46684101;     DoHIJaanze46684101 = DoHIJaanze13784233;     DoHIJaanze13784233 = DoHIJaanze1355145;     DoHIJaanze1355145 = DoHIJaanze42768354;     DoHIJaanze42768354 = DoHIJaanze61976889;     DoHIJaanze61976889 = DoHIJaanze81958888;     DoHIJaanze81958888 = DoHIJaanze52938229;     DoHIJaanze52938229 = DoHIJaanze32194725;     DoHIJaanze32194725 = DoHIJaanze62286237;     DoHIJaanze62286237 = DoHIJaanze630597;     DoHIJaanze630597 = DoHIJaanze11213368;     DoHIJaanze11213368 = DoHIJaanze69988823;     DoHIJaanze69988823 = DoHIJaanze99479714;     DoHIJaanze99479714 = DoHIJaanze59026398;     DoHIJaanze59026398 = DoHIJaanze84035461;     DoHIJaanze84035461 = DoHIJaanze30974445;     DoHIJaanze30974445 = DoHIJaanze54584712;     DoHIJaanze54584712 = DoHIJaanze65794480;     DoHIJaanze65794480 = DoHIJaanze47313010;     DoHIJaanze47313010 = DoHIJaanze867660;     DoHIJaanze867660 = DoHIJaanze89780502;     DoHIJaanze89780502 = DoHIJaanze6354965;     DoHIJaanze6354965 = DoHIJaanze86228890;     DoHIJaanze86228890 = DoHIJaanze35835851;     DoHIJaanze35835851 = DoHIJaanze16509994;     DoHIJaanze16509994 = DoHIJaanze76079588;     DoHIJaanze76079588 = DoHIJaanze59925627;     DoHIJaanze59925627 = DoHIJaanze67505621;     DoHIJaanze67505621 = DoHIJaanze75369475;     DoHIJaanze75369475 = DoHIJaanze31490191;     DoHIJaanze31490191 = DoHIJaanze67482729;     DoHIJaanze67482729 = DoHIJaanze99003528;     DoHIJaanze99003528 = DoHIJaanze22922879;     DoHIJaanze22922879 = DoHIJaanze2992368;     DoHIJaanze2992368 = DoHIJaanze77121924;     DoHIJaanze77121924 = DoHIJaanze41439300;     DoHIJaanze41439300 = DoHIJaanze20442243;     DoHIJaanze20442243 = DoHIJaanze68511520;     DoHIJaanze68511520 = DoHIJaanze69002524;     DoHIJaanze69002524 = DoHIJaanze9208087;     DoHIJaanze9208087 = DoHIJaanze72028468;     DoHIJaanze72028468 = DoHIJaanze78839693;     DoHIJaanze78839693 = DoHIJaanze30557886;     DoHIJaanze30557886 = DoHIJaanze58745390;     DoHIJaanze58745390 = DoHIJaanze20025193;     DoHIJaanze20025193 = DoHIJaanze70355335;     DoHIJaanze70355335 = DoHIJaanze75934480;     DoHIJaanze75934480 = DoHIJaanze4305457;     DoHIJaanze4305457 = DoHIJaanze9933526;     DoHIJaanze9933526 = DoHIJaanze82074246;     DoHIJaanze82074246 = DoHIJaanze9845767;     DoHIJaanze9845767 = DoHIJaanze67699228;     DoHIJaanze67699228 = DoHIJaanze78741960;     DoHIJaanze78741960 = DoHIJaanze81912534;     DoHIJaanze81912534 = DoHIJaanze97898608;     DoHIJaanze97898608 = DoHIJaanze40329136;     DoHIJaanze40329136 = DoHIJaanze27555343;     DoHIJaanze27555343 = DoHIJaanze65519294;     DoHIJaanze65519294 = DoHIJaanze26258360;     DoHIJaanze26258360 = DoHIJaanze85897300;     DoHIJaanze85897300 = DoHIJaanze22033261;     DoHIJaanze22033261 = DoHIJaanze85432607;     DoHIJaanze85432607 = DoHIJaanze56825250;     DoHIJaanze56825250 = DoHIJaanze30796046;     DoHIJaanze30796046 = DoHIJaanze33147868;     DoHIJaanze33147868 = DoHIJaanze12209840;     DoHIJaanze12209840 = DoHIJaanze47065945;     DoHIJaanze47065945 = DoHIJaanze96487346;     DoHIJaanze96487346 = DoHIJaanze81904474;     DoHIJaanze81904474 = DoHIJaanze42596162;     DoHIJaanze42596162 = DoHIJaanze10532203;     DoHIJaanze10532203 = DoHIJaanze86073191;     DoHIJaanze86073191 = DoHIJaanze96791956;     DoHIJaanze96791956 = DoHIJaanze38104923;     DoHIJaanze38104923 = DoHIJaanze28839191;     DoHIJaanze28839191 = DoHIJaanze10940809;     DoHIJaanze10940809 = DoHIJaanze75797079;     DoHIJaanze75797079 = DoHIJaanze27483500;     DoHIJaanze27483500 = DoHIJaanze15810659;     DoHIJaanze15810659 = DoHIJaanze46154658;     DoHIJaanze46154658 = DoHIJaanze145108;     DoHIJaanze145108 = DoHIJaanze55620170;     DoHIJaanze55620170 = DoHIJaanze57572096;     DoHIJaanze57572096 = DoHIJaanze93295228;     DoHIJaanze93295228 = DoHIJaanze21644424;     DoHIJaanze21644424 = DoHIJaanze24966697;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void RlSPhyczVm97165324() {     int qQWQxinJPI34281963 = -904912516;    int qQWQxinJPI66457341 = -793657253;    int qQWQxinJPI12996203 = -262526827;    int qQWQxinJPI17166009 = -35632642;    int qQWQxinJPI71301799 = -571794494;    int qQWQxinJPI33887521 = -306145335;    int qQWQxinJPI49068266 = -195096439;    int qQWQxinJPI52468011 = -732174380;    int qQWQxinJPI86777643 = -465903217;    int qQWQxinJPI81673148 = -961872585;    int qQWQxinJPI1332464 = -238686610;    int qQWQxinJPI44731458 = -295210934;    int qQWQxinJPI21836686 = -588041901;    int qQWQxinJPI14868835 = -697481357;    int qQWQxinJPI2955149 = -765561529;    int qQWQxinJPI51654625 = -771340185;    int qQWQxinJPI57595000 = -153666614;    int qQWQxinJPI13547786 = -483646510;    int qQWQxinJPI24781286 = -212929824;    int qQWQxinJPI25172237 = -291745357;    int qQWQxinJPI70638239 = 35798402;    int qQWQxinJPI77147141 = -42916343;    int qQWQxinJPI68255991 = -167521590;    int qQWQxinJPI21492866 = 66645661;    int qQWQxinJPI63693139 = -362597252;    int qQWQxinJPI77121185 = -389359015;    int qQWQxinJPI3747090 = -708098578;    int qQWQxinJPI70574189 = -960341746;    int qQWQxinJPI26143306 = -233278721;    int qQWQxinJPI96816409 = -962810441;    int qQWQxinJPI972824 = -980107818;    int qQWQxinJPI31844076 = -24705664;    int qQWQxinJPI15653811 = -112260780;    int qQWQxinJPI36341958 = -382892046;    int qQWQxinJPI87517934 = -809404563;    int qQWQxinJPI21605397 = -404794463;    int qQWQxinJPI43822573 = -534588255;    int qQWQxinJPI42265689 = -847265904;    int qQWQxinJPI2061553 = -554987232;    int qQWQxinJPI92609890 = -391351262;    int qQWQxinJPI142723 = -525454635;    int qQWQxinJPI47577283 = -439251752;    int qQWQxinJPI89222627 = 28673686;    int qQWQxinJPI34126375 = -930163819;    int qQWQxinJPI67440265 = -327099155;    int qQWQxinJPI37721965 = -347344546;    int qQWQxinJPI4253160 = -836446507;    int qQWQxinJPI94393915 = -325797634;    int qQWQxinJPI69019511 = -47748155;    int qQWQxinJPI46759826 = -541495753;    int qQWQxinJPI78407009 = -508198282;    int qQWQxinJPI84659285 = -182575148;    int qQWQxinJPI56519178 = -695194861;    int qQWQxinJPI73583768 = -20568087;    int qQWQxinJPI26527086 = -958327752;    int qQWQxinJPI57134822 = -761996173;    int qQWQxinJPI98201349 = -526135664;    int qQWQxinJPI91503336 = -229172488;    int qQWQxinJPI53472870 = -673035390;    int qQWQxinJPI94180614 = -82435479;    int qQWQxinJPI30140431 = -598046757;    int qQWQxinJPI78494076 = -234754694;    int qQWQxinJPI26324706 = -398895660;    int qQWQxinJPI89961234 = -503092776;    int qQWQxinJPI80700324 = -981764767;    int qQWQxinJPI69488388 = -113980946;    int qQWQxinJPI29077648 = -82950154;    int qQWQxinJPI85494728 = -105149856;    int qQWQxinJPI27350900 = -888076795;    int qQWQxinJPI81349751 = -260767067;    int qQWQxinJPI7832053 = -136751931;    int qQWQxinJPI15329312 = -306400711;    int qQWQxinJPI11486234 = -928659279;    int qQWQxinJPI32171395 = -821578562;    int qQWQxinJPI25029515 = -766290723;    int qQWQxinJPI23060957 = -524949847;    int qQWQxinJPI87924514 = 28409970;    int qQWQxinJPI34129616 = -237357771;    int qQWQxinJPI54052600 = -606255185;    int qQWQxinJPI25971175 = 84747294;    int qQWQxinJPI72868026 = -552912508;    int qQWQxinJPI9353175 = -282300944;    int qQWQxinJPI1554678 = -812593591;    int qQWQxinJPI79383479 = -691782968;    int qQWQxinJPI18409401 = -354612159;    int qQWQxinJPI16313539 = -697532670;    int qQWQxinJPI75324897 = -329510804;    int qQWQxinJPI42070043 = 8307306;    int qQWQxinJPI9814873 = -424564294;    int qQWQxinJPI30383113 = 52591610;    int qQWQxinJPI23404048 = -878658799;    int qQWQxinJPI52319236 = -205415767;    int qQWQxinJPI88792819 = -74230515;    int qQWQxinJPI7880938 = -372551753;    int qQWQxinJPI62469460 = -793304505;    int qQWQxinJPI21648646 = -190699942;    int qQWQxinJPI21252577 = 59643907;    int qQWQxinJPI99261392 = -468233539;    int qQWQxinJPI53426051 = -948399052;    int qQWQxinJPI97951877 = -904912516;     qQWQxinJPI34281963 = qQWQxinJPI66457341;     qQWQxinJPI66457341 = qQWQxinJPI12996203;     qQWQxinJPI12996203 = qQWQxinJPI17166009;     qQWQxinJPI17166009 = qQWQxinJPI71301799;     qQWQxinJPI71301799 = qQWQxinJPI33887521;     qQWQxinJPI33887521 = qQWQxinJPI49068266;     qQWQxinJPI49068266 = qQWQxinJPI52468011;     qQWQxinJPI52468011 = qQWQxinJPI86777643;     qQWQxinJPI86777643 = qQWQxinJPI81673148;     qQWQxinJPI81673148 = qQWQxinJPI1332464;     qQWQxinJPI1332464 = qQWQxinJPI44731458;     qQWQxinJPI44731458 = qQWQxinJPI21836686;     qQWQxinJPI21836686 = qQWQxinJPI14868835;     qQWQxinJPI14868835 = qQWQxinJPI2955149;     qQWQxinJPI2955149 = qQWQxinJPI51654625;     qQWQxinJPI51654625 = qQWQxinJPI57595000;     qQWQxinJPI57595000 = qQWQxinJPI13547786;     qQWQxinJPI13547786 = qQWQxinJPI24781286;     qQWQxinJPI24781286 = qQWQxinJPI25172237;     qQWQxinJPI25172237 = qQWQxinJPI70638239;     qQWQxinJPI70638239 = qQWQxinJPI77147141;     qQWQxinJPI77147141 = qQWQxinJPI68255991;     qQWQxinJPI68255991 = qQWQxinJPI21492866;     qQWQxinJPI21492866 = qQWQxinJPI63693139;     qQWQxinJPI63693139 = qQWQxinJPI77121185;     qQWQxinJPI77121185 = qQWQxinJPI3747090;     qQWQxinJPI3747090 = qQWQxinJPI70574189;     qQWQxinJPI70574189 = qQWQxinJPI26143306;     qQWQxinJPI26143306 = qQWQxinJPI96816409;     qQWQxinJPI96816409 = qQWQxinJPI972824;     qQWQxinJPI972824 = qQWQxinJPI31844076;     qQWQxinJPI31844076 = qQWQxinJPI15653811;     qQWQxinJPI15653811 = qQWQxinJPI36341958;     qQWQxinJPI36341958 = qQWQxinJPI87517934;     qQWQxinJPI87517934 = qQWQxinJPI21605397;     qQWQxinJPI21605397 = qQWQxinJPI43822573;     qQWQxinJPI43822573 = qQWQxinJPI42265689;     qQWQxinJPI42265689 = qQWQxinJPI2061553;     qQWQxinJPI2061553 = qQWQxinJPI92609890;     qQWQxinJPI92609890 = qQWQxinJPI142723;     qQWQxinJPI142723 = qQWQxinJPI47577283;     qQWQxinJPI47577283 = qQWQxinJPI89222627;     qQWQxinJPI89222627 = qQWQxinJPI34126375;     qQWQxinJPI34126375 = qQWQxinJPI67440265;     qQWQxinJPI67440265 = qQWQxinJPI37721965;     qQWQxinJPI37721965 = qQWQxinJPI4253160;     qQWQxinJPI4253160 = qQWQxinJPI94393915;     qQWQxinJPI94393915 = qQWQxinJPI69019511;     qQWQxinJPI69019511 = qQWQxinJPI46759826;     qQWQxinJPI46759826 = qQWQxinJPI78407009;     qQWQxinJPI78407009 = qQWQxinJPI84659285;     qQWQxinJPI84659285 = qQWQxinJPI56519178;     qQWQxinJPI56519178 = qQWQxinJPI73583768;     qQWQxinJPI73583768 = qQWQxinJPI26527086;     qQWQxinJPI26527086 = qQWQxinJPI57134822;     qQWQxinJPI57134822 = qQWQxinJPI98201349;     qQWQxinJPI98201349 = qQWQxinJPI91503336;     qQWQxinJPI91503336 = qQWQxinJPI53472870;     qQWQxinJPI53472870 = qQWQxinJPI94180614;     qQWQxinJPI94180614 = qQWQxinJPI30140431;     qQWQxinJPI30140431 = qQWQxinJPI78494076;     qQWQxinJPI78494076 = qQWQxinJPI26324706;     qQWQxinJPI26324706 = qQWQxinJPI89961234;     qQWQxinJPI89961234 = qQWQxinJPI80700324;     qQWQxinJPI80700324 = qQWQxinJPI69488388;     qQWQxinJPI69488388 = qQWQxinJPI29077648;     qQWQxinJPI29077648 = qQWQxinJPI85494728;     qQWQxinJPI85494728 = qQWQxinJPI27350900;     qQWQxinJPI27350900 = qQWQxinJPI81349751;     qQWQxinJPI81349751 = qQWQxinJPI7832053;     qQWQxinJPI7832053 = qQWQxinJPI15329312;     qQWQxinJPI15329312 = qQWQxinJPI11486234;     qQWQxinJPI11486234 = qQWQxinJPI32171395;     qQWQxinJPI32171395 = qQWQxinJPI25029515;     qQWQxinJPI25029515 = qQWQxinJPI23060957;     qQWQxinJPI23060957 = qQWQxinJPI87924514;     qQWQxinJPI87924514 = qQWQxinJPI34129616;     qQWQxinJPI34129616 = qQWQxinJPI54052600;     qQWQxinJPI54052600 = qQWQxinJPI25971175;     qQWQxinJPI25971175 = qQWQxinJPI72868026;     qQWQxinJPI72868026 = qQWQxinJPI9353175;     qQWQxinJPI9353175 = qQWQxinJPI1554678;     qQWQxinJPI1554678 = qQWQxinJPI79383479;     qQWQxinJPI79383479 = qQWQxinJPI18409401;     qQWQxinJPI18409401 = qQWQxinJPI16313539;     qQWQxinJPI16313539 = qQWQxinJPI75324897;     qQWQxinJPI75324897 = qQWQxinJPI42070043;     qQWQxinJPI42070043 = qQWQxinJPI9814873;     qQWQxinJPI9814873 = qQWQxinJPI30383113;     qQWQxinJPI30383113 = qQWQxinJPI23404048;     qQWQxinJPI23404048 = qQWQxinJPI52319236;     qQWQxinJPI52319236 = qQWQxinJPI88792819;     qQWQxinJPI88792819 = qQWQxinJPI7880938;     qQWQxinJPI7880938 = qQWQxinJPI62469460;     qQWQxinJPI62469460 = qQWQxinJPI21648646;     qQWQxinJPI21648646 = qQWQxinJPI21252577;     qQWQxinJPI21252577 = qQWQxinJPI99261392;     qQWQxinJPI99261392 = qQWQxinJPI53426051;     qQWQxinJPI53426051 = qQWQxinJPI97951877;     qQWQxinJPI97951877 = qQWQxinJPI34281963;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void gHHnEGjqSX55406206() {     int umjUBwCAoM72939091 = -61818553;    int umjUBwCAoM91779062 = -981143582;    int umjUBwCAoM54492576 = -591001594;    int umjUBwCAoM20104605 = -957699075;    int umjUBwCAoM98754819 = -133258625;    int umjUBwCAoM72236552 = -862865856;    int umjUBwCAoM72890777 = -800106074;    int umjUBwCAoM53975838 = -286493756;    int umjUBwCAoM16461411 = -466262630;    int umjUBwCAoM23970659 = -118379773;    int umjUBwCAoM16305893 = -354497825;    int umjUBwCAoM24714314 = -352295318;    int umjUBwCAoM69643928 = -285585452;    int umjUBwCAoM16954663 = -120660303;    int umjUBwCAoM80683276 = -430054789;    int umjUBwCAoM98661056 = -461675727;    int umjUBwCAoM63405701 = -91681141;    int umjUBwCAoM28447466 = -621609249;    int umjUBwCAoM45514706 = -77364977;    int umjUBwCAoM1654639 = -440111345;    int umjUBwCAoM83851260 = -91688760;    int umjUBwCAoM18256554 = -44519254;    int umjUBwCAoM39251846 = -773165287;    int umjUBwCAoM90500066 = -839035066;    int umjUBwCAoM91073983 = -332519468;    int umjUBwCAoM29005499 = -298492140;    int umjUBwCAoM99466152 = -322609361;    int umjUBwCAoM69289964 = -471321699;    int umjUBwCAoM73796171 = -699410255;    int umjUBwCAoM46515131 = -985931307;    int umjUBwCAoM97311884 = -129419184;    int umjUBwCAoM49315836 = -519401558;    int umjUBwCAoM68020203 = -178334400;    int umjUBwCAoM60288768 = -179603981;    int umjUBwCAoM78502011 = -298184302;    int umjUBwCAoM36265222 = -821559108;    int umjUBwCAoM49440062 = -46848288;    int umjUBwCAoM15427678 = -811010839;    int umjUBwCAoM25067561 = -263155798;    int umjUBwCAoM45479382 = -190360098;    int umjUBwCAoM51988240 = -366536073;    int umjUBwCAoM92443608 = -784926856;    int umjUBwCAoM22256033 = -765582898;    int umjUBwCAoM45606873 = -905548179;    int umjUBwCAoM91454333 = -283487956;    int umjUBwCAoM41983333 = -726586621;    int umjUBwCAoM11069380 = -774491475;    int umjUBwCAoM75634323 = -928972084;    int umjUBwCAoM48263593 = -961444564;    int umjUBwCAoM28015665 = -738525463;    int umjUBwCAoM60444763 = -276057165;    int umjUBwCAoM21552080 = -143487392;    int umjUBwCAoM64899527 = -247227733;    int umjUBwCAoM98187978 = -251459559;    int umjUBwCAoM71554946 = -539204200;    int umjUBwCAoM54682537 = 82700700;    int umjUBwCAoM52527216 = -107978295;    int umjUBwCAoM63992510 = -751966529;    int umjUBwCAoM29030622 = -525179607;    int umjUBwCAoM69749320 = -834766486;    int umjUBwCAoM72770399 = -440256495;    int umjUBwCAoM3600814 = -228784375;    int umjUBwCAoM80179666 = -587083502;    int umjUBwCAoM69946279 = -480331323;    int umjUBwCAoM26658774 = -988960590;    int umjUBwCAoM66990057 = -835096268;    int umjUBwCAoM56694111 = -73960919;    int umjUBwCAoM9355161 = -5981472;    int umjUBwCAoM38452651 = -822476002;    int umjUBwCAoM44418054 = -608495681;    int umjUBwCAoM49220994 = -314827439;    int umjUBwCAoM47978023 = -280670303;    int umjUBwCAoM3379905 = -258453451;    int umjUBwCAoM35324 = -887004880;    int umjUBwCAoM49666399 = 26424728;    int umjUBwCAoM91407652 = -306761904;    int umjUBwCAoM96000521 = -278936356;    int umjUBwCAoM93644972 = -867617109;    int umjUBwCAoM99045732 = -455547110;    int umjUBwCAoM49090650 = -605932848;    int umjUBwCAoM17936119 = -524000665;    int umjUBwCAoM23831829 = -393637278;    int umjUBwCAoM21026372 = -509877136;    int umjUBwCAoM45780507 = -960884792;    int umjUBwCAoM86070368 = -609874143;    int umjUBwCAoM75759805 = -985931792;    int umjUBwCAoM84416308 = -172173825;    int umjUBwCAoM69832225 = -926874841;    int umjUBwCAoM88733822 = -640399781;    int umjUBwCAoM23819475 = -280885002;    int umjUBwCAoM83738005 = -613580813;    int umjUBwCAoM85447552 = -294881760;    int umjUBwCAoM86397055 = -185831232;    int umjUBwCAoM55318241 = -428389313;    int umjUBwCAoM72708983 = -750103603;    int umjUBwCAoM48387427 = -37751698;    int umjUBwCAoM12263942 = -97843355;    int umjUBwCAoM52309754 = -185251576;    int umjUBwCAoM18948100 = -916587590;    int umjUBwCAoM24464277 = -61818553;     umjUBwCAoM72939091 = umjUBwCAoM91779062;     umjUBwCAoM91779062 = umjUBwCAoM54492576;     umjUBwCAoM54492576 = umjUBwCAoM20104605;     umjUBwCAoM20104605 = umjUBwCAoM98754819;     umjUBwCAoM98754819 = umjUBwCAoM72236552;     umjUBwCAoM72236552 = umjUBwCAoM72890777;     umjUBwCAoM72890777 = umjUBwCAoM53975838;     umjUBwCAoM53975838 = umjUBwCAoM16461411;     umjUBwCAoM16461411 = umjUBwCAoM23970659;     umjUBwCAoM23970659 = umjUBwCAoM16305893;     umjUBwCAoM16305893 = umjUBwCAoM24714314;     umjUBwCAoM24714314 = umjUBwCAoM69643928;     umjUBwCAoM69643928 = umjUBwCAoM16954663;     umjUBwCAoM16954663 = umjUBwCAoM80683276;     umjUBwCAoM80683276 = umjUBwCAoM98661056;     umjUBwCAoM98661056 = umjUBwCAoM63405701;     umjUBwCAoM63405701 = umjUBwCAoM28447466;     umjUBwCAoM28447466 = umjUBwCAoM45514706;     umjUBwCAoM45514706 = umjUBwCAoM1654639;     umjUBwCAoM1654639 = umjUBwCAoM83851260;     umjUBwCAoM83851260 = umjUBwCAoM18256554;     umjUBwCAoM18256554 = umjUBwCAoM39251846;     umjUBwCAoM39251846 = umjUBwCAoM90500066;     umjUBwCAoM90500066 = umjUBwCAoM91073983;     umjUBwCAoM91073983 = umjUBwCAoM29005499;     umjUBwCAoM29005499 = umjUBwCAoM99466152;     umjUBwCAoM99466152 = umjUBwCAoM69289964;     umjUBwCAoM69289964 = umjUBwCAoM73796171;     umjUBwCAoM73796171 = umjUBwCAoM46515131;     umjUBwCAoM46515131 = umjUBwCAoM97311884;     umjUBwCAoM97311884 = umjUBwCAoM49315836;     umjUBwCAoM49315836 = umjUBwCAoM68020203;     umjUBwCAoM68020203 = umjUBwCAoM60288768;     umjUBwCAoM60288768 = umjUBwCAoM78502011;     umjUBwCAoM78502011 = umjUBwCAoM36265222;     umjUBwCAoM36265222 = umjUBwCAoM49440062;     umjUBwCAoM49440062 = umjUBwCAoM15427678;     umjUBwCAoM15427678 = umjUBwCAoM25067561;     umjUBwCAoM25067561 = umjUBwCAoM45479382;     umjUBwCAoM45479382 = umjUBwCAoM51988240;     umjUBwCAoM51988240 = umjUBwCAoM92443608;     umjUBwCAoM92443608 = umjUBwCAoM22256033;     umjUBwCAoM22256033 = umjUBwCAoM45606873;     umjUBwCAoM45606873 = umjUBwCAoM91454333;     umjUBwCAoM91454333 = umjUBwCAoM41983333;     umjUBwCAoM41983333 = umjUBwCAoM11069380;     umjUBwCAoM11069380 = umjUBwCAoM75634323;     umjUBwCAoM75634323 = umjUBwCAoM48263593;     umjUBwCAoM48263593 = umjUBwCAoM28015665;     umjUBwCAoM28015665 = umjUBwCAoM60444763;     umjUBwCAoM60444763 = umjUBwCAoM21552080;     umjUBwCAoM21552080 = umjUBwCAoM64899527;     umjUBwCAoM64899527 = umjUBwCAoM98187978;     umjUBwCAoM98187978 = umjUBwCAoM71554946;     umjUBwCAoM71554946 = umjUBwCAoM54682537;     umjUBwCAoM54682537 = umjUBwCAoM52527216;     umjUBwCAoM52527216 = umjUBwCAoM63992510;     umjUBwCAoM63992510 = umjUBwCAoM29030622;     umjUBwCAoM29030622 = umjUBwCAoM69749320;     umjUBwCAoM69749320 = umjUBwCAoM72770399;     umjUBwCAoM72770399 = umjUBwCAoM3600814;     umjUBwCAoM3600814 = umjUBwCAoM80179666;     umjUBwCAoM80179666 = umjUBwCAoM69946279;     umjUBwCAoM69946279 = umjUBwCAoM26658774;     umjUBwCAoM26658774 = umjUBwCAoM66990057;     umjUBwCAoM66990057 = umjUBwCAoM56694111;     umjUBwCAoM56694111 = umjUBwCAoM9355161;     umjUBwCAoM9355161 = umjUBwCAoM38452651;     umjUBwCAoM38452651 = umjUBwCAoM44418054;     umjUBwCAoM44418054 = umjUBwCAoM49220994;     umjUBwCAoM49220994 = umjUBwCAoM47978023;     umjUBwCAoM47978023 = umjUBwCAoM3379905;     umjUBwCAoM3379905 = umjUBwCAoM35324;     umjUBwCAoM35324 = umjUBwCAoM49666399;     umjUBwCAoM49666399 = umjUBwCAoM91407652;     umjUBwCAoM91407652 = umjUBwCAoM96000521;     umjUBwCAoM96000521 = umjUBwCAoM93644972;     umjUBwCAoM93644972 = umjUBwCAoM99045732;     umjUBwCAoM99045732 = umjUBwCAoM49090650;     umjUBwCAoM49090650 = umjUBwCAoM17936119;     umjUBwCAoM17936119 = umjUBwCAoM23831829;     umjUBwCAoM23831829 = umjUBwCAoM21026372;     umjUBwCAoM21026372 = umjUBwCAoM45780507;     umjUBwCAoM45780507 = umjUBwCAoM86070368;     umjUBwCAoM86070368 = umjUBwCAoM75759805;     umjUBwCAoM75759805 = umjUBwCAoM84416308;     umjUBwCAoM84416308 = umjUBwCAoM69832225;     umjUBwCAoM69832225 = umjUBwCAoM88733822;     umjUBwCAoM88733822 = umjUBwCAoM23819475;     umjUBwCAoM23819475 = umjUBwCAoM83738005;     umjUBwCAoM83738005 = umjUBwCAoM85447552;     umjUBwCAoM85447552 = umjUBwCAoM86397055;     umjUBwCAoM86397055 = umjUBwCAoM55318241;     umjUBwCAoM55318241 = umjUBwCAoM72708983;     umjUBwCAoM72708983 = umjUBwCAoM48387427;     umjUBwCAoM48387427 = umjUBwCAoM12263942;     umjUBwCAoM12263942 = umjUBwCAoM52309754;     umjUBwCAoM52309754 = umjUBwCAoM18948100;     umjUBwCAoM18948100 = umjUBwCAoM24464277;     umjUBwCAoM24464277 = umjUBwCAoM72939091;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void sqzNWDxYhe32182798() {     long VvuReenlFK12778098 = -766873545;    long VvuReenlFK67393516 = -505043995;    long VvuReenlFK34449180 = -324424359;    long VvuReenlFK40597304 = -283464841;    long VvuReenlFK49421670 = -618945518;    long VvuReenlFK83694630 = -55540963;    long VvuReenlFK12397141 = -611719306;    long VvuReenlFK14379325 = -569866584;    long VvuReenlFK2008476 = -35189509;    long VvuReenlFK10465785 = -304597984;    long VvuReenlFK24385371 = -612088687;    long VvuReenlFK50322046 = -109710382;    long VvuReenlFK64870127 = -298723403;    long VvuReenlFK82932538 = -538869997;    long VvuReenlFK41897989 = 63107527;    long VvuReenlFK5621616 = -717001834;    long VvuReenlFK71070305 = -272009759;    long VvuReenlFK20328022 = -822251371;    long VvuReenlFK28428096 = -976278879;    long VvuReenlFK24330889 = -16313294;    long VvuReenlFK59661320 = 740671;    long VvuReenlFK50353715 = -818102227;    long VvuReenlFK53238102 = -388816971;    long VvuReenlFK36547663 = -20802837;    long VvuReenlFK53486398 = -65719726;    long VvuReenlFK35863452 = -47165973;    long VvuReenlFK12073266 = -742346915;    long VvuReenlFK33847171 = 74066112;    long VvuReenlFK65016180 = -232506438;    long VvuReenlFK44701563 = -294866393;    long VvuReenlFK79272026 = -908611451;    long VvuReenlFK67900710 = -326001036;    long VvuReenlFK63218958 = -511647915;    long VvuReenlFK90914756 = -29412827;    long VvuReenlFK78169498 = -736036496;    long VvuReenlFK85559416 = -208923129;    long VvuReenlFK8450929 = -70738799;    long VvuReenlFK67379101 = -480475735;    long VvuReenlFK18121933 = 84191469;    long VvuReenlFK65138659 = -237804122;    long VvuReenlFK19388902 = -928836068;    long VvuReenlFK50358207 = -709542824;    long VvuReenlFK23193998 = -88574300;    long VvuReenlFK20018108 = -393075961;    long VvuReenlFK2398563 = -114715039;    long VvuReenlFK8296402 = -4845597;    long VvuReenlFK18951372 = -485233075;    long VvuReenlFK66179007 = -578179853;    long VvuReenlFK21478133 = -912906669;    long VvuReenlFK31812003 = -254307928;    long VvuReenlFK89551115 = -178761990;    long VvuReenlFK37504333 = -66802935;    long VvuReenlFK2392475 = -298963189;    long VvuReenlFK92652031 = 93381145;    long VvuReenlFK72521478 = -395687747;    long VvuReenlFK62424383 = -948771318;    long VvuReenlFK14155415 = -16227024;    long VvuReenlFK97901517 = -203621522;    long VvuReenlFK87110905 = -117745116;    long VvuReenlFK13558219 = -471779546;    long VvuReenlFK71621364 = -313194048;    long VvuReenlFK78549969 = -585785418;    long VvuReenlFK49363144 = -237360147;    long VvuReenlFK57306912 = -740323117;    long VvuReenlFK31193758 = -395986534;    long VvuReenlFK56484660 = -186087651;    long VvuReenlFK87103087 = -598062467;    long VvuReenlFK73955371 = -169310576;    long VvuReenlFK4763040 = -802833501;    long VvuReenlFK56338572 = -727969344;    long VvuReenlFK97170686 = -546263036;    long VvuReenlFK3691204 = -791534025;    long VvuReenlFK2206089 = -806442841;    long VvuReenlFK63289436 = -638474758;    long VvuReenlFK4941988 = -87477226;    long VvuReenlFK9303113 = -289716506;    long VvuReenlFK27159718 = -629527928;    long VvuReenlFK33219994 = -995741011;    long VvuReenlFK34149100 = -906087799;    long VvuReenlFK45189996 = 39125870;    long VvuReenlFK16912080 = -561932898;    long VvuReenlFK45894258 = -64167063;    long VvuReenlFK12369039 = -13027220;    long VvuReenlFK33204178 = -978198511;    long VvuReenlFK55150447 = -16104403;    long VvuReenlFK41767693 = -741808516;    long VvuReenlFK65508236 = 72962152;    long VvuReenlFK70566926 = -505029061;    long VvuReenlFK18393278 = -633725080;    long VvuReenlFK15745116 = -787265179;    long VvuReenlFK71404002 = -92696106;    long VvuReenlFK10549412 = -867117277;    long VvuReenlFK80268195 = -262730619;    long VvuReenlFK4563715 = -444028985;    long VvuReenlFK93517294 = -924610074;    long VvuReenlFK40838932 = -243050651;    long VvuReenlFK995064 = -372182678;    long VvuReenlFK65887085 = -348251183;    long VvuReenlFK88824350 = -997089428;    long VvuReenlFK45913902 = -766873545;     VvuReenlFK12778098 = VvuReenlFK67393516;     VvuReenlFK67393516 = VvuReenlFK34449180;     VvuReenlFK34449180 = VvuReenlFK40597304;     VvuReenlFK40597304 = VvuReenlFK49421670;     VvuReenlFK49421670 = VvuReenlFK83694630;     VvuReenlFK83694630 = VvuReenlFK12397141;     VvuReenlFK12397141 = VvuReenlFK14379325;     VvuReenlFK14379325 = VvuReenlFK2008476;     VvuReenlFK2008476 = VvuReenlFK10465785;     VvuReenlFK10465785 = VvuReenlFK24385371;     VvuReenlFK24385371 = VvuReenlFK50322046;     VvuReenlFK50322046 = VvuReenlFK64870127;     VvuReenlFK64870127 = VvuReenlFK82932538;     VvuReenlFK82932538 = VvuReenlFK41897989;     VvuReenlFK41897989 = VvuReenlFK5621616;     VvuReenlFK5621616 = VvuReenlFK71070305;     VvuReenlFK71070305 = VvuReenlFK20328022;     VvuReenlFK20328022 = VvuReenlFK28428096;     VvuReenlFK28428096 = VvuReenlFK24330889;     VvuReenlFK24330889 = VvuReenlFK59661320;     VvuReenlFK59661320 = VvuReenlFK50353715;     VvuReenlFK50353715 = VvuReenlFK53238102;     VvuReenlFK53238102 = VvuReenlFK36547663;     VvuReenlFK36547663 = VvuReenlFK53486398;     VvuReenlFK53486398 = VvuReenlFK35863452;     VvuReenlFK35863452 = VvuReenlFK12073266;     VvuReenlFK12073266 = VvuReenlFK33847171;     VvuReenlFK33847171 = VvuReenlFK65016180;     VvuReenlFK65016180 = VvuReenlFK44701563;     VvuReenlFK44701563 = VvuReenlFK79272026;     VvuReenlFK79272026 = VvuReenlFK67900710;     VvuReenlFK67900710 = VvuReenlFK63218958;     VvuReenlFK63218958 = VvuReenlFK90914756;     VvuReenlFK90914756 = VvuReenlFK78169498;     VvuReenlFK78169498 = VvuReenlFK85559416;     VvuReenlFK85559416 = VvuReenlFK8450929;     VvuReenlFK8450929 = VvuReenlFK67379101;     VvuReenlFK67379101 = VvuReenlFK18121933;     VvuReenlFK18121933 = VvuReenlFK65138659;     VvuReenlFK65138659 = VvuReenlFK19388902;     VvuReenlFK19388902 = VvuReenlFK50358207;     VvuReenlFK50358207 = VvuReenlFK23193998;     VvuReenlFK23193998 = VvuReenlFK20018108;     VvuReenlFK20018108 = VvuReenlFK2398563;     VvuReenlFK2398563 = VvuReenlFK8296402;     VvuReenlFK8296402 = VvuReenlFK18951372;     VvuReenlFK18951372 = VvuReenlFK66179007;     VvuReenlFK66179007 = VvuReenlFK21478133;     VvuReenlFK21478133 = VvuReenlFK31812003;     VvuReenlFK31812003 = VvuReenlFK89551115;     VvuReenlFK89551115 = VvuReenlFK37504333;     VvuReenlFK37504333 = VvuReenlFK2392475;     VvuReenlFK2392475 = VvuReenlFK92652031;     VvuReenlFK92652031 = VvuReenlFK72521478;     VvuReenlFK72521478 = VvuReenlFK62424383;     VvuReenlFK62424383 = VvuReenlFK14155415;     VvuReenlFK14155415 = VvuReenlFK97901517;     VvuReenlFK97901517 = VvuReenlFK87110905;     VvuReenlFK87110905 = VvuReenlFK13558219;     VvuReenlFK13558219 = VvuReenlFK71621364;     VvuReenlFK71621364 = VvuReenlFK78549969;     VvuReenlFK78549969 = VvuReenlFK49363144;     VvuReenlFK49363144 = VvuReenlFK57306912;     VvuReenlFK57306912 = VvuReenlFK31193758;     VvuReenlFK31193758 = VvuReenlFK56484660;     VvuReenlFK56484660 = VvuReenlFK87103087;     VvuReenlFK87103087 = VvuReenlFK73955371;     VvuReenlFK73955371 = VvuReenlFK4763040;     VvuReenlFK4763040 = VvuReenlFK56338572;     VvuReenlFK56338572 = VvuReenlFK97170686;     VvuReenlFK97170686 = VvuReenlFK3691204;     VvuReenlFK3691204 = VvuReenlFK2206089;     VvuReenlFK2206089 = VvuReenlFK63289436;     VvuReenlFK63289436 = VvuReenlFK4941988;     VvuReenlFK4941988 = VvuReenlFK9303113;     VvuReenlFK9303113 = VvuReenlFK27159718;     VvuReenlFK27159718 = VvuReenlFK33219994;     VvuReenlFK33219994 = VvuReenlFK34149100;     VvuReenlFK34149100 = VvuReenlFK45189996;     VvuReenlFK45189996 = VvuReenlFK16912080;     VvuReenlFK16912080 = VvuReenlFK45894258;     VvuReenlFK45894258 = VvuReenlFK12369039;     VvuReenlFK12369039 = VvuReenlFK33204178;     VvuReenlFK33204178 = VvuReenlFK55150447;     VvuReenlFK55150447 = VvuReenlFK41767693;     VvuReenlFK41767693 = VvuReenlFK65508236;     VvuReenlFK65508236 = VvuReenlFK70566926;     VvuReenlFK70566926 = VvuReenlFK18393278;     VvuReenlFK18393278 = VvuReenlFK15745116;     VvuReenlFK15745116 = VvuReenlFK71404002;     VvuReenlFK71404002 = VvuReenlFK10549412;     VvuReenlFK10549412 = VvuReenlFK80268195;     VvuReenlFK80268195 = VvuReenlFK4563715;     VvuReenlFK4563715 = VvuReenlFK93517294;     VvuReenlFK93517294 = VvuReenlFK40838932;     VvuReenlFK40838932 = VvuReenlFK995064;     VvuReenlFK995064 = VvuReenlFK65887085;     VvuReenlFK65887085 = VvuReenlFK88824350;     VvuReenlFK88824350 = VvuReenlFK45913902;     VvuReenlFK45913902 = VvuReenlFK12778098;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void HFAEnZwewX74061651() {     long fFiVcRbjDE91563152 = -839404748;    long fFiVcRbjDE41197223 = 43192287;    long fFiVcRbjDE96109949 = 24588566;    long fFiVcRbjDE20764510 = -61567889;    long fFiVcRbjDE87721399 = -554644261;    long fFiVcRbjDE94128708 = -580036388;    long fFiVcRbjDE88746256 = -103140297;    long fFiVcRbjDE1462202 = -384589369;    long fFiVcRbjDE84818888 = -940030042;    long fFiVcRbjDE57859086 = -496777980;    long fFiVcRbjDE10430468 = -696452042;    long fFiVcRbjDE61481490 = -262513311;    long fFiVcRbjDE93060274 = -578088195;    long fFiVcRbjDE34976165 = -423921564;    long fFiVcRbjDE56407460 = -95828463;    long fFiVcRbjDE83166652 = -849518333;    long fFiVcRbjDE6879996 = 33534115;    long fFiVcRbjDE75833280 = -478795497;    long fFiVcRbjDE29968839 = -602628902;    long fFiVcRbjDE119099 = -109551479;    long fFiVcRbjDE40879388 = -453554990;    long fFiVcRbjDE44970644 = -200303802;    long fFiVcRbjDE48252776 = -461181129;    long fFiVcRbjDE52563433 = -854277809;    long fFiVcRbjDE45641758 = -297479423;    long fFiVcRbjDE77395211 = -405121350;    long fFiVcRbjDE37204268 = -41186764;    long fFiVcRbjDE46882440 = -994562153;    long fFiVcRbjDE20708433 = -474319441;    long fFiVcRbjDE48166898 = -273531806;    long fFiVcRbjDE70721321 = -837816052;    long fFiVcRbjDE88558419 = -673565909;    long fFiVcRbjDE53191286 = -2460641;    long fFiVcRbjDE38629502 = -123405486;    long fFiVcRbjDE34160601 = -910323416;    long fFiVcRbjDE42743201 = -633775748;    long fFiVcRbjDE36316646 = -448901392;    long fFiVcRbjDE97418954 = -311464243;    long fFiVcRbjDE92832559 = 21731211;    long fFiVcRbjDE69552069 = -314162809;    long fFiVcRbjDE87970175 = -728792807;    long fFiVcRbjDE53444580 = -821263121;    long fFiVcRbjDE25973404 = -668473915;    long fFiVcRbjDE22352573 = -343302398;    long fFiVcRbjDE47372535 = -340298946;    long fFiVcRbjDE22889773 = -89700409;    long fFiVcRbjDE49266435 = -401440388;    long fFiVcRbjDE93959979 = -230820216;    long fFiVcRbjDE98976270 = -996601458;    long fFiVcRbjDE87336891 = 88422246;    long fFiVcRbjDE47639552 = -426364166;    long fFiVcRbjDE64533421 = -721605575;    long fFiVcRbjDE16363192 = -414835554;    long fFiVcRbjDE17600737 = -403085646;    long fFiVcRbjDE33182264 = -165939647;    long fFiVcRbjDE46592509 = -539100946;    long fFiVcRbjDE92944447 = -495626584;    long fFiVcRbjDE43546517 = -121133626;    long fFiVcRbjDE75122752 = -764088466;    long fFiVcRbjDE10326189 = -49522911;    long fFiVcRbjDE56924440 = -438849625;    long fFiVcRbjDE41863817 = -108578144;    long fFiVcRbjDE80753768 = -910269928;    long fFiVcRbjDE36651991 = -566498236;    long fFiVcRbjDE87137765 = -658961928;    long fFiVcRbjDE21872048 = 77113867;    long fFiVcRbjDE8290204 = -160052671;    long fFiVcRbjDE54430772 = -354682709;    long fFiVcRbjDE815565 = -513598149;    long fFiVcRbjDE13664260 = -462052715;    long fFiVcRbjDE46850006 = -300616942;    long fFiVcRbjDE9461042 = -655001643;    long fFiVcRbjDE83000720 = -400526708;    long fFiVcRbjDE60416770 = -188466093;    long fFiVcRbjDE12148923 = -380758672;    long fFiVcRbjDE87434807 = -632291870;    long fFiVcRbjDE18997240 = -531829887;    long fFiVcRbjDE25900204 = -17878731;    long fFiVcRbjDE5190898 = -413978864;    long fFiVcRbjDE22751986 = -107779015;    long fFiVcRbjDE28128777 = 96319038;    long fFiVcRbjDE43244289 = -810366548;    long fFiVcRbjDE47906170 = -997960695;    long fFiVcRbjDE33371541 = -462741688;    long fFiVcRbjDE527346 = -847167641;    long fFiVcRbjDE6187900 = -16210477;    long fFiVcRbjDE72195228 = -158730355;    long fFiVcRbjDE35590550 = -599374995;    long fFiVcRbjDE5447239 = -957465840;    long fFiVcRbjDE87568092 = -271222470;    long fFiVcRbjDE49798753 = -38149165;    long fFiVcRbjDE92770128 = -227767767;    long fFiVcRbjDE22296202 = -547375777;    long fFiVcRbjDE82506371 = -928745878;    long fFiVcRbjDE12627629 = -875313184;    long fFiVcRbjDE46106359 = -520214663;    long fFiVcRbjDE72690812 = -910993193;    long fFiVcRbjDE89321413 = -1975680;    long fFiVcRbjDE35214807 = -684340470;    long fFiVcRbjDE25500488 = -839404748;     fFiVcRbjDE91563152 = fFiVcRbjDE41197223;     fFiVcRbjDE41197223 = fFiVcRbjDE96109949;     fFiVcRbjDE96109949 = fFiVcRbjDE20764510;     fFiVcRbjDE20764510 = fFiVcRbjDE87721399;     fFiVcRbjDE87721399 = fFiVcRbjDE94128708;     fFiVcRbjDE94128708 = fFiVcRbjDE88746256;     fFiVcRbjDE88746256 = fFiVcRbjDE1462202;     fFiVcRbjDE1462202 = fFiVcRbjDE84818888;     fFiVcRbjDE84818888 = fFiVcRbjDE57859086;     fFiVcRbjDE57859086 = fFiVcRbjDE10430468;     fFiVcRbjDE10430468 = fFiVcRbjDE61481490;     fFiVcRbjDE61481490 = fFiVcRbjDE93060274;     fFiVcRbjDE93060274 = fFiVcRbjDE34976165;     fFiVcRbjDE34976165 = fFiVcRbjDE56407460;     fFiVcRbjDE56407460 = fFiVcRbjDE83166652;     fFiVcRbjDE83166652 = fFiVcRbjDE6879996;     fFiVcRbjDE6879996 = fFiVcRbjDE75833280;     fFiVcRbjDE75833280 = fFiVcRbjDE29968839;     fFiVcRbjDE29968839 = fFiVcRbjDE119099;     fFiVcRbjDE119099 = fFiVcRbjDE40879388;     fFiVcRbjDE40879388 = fFiVcRbjDE44970644;     fFiVcRbjDE44970644 = fFiVcRbjDE48252776;     fFiVcRbjDE48252776 = fFiVcRbjDE52563433;     fFiVcRbjDE52563433 = fFiVcRbjDE45641758;     fFiVcRbjDE45641758 = fFiVcRbjDE77395211;     fFiVcRbjDE77395211 = fFiVcRbjDE37204268;     fFiVcRbjDE37204268 = fFiVcRbjDE46882440;     fFiVcRbjDE46882440 = fFiVcRbjDE20708433;     fFiVcRbjDE20708433 = fFiVcRbjDE48166898;     fFiVcRbjDE48166898 = fFiVcRbjDE70721321;     fFiVcRbjDE70721321 = fFiVcRbjDE88558419;     fFiVcRbjDE88558419 = fFiVcRbjDE53191286;     fFiVcRbjDE53191286 = fFiVcRbjDE38629502;     fFiVcRbjDE38629502 = fFiVcRbjDE34160601;     fFiVcRbjDE34160601 = fFiVcRbjDE42743201;     fFiVcRbjDE42743201 = fFiVcRbjDE36316646;     fFiVcRbjDE36316646 = fFiVcRbjDE97418954;     fFiVcRbjDE97418954 = fFiVcRbjDE92832559;     fFiVcRbjDE92832559 = fFiVcRbjDE69552069;     fFiVcRbjDE69552069 = fFiVcRbjDE87970175;     fFiVcRbjDE87970175 = fFiVcRbjDE53444580;     fFiVcRbjDE53444580 = fFiVcRbjDE25973404;     fFiVcRbjDE25973404 = fFiVcRbjDE22352573;     fFiVcRbjDE22352573 = fFiVcRbjDE47372535;     fFiVcRbjDE47372535 = fFiVcRbjDE22889773;     fFiVcRbjDE22889773 = fFiVcRbjDE49266435;     fFiVcRbjDE49266435 = fFiVcRbjDE93959979;     fFiVcRbjDE93959979 = fFiVcRbjDE98976270;     fFiVcRbjDE98976270 = fFiVcRbjDE87336891;     fFiVcRbjDE87336891 = fFiVcRbjDE47639552;     fFiVcRbjDE47639552 = fFiVcRbjDE64533421;     fFiVcRbjDE64533421 = fFiVcRbjDE16363192;     fFiVcRbjDE16363192 = fFiVcRbjDE17600737;     fFiVcRbjDE17600737 = fFiVcRbjDE33182264;     fFiVcRbjDE33182264 = fFiVcRbjDE46592509;     fFiVcRbjDE46592509 = fFiVcRbjDE92944447;     fFiVcRbjDE92944447 = fFiVcRbjDE43546517;     fFiVcRbjDE43546517 = fFiVcRbjDE75122752;     fFiVcRbjDE75122752 = fFiVcRbjDE10326189;     fFiVcRbjDE10326189 = fFiVcRbjDE56924440;     fFiVcRbjDE56924440 = fFiVcRbjDE41863817;     fFiVcRbjDE41863817 = fFiVcRbjDE80753768;     fFiVcRbjDE80753768 = fFiVcRbjDE36651991;     fFiVcRbjDE36651991 = fFiVcRbjDE87137765;     fFiVcRbjDE87137765 = fFiVcRbjDE21872048;     fFiVcRbjDE21872048 = fFiVcRbjDE8290204;     fFiVcRbjDE8290204 = fFiVcRbjDE54430772;     fFiVcRbjDE54430772 = fFiVcRbjDE815565;     fFiVcRbjDE815565 = fFiVcRbjDE13664260;     fFiVcRbjDE13664260 = fFiVcRbjDE46850006;     fFiVcRbjDE46850006 = fFiVcRbjDE9461042;     fFiVcRbjDE9461042 = fFiVcRbjDE83000720;     fFiVcRbjDE83000720 = fFiVcRbjDE60416770;     fFiVcRbjDE60416770 = fFiVcRbjDE12148923;     fFiVcRbjDE12148923 = fFiVcRbjDE87434807;     fFiVcRbjDE87434807 = fFiVcRbjDE18997240;     fFiVcRbjDE18997240 = fFiVcRbjDE25900204;     fFiVcRbjDE25900204 = fFiVcRbjDE5190898;     fFiVcRbjDE5190898 = fFiVcRbjDE22751986;     fFiVcRbjDE22751986 = fFiVcRbjDE28128777;     fFiVcRbjDE28128777 = fFiVcRbjDE43244289;     fFiVcRbjDE43244289 = fFiVcRbjDE47906170;     fFiVcRbjDE47906170 = fFiVcRbjDE33371541;     fFiVcRbjDE33371541 = fFiVcRbjDE527346;     fFiVcRbjDE527346 = fFiVcRbjDE6187900;     fFiVcRbjDE6187900 = fFiVcRbjDE72195228;     fFiVcRbjDE72195228 = fFiVcRbjDE35590550;     fFiVcRbjDE35590550 = fFiVcRbjDE5447239;     fFiVcRbjDE5447239 = fFiVcRbjDE87568092;     fFiVcRbjDE87568092 = fFiVcRbjDE49798753;     fFiVcRbjDE49798753 = fFiVcRbjDE92770128;     fFiVcRbjDE92770128 = fFiVcRbjDE22296202;     fFiVcRbjDE22296202 = fFiVcRbjDE82506371;     fFiVcRbjDE82506371 = fFiVcRbjDE12627629;     fFiVcRbjDE12627629 = fFiVcRbjDE46106359;     fFiVcRbjDE46106359 = fFiVcRbjDE72690812;     fFiVcRbjDE72690812 = fFiVcRbjDE89321413;     fFiVcRbjDE89321413 = fFiVcRbjDE35214807;     fFiVcRbjDE35214807 = fFiVcRbjDE25500488;     fFiVcRbjDE25500488 = fFiVcRbjDE91563152;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void mWDagTtzan96422029() {     long SrQQuGquli60750492 = -926310608;    long SrQQuGquli48138160 = -709064827;    long SrQQuGquli96097634 = -366539740;    long SrQQuGquli1325923 = -297195266;    long SrQQuGquli16937929 = -156924806;    long SrQQuGquli15587024 = -71130344;    long SrQQuGquli9873724 = 84022181;    long SrQQuGquli5023308 = -321145108;    long SrQQuGquli24500899 = -415609593;    long SrQQuGquli21387752 = -381900840;    long SrQQuGquli76260784 = -919140975;    long SrQQuGquli41542651 = -804164582;    long SrQQuGquli8459086 = -681689088;    long SrQQuGquli17107008 = 58896953;    long SrQQuGquli34902154 = -552916144;    long SrQQuGquli57598571 = -434860854;    long SrQQuGquli20691773 = -237609373;    long SrQQuGquli47420342 = -690271423;    long SrQQuGquli31174447 = -794354862;    long SrQQuGquli64008639 = -243387123;    long SrQQuGquli61553692 = -452446419;    long SrQQuGquli15672041 = -642601470;    long SrQQuGquli60295223 = -608989669;    long SrQQuGquli64761492 = -443644674;    long SrQQuGquli43929784 = -354774993;    long SrQQuGquli53655583 = -55510738;    long SrQQuGquli41550595 = -65746543;    long SrQQuGquli3657422 = 55949426;    long SrQQuGquli79785953 = -813057408;    long SrQQuGquli7181234 = -124071821;    long SrQQuGquli45609466 = -768574634;    long SrQQuGquli62631833 = -151868225;    long SrQQuGquli65444681 = -388812547;    long SrQQuGquli3890515 = -409684648;    long SrQQuGquli55803851 = -401228830;    long SrQQuGquli32044136 = 58086778;    long SrQQuGquli51536027 = -284198695;    long SrQQuGquli96577889 = -196816032;    long SrQQuGquli7353643 = -775192884;    long SrQQuGquli94108047 = -843998470;    long SrQQuGquli95297553 = -907073924;    long SrQQuGquli82876188 = -976490019;    long SrQQuGquli77944409 = -4711265;    long SrQQuGquli90255506 = -858855208;    long SrQQuGquli62362705 = -962879634;    long SrQQuGquli82797006 = -709622230;    long SrQQuGquli31017224 = 3887811;    long SrQQuGquli18890453 = -527897690;    long SrQQuGquli66749357 = -962299593;    long SrQQuGquli82705743 = -244351340;    long SrQQuGquli8556580 = -782496869;    long SrQQuGquli38614170 = -675701397;    long SrQQuGquli98780481 = -538772968;    long SrQQuGquli21837486 = -497363445;    long SrQQuGquli34868337 = 88517720;    long SrQQuGquli45078452 = -183709139;    long SrQQuGquli87842936 = -75159;    long SrQQuGquli31336143 = -922895066;    long SrQQuGquli57396138 = -942420274;    long SrQQuGquli63282346 = -1414069;    long SrQQuGquli74036428 = 94616198;    long SrQQuGquli6216303 = -971927245;    long SrQQuGquli25237354 = -508087700;    long SrQQuGquli17319666 = -191537772;    long SrQQuGquli75778285 = -613326207;    long SrQQuGquli13628951 = -667272750;    long SrQQuGquli76097970 = -315352035;    long SrQQuGquli4568572 = -172004440;    long SrQQuGquli61303156 = -539874217;    long SrQQuGquli2858018 = -511002923;    long SrQQuGquli6062545 = -50662159;    long SrQQuGquli24113884 = 59206658;    long SrQQuGquli40066699 = -915078539;    long SrQQuGquli37066400 = -950356392;    long SrQQuGquli68711085 = -336313200;    long SrQQuGquli78677504 = -475956400;    long SrQQuGquli37727632 = -537890205;    long SrQQuGquli70039717 = -750134461;    long SrQQuGquli2398787 = -480765041;    long SrQQuGquli61132778 = -645152764;    long SrQQuGquli22638360 = 40601450;    long SrQQuGquli22660143 = -537848853;    long SrQQuGquli36908064 = 18249019;    long SrQQuGquli97080210 = -468706068;    long SrQQuGquli98624653 = -341574952;    long SrQQuGquli6995297 = 7126763;    long SrQQuGquli63851352 = -613095257;    long SrQQuGquli43607195 = -891449103;    long SrQQuGquli69022177 = -398202369;    long SrQQuGquli10725400 = -117519692;    long SrQQuGquli44201199 = -941838064;    long SrQQuGquli20199884 = -361303630;    long SrQQuGquli39181751 = -254395758;    long SrQQuGquli44071297 = -673778816;    long SrQQuGquli20071619 = -838614669;    long SrQQuGquli89081250 = -935146680;    long SrQQuGquli57638835 = -368402319;    long SrQQuGquli60624743 = -813173493;    long SrQQuGquli14477222 = -145529002;    long SrQQuGquli48733755 = -926310608;     SrQQuGquli60750492 = SrQQuGquli48138160;     SrQQuGquli48138160 = SrQQuGquli96097634;     SrQQuGquli96097634 = SrQQuGquli1325923;     SrQQuGquli1325923 = SrQQuGquli16937929;     SrQQuGquli16937929 = SrQQuGquli15587024;     SrQQuGquli15587024 = SrQQuGquli9873724;     SrQQuGquli9873724 = SrQQuGquli5023308;     SrQQuGquli5023308 = SrQQuGquli24500899;     SrQQuGquli24500899 = SrQQuGquli21387752;     SrQQuGquli21387752 = SrQQuGquli76260784;     SrQQuGquli76260784 = SrQQuGquli41542651;     SrQQuGquli41542651 = SrQQuGquli8459086;     SrQQuGquli8459086 = SrQQuGquli17107008;     SrQQuGquli17107008 = SrQQuGquli34902154;     SrQQuGquli34902154 = SrQQuGquli57598571;     SrQQuGquli57598571 = SrQQuGquli20691773;     SrQQuGquli20691773 = SrQQuGquli47420342;     SrQQuGquli47420342 = SrQQuGquli31174447;     SrQQuGquli31174447 = SrQQuGquli64008639;     SrQQuGquli64008639 = SrQQuGquli61553692;     SrQQuGquli61553692 = SrQQuGquli15672041;     SrQQuGquli15672041 = SrQQuGquli60295223;     SrQQuGquli60295223 = SrQQuGquli64761492;     SrQQuGquli64761492 = SrQQuGquli43929784;     SrQQuGquli43929784 = SrQQuGquli53655583;     SrQQuGquli53655583 = SrQQuGquli41550595;     SrQQuGquli41550595 = SrQQuGquli3657422;     SrQQuGquli3657422 = SrQQuGquli79785953;     SrQQuGquli79785953 = SrQQuGquli7181234;     SrQQuGquli7181234 = SrQQuGquli45609466;     SrQQuGquli45609466 = SrQQuGquli62631833;     SrQQuGquli62631833 = SrQQuGquli65444681;     SrQQuGquli65444681 = SrQQuGquli3890515;     SrQQuGquli3890515 = SrQQuGquli55803851;     SrQQuGquli55803851 = SrQQuGquli32044136;     SrQQuGquli32044136 = SrQQuGquli51536027;     SrQQuGquli51536027 = SrQQuGquli96577889;     SrQQuGquli96577889 = SrQQuGquli7353643;     SrQQuGquli7353643 = SrQQuGquli94108047;     SrQQuGquli94108047 = SrQQuGquli95297553;     SrQQuGquli95297553 = SrQQuGquli82876188;     SrQQuGquli82876188 = SrQQuGquli77944409;     SrQQuGquli77944409 = SrQQuGquli90255506;     SrQQuGquli90255506 = SrQQuGquli62362705;     SrQQuGquli62362705 = SrQQuGquli82797006;     SrQQuGquli82797006 = SrQQuGquli31017224;     SrQQuGquli31017224 = SrQQuGquli18890453;     SrQQuGquli18890453 = SrQQuGquli66749357;     SrQQuGquli66749357 = SrQQuGquli82705743;     SrQQuGquli82705743 = SrQQuGquli8556580;     SrQQuGquli8556580 = SrQQuGquli38614170;     SrQQuGquli38614170 = SrQQuGquli98780481;     SrQQuGquli98780481 = SrQQuGquli21837486;     SrQQuGquli21837486 = SrQQuGquli34868337;     SrQQuGquli34868337 = SrQQuGquli45078452;     SrQQuGquli45078452 = SrQQuGquli87842936;     SrQQuGquli87842936 = SrQQuGquli31336143;     SrQQuGquli31336143 = SrQQuGquli57396138;     SrQQuGquli57396138 = SrQQuGquli63282346;     SrQQuGquli63282346 = SrQQuGquli74036428;     SrQQuGquli74036428 = SrQQuGquli6216303;     SrQQuGquli6216303 = SrQQuGquli25237354;     SrQQuGquli25237354 = SrQQuGquli17319666;     SrQQuGquli17319666 = SrQQuGquli75778285;     SrQQuGquli75778285 = SrQQuGquli13628951;     SrQQuGquli13628951 = SrQQuGquli76097970;     SrQQuGquli76097970 = SrQQuGquli4568572;     SrQQuGquli4568572 = SrQQuGquli61303156;     SrQQuGquli61303156 = SrQQuGquli2858018;     SrQQuGquli2858018 = SrQQuGquli6062545;     SrQQuGquli6062545 = SrQQuGquli24113884;     SrQQuGquli24113884 = SrQQuGquli40066699;     SrQQuGquli40066699 = SrQQuGquli37066400;     SrQQuGquli37066400 = SrQQuGquli68711085;     SrQQuGquli68711085 = SrQQuGquli78677504;     SrQQuGquli78677504 = SrQQuGquli37727632;     SrQQuGquli37727632 = SrQQuGquli70039717;     SrQQuGquli70039717 = SrQQuGquli2398787;     SrQQuGquli2398787 = SrQQuGquli61132778;     SrQQuGquli61132778 = SrQQuGquli22638360;     SrQQuGquli22638360 = SrQQuGquli22660143;     SrQQuGquli22660143 = SrQQuGquli36908064;     SrQQuGquli36908064 = SrQQuGquli97080210;     SrQQuGquli97080210 = SrQQuGquli98624653;     SrQQuGquli98624653 = SrQQuGquli6995297;     SrQQuGquli6995297 = SrQQuGquli63851352;     SrQQuGquli63851352 = SrQQuGquli43607195;     SrQQuGquli43607195 = SrQQuGquli69022177;     SrQQuGquli69022177 = SrQQuGquli10725400;     SrQQuGquli10725400 = SrQQuGquli44201199;     SrQQuGquli44201199 = SrQQuGquli20199884;     SrQQuGquli20199884 = SrQQuGquli39181751;     SrQQuGquli39181751 = SrQQuGquli44071297;     SrQQuGquli44071297 = SrQQuGquli20071619;     SrQQuGquli20071619 = SrQQuGquli89081250;     SrQQuGquli89081250 = SrQQuGquli57638835;     SrQQuGquli57638835 = SrQQuGquli60624743;     SrQQuGquli60624743 = SrQQuGquli14477222;     SrQQuGquli14477222 = SrQQuGquli48733755;     SrQQuGquli48733755 = SrQQuGquli60750492;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void AeAUKUUlkl54662911() {     long MjuRjcOeiq99407620 = -83216646;    long MjuRjcOeiq73459881 = -896551155;    long MjuRjcOeiq37594008 = -695014507;    long MjuRjcOeiq4264519 = -119261699;    long MjuRjcOeiq44390949 = -818388938;    long MjuRjcOeiq53936055 = -627850865;    long MjuRjcOeiq33696236 = -520987454;    long MjuRjcOeiq6531134 = -975464483;    long MjuRjcOeiq54184666 = -415969006;    long MjuRjcOeiq63685261 = -638408029;    long MjuRjcOeiq91234213 = 65047810;    long MjuRjcOeiq21525507 = -861248967;    long MjuRjcOeiq56266328 = -379232638;    long MjuRjcOeiq19192836 = -464281993;    long MjuRjcOeiq12630281 = -217409404;    long MjuRjcOeiq4605003 = -125196395;    long MjuRjcOeiq26502473 = -175623900;    long MjuRjcOeiq62320021 = -828234161;    long MjuRjcOeiq51907867 = -658790015;    long MjuRjcOeiq40491041 = -391753111;    long MjuRjcOeiq74766713 = -579933580;    long MjuRjcOeiq56781453 = -644204380;    long MjuRjcOeiq31291078 = -114633366;    long MjuRjcOeiq33768693 = -249325401;    long MjuRjcOeiq71310628 = -324697209;    long MjuRjcOeiq5539897 = 35356137;    long MjuRjcOeiq37269658 = -780257325;    long MjuRjcOeiq2373197 = -555030528;    long MjuRjcOeiq27438820 = -179188942;    long MjuRjcOeiq56879955 = -147192687;    long MjuRjcOeiq41948527 = 82114000;    long MjuRjcOeiq80103593 = -646564118;    long MjuRjcOeiq17811073 = -454886167;    long MjuRjcOeiq27837325 = -206396583;    long MjuRjcOeiq46787929 = -990008570;    long MjuRjcOeiq46703961 = -358677867;    long MjuRjcOeiq57153516 = -896458728;    long MjuRjcOeiq69739878 = -160560966;    long MjuRjcOeiq30359652 = -483361451;    long MjuRjcOeiq46977539 = -643007306;    long MjuRjcOeiq47143071 = -748155362;    long MjuRjcOeiq27742514 = -222165123;    long MjuRjcOeiq10977815 = -798967849;    long MjuRjcOeiq1736005 = -834239568;    long MjuRjcOeiq86376773 = -919268435;    long MjuRjcOeiq87058374 = 11135696;    long MjuRjcOeiq37833444 = 65842843;    long MjuRjcOeiq130861 = -31072140;    long MjuRjcOeiq45993438 = -775996002;    long MjuRjcOeiq63961582 = -441381050;    long MjuRjcOeiq90594334 = -550355752;    long MjuRjcOeiq75506965 = -636613641;    long MjuRjcOeiq7160831 = -90805840;    long MjuRjcOeiq46441696 = -728254917;    long MjuRjcOeiq79896197 = -592358728;    long MjuRjcOeiq42626167 = -439012266;    long MjuRjcOeiq42168804 = -681917790;    long MjuRjcOeiq3825316 = -345689106;    long MjuRjcOeiq32953890 = -794564491;    long MjuRjcOeiq38851052 = -753745076;    long MjuRjcOeiq16666398 = -847593540;    long MjuRjcOeiq31323040 = -965956926;    long MjuRjcOeiq79092314 = -696275542;    long MjuRjcOeiq97304710 = -168776319;    long MjuRjcOeiq21736734 = -620522029;    long MjuRjcOeiq11130620 = -288388072;    long MjuRjcOeiq3714434 = -306362801;    long MjuRjcOeiq28429004 = -72836055;    long MjuRjcOeiq72404907 = -474273424;    long MjuRjcOeiq65926320 = -858731537;    long MjuRjcOeiq47451486 = -228737668;    long MjuRjcOeiq56762595 = 84937065;    long MjuRjcOeiq31960370 = -244872711;    long MjuRjcOeiq4930329 = 84217290;    long MjuRjcOeiq93347969 = -643597750;    long MjuRjcOeiq47024200 = -257768458;    long MjuRjcOeiq45803639 = -845236532;    long MjuRjcOeiq29555074 = -280393798;    long MjuRjcOeiq47391919 = -330056966;    long MjuRjcOeiq84252253 = -235832906;    long MjuRjcOeiq67706452 = 69513294;    long MjuRjcOeiq37138797 = -649185186;    long MjuRjcOeiq56379758 = -779034526;    long MjuRjcOeiq63477237 = -737807892;    long MjuRjcOeiq66285621 = -596836935;    long MjuRjcOeiq66441562 = -281272359;    long MjuRjcOeiq72942763 = -455758279;    long MjuRjcOeiq71369377 = -726631250;    long MjuRjcOeiq47941128 = -614037856;    long MjuRjcOeiq4161762 = -450996304;    long MjuRjcOeiq4535158 = -676760078;    long MjuRjcOeiq53328201 = -450769622;    long MjuRjcOeiq36785988 = -365996476;    long MjuRjcOeiq91508599 = -729616376;    long MjuRjcOeiq30311142 = -795413767;    long MjuRjcOeiq15820032 = -782198436;    long MjuRjcOeiq48650200 = -525889582;    long MjuRjcOeiq13673104 = -530191530;    long MjuRjcOeiq79999270 = -113717539;    long MjuRjcOeiq75246154 = -83216646;     MjuRjcOeiq99407620 = MjuRjcOeiq73459881;     MjuRjcOeiq73459881 = MjuRjcOeiq37594008;     MjuRjcOeiq37594008 = MjuRjcOeiq4264519;     MjuRjcOeiq4264519 = MjuRjcOeiq44390949;     MjuRjcOeiq44390949 = MjuRjcOeiq53936055;     MjuRjcOeiq53936055 = MjuRjcOeiq33696236;     MjuRjcOeiq33696236 = MjuRjcOeiq6531134;     MjuRjcOeiq6531134 = MjuRjcOeiq54184666;     MjuRjcOeiq54184666 = MjuRjcOeiq63685261;     MjuRjcOeiq63685261 = MjuRjcOeiq91234213;     MjuRjcOeiq91234213 = MjuRjcOeiq21525507;     MjuRjcOeiq21525507 = MjuRjcOeiq56266328;     MjuRjcOeiq56266328 = MjuRjcOeiq19192836;     MjuRjcOeiq19192836 = MjuRjcOeiq12630281;     MjuRjcOeiq12630281 = MjuRjcOeiq4605003;     MjuRjcOeiq4605003 = MjuRjcOeiq26502473;     MjuRjcOeiq26502473 = MjuRjcOeiq62320021;     MjuRjcOeiq62320021 = MjuRjcOeiq51907867;     MjuRjcOeiq51907867 = MjuRjcOeiq40491041;     MjuRjcOeiq40491041 = MjuRjcOeiq74766713;     MjuRjcOeiq74766713 = MjuRjcOeiq56781453;     MjuRjcOeiq56781453 = MjuRjcOeiq31291078;     MjuRjcOeiq31291078 = MjuRjcOeiq33768693;     MjuRjcOeiq33768693 = MjuRjcOeiq71310628;     MjuRjcOeiq71310628 = MjuRjcOeiq5539897;     MjuRjcOeiq5539897 = MjuRjcOeiq37269658;     MjuRjcOeiq37269658 = MjuRjcOeiq2373197;     MjuRjcOeiq2373197 = MjuRjcOeiq27438820;     MjuRjcOeiq27438820 = MjuRjcOeiq56879955;     MjuRjcOeiq56879955 = MjuRjcOeiq41948527;     MjuRjcOeiq41948527 = MjuRjcOeiq80103593;     MjuRjcOeiq80103593 = MjuRjcOeiq17811073;     MjuRjcOeiq17811073 = MjuRjcOeiq27837325;     MjuRjcOeiq27837325 = MjuRjcOeiq46787929;     MjuRjcOeiq46787929 = MjuRjcOeiq46703961;     MjuRjcOeiq46703961 = MjuRjcOeiq57153516;     MjuRjcOeiq57153516 = MjuRjcOeiq69739878;     MjuRjcOeiq69739878 = MjuRjcOeiq30359652;     MjuRjcOeiq30359652 = MjuRjcOeiq46977539;     MjuRjcOeiq46977539 = MjuRjcOeiq47143071;     MjuRjcOeiq47143071 = MjuRjcOeiq27742514;     MjuRjcOeiq27742514 = MjuRjcOeiq10977815;     MjuRjcOeiq10977815 = MjuRjcOeiq1736005;     MjuRjcOeiq1736005 = MjuRjcOeiq86376773;     MjuRjcOeiq86376773 = MjuRjcOeiq87058374;     MjuRjcOeiq87058374 = MjuRjcOeiq37833444;     MjuRjcOeiq37833444 = MjuRjcOeiq130861;     MjuRjcOeiq130861 = MjuRjcOeiq45993438;     MjuRjcOeiq45993438 = MjuRjcOeiq63961582;     MjuRjcOeiq63961582 = MjuRjcOeiq90594334;     MjuRjcOeiq90594334 = MjuRjcOeiq75506965;     MjuRjcOeiq75506965 = MjuRjcOeiq7160831;     MjuRjcOeiq7160831 = MjuRjcOeiq46441696;     MjuRjcOeiq46441696 = MjuRjcOeiq79896197;     MjuRjcOeiq79896197 = MjuRjcOeiq42626167;     MjuRjcOeiq42626167 = MjuRjcOeiq42168804;     MjuRjcOeiq42168804 = MjuRjcOeiq3825316;     MjuRjcOeiq3825316 = MjuRjcOeiq32953890;     MjuRjcOeiq32953890 = MjuRjcOeiq38851052;     MjuRjcOeiq38851052 = MjuRjcOeiq16666398;     MjuRjcOeiq16666398 = MjuRjcOeiq31323040;     MjuRjcOeiq31323040 = MjuRjcOeiq79092314;     MjuRjcOeiq79092314 = MjuRjcOeiq97304710;     MjuRjcOeiq97304710 = MjuRjcOeiq21736734;     MjuRjcOeiq21736734 = MjuRjcOeiq11130620;     MjuRjcOeiq11130620 = MjuRjcOeiq3714434;     MjuRjcOeiq3714434 = MjuRjcOeiq28429004;     MjuRjcOeiq28429004 = MjuRjcOeiq72404907;     MjuRjcOeiq72404907 = MjuRjcOeiq65926320;     MjuRjcOeiq65926320 = MjuRjcOeiq47451486;     MjuRjcOeiq47451486 = MjuRjcOeiq56762595;     MjuRjcOeiq56762595 = MjuRjcOeiq31960370;     MjuRjcOeiq31960370 = MjuRjcOeiq4930329;     MjuRjcOeiq4930329 = MjuRjcOeiq93347969;     MjuRjcOeiq93347969 = MjuRjcOeiq47024200;     MjuRjcOeiq47024200 = MjuRjcOeiq45803639;     MjuRjcOeiq45803639 = MjuRjcOeiq29555074;     MjuRjcOeiq29555074 = MjuRjcOeiq47391919;     MjuRjcOeiq47391919 = MjuRjcOeiq84252253;     MjuRjcOeiq84252253 = MjuRjcOeiq67706452;     MjuRjcOeiq67706452 = MjuRjcOeiq37138797;     MjuRjcOeiq37138797 = MjuRjcOeiq56379758;     MjuRjcOeiq56379758 = MjuRjcOeiq63477237;     MjuRjcOeiq63477237 = MjuRjcOeiq66285621;     MjuRjcOeiq66285621 = MjuRjcOeiq66441562;     MjuRjcOeiq66441562 = MjuRjcOeiq72942763;     MjuRjcOeiq72942763 = MjuRjcOeiq71369377;     MjuRjcOeiq71369377 = MjuRjcOeiq47941128;     MjuRjcOeiq47941128 = MjuRjcOeiq4161762;     MjuRjcOeiq4161762 = MjuRjcOeiq4535158;     MjuRjcOeiq4535158 = MjuRjcOeiq53328201;     MjuRjcOeiq53328201 = MjuRjcOeiq36785988;     MjuRjcOeiq36785988 = MjuRjcOeiq91508599;     MjuRjcOeiq91508599 = MjuRjcOeiq30311142;     MjuRjcOeiq30311142 = MjuRjcOeiq15820032;     MjuRjcOeiq15820032 = MjuRjcOeiq48650200;     MjuRjcOeiq48650200 = MjuRjcOeiq13673104;     MjuRjcOeiq13673104 = MjuRjcOeiq79999270;     MjuRjcOeiq79999270 = MjuRjcOeiq75246154;     MjuRjcOeiq75246154 = MjuRjcOeiq99407620;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void oGDcTwfKwc12573595() {     long CjhCVzIFBf92725617 = -905126126;    long CjhCVzIFBf7206906 = -521007173;    long CjhCVzIFBf38509816 = -351745273;    long CjhCVzIFBf93558194 = -126889713;    long CjhCVzIFBf37455537 = -683932987;    long CjhCVzIFBf71654051 = -514289410;    long CjhCVzIFBf10072116 = -623353294;    long CjhCVzIFBf68000013 = -226174774;    long CjhCVzIFBf88902679 = -749535719;    long CjhCVzIFBf91975243 = -436909616;    long CjhCVzIFBf64498331 = -716647905;    long CjhCVzIFBf49981398 = -269279078;    long CjhCVzIFBf36037972 = -958658019;    long CjhCVzIFBf60400874 = -254411466;    long CjhCVzIFBf75410372 = -926311443;    long CjhCVzIFBf66814422 = -212895851;    long CjhCVzIFBf76292177 = -767623686;    long CjhCVzIFBf21815756 = -632689745;    long CjhCVzIFBf53433618 = -191054450;    long CjhCVzIFBf62534235 = -273460794;    long CjhCVzIFBf42484698 = -465037519;    long CjhCVzIFBf70847189 = -302259515;    long CjhCVzIFBf1878368 = -848062642;    long CjhCVzIFBf60554153 = -973126421;    long CjhCVzIFBf66001398 = -240839024;    long CjhCVzIFBf82091080 = 30720157;    long CjhCVzIFBf64757063 = -648812674;    long CjhCVzIFBf18934447 = -565095353;    long CjhCVzIFBf2310917 = -379495036;    long CjhCVzIFBf24924217 = -785640147;    long CjhCVzIFBf56580438 = -328976657;    long CjhCVzIFBf43843106 = -60934779;    long CjhCVzIFBf52380919 = -875533184;    long CjhCVzIFBf46157191 = -906547595;    long CjhCVzIFBf89918124 = -437337644;    long CjhCVzIFBf5862139 = -943672363;    long CjhCVzIFBf25534126 = -159492004;    long CjhCVzIFBf85961427 = -2972242;    long CjhCVzIFBf68821713 = -960797203;    long CjhCVzIFBf51960532 = -490893055;    long CjhCVzIFBf67092322 = -613843060;    long CjhCVzIFBf23585837 = -981580231;    long CjhCVzIFBf74728043 = -874599496;    long CjhCVzIFBf62979003 = -726339150;    long CjhCVzIFBf86356852 = -534915432;    long CjhCVzIFBf6225377 = -624851322;    long CjhCVzIFBf33425584 = -517978886;    long CjhCVzIFBf29414997 = -3137605;    long CjhCVzIFBf48921897 = -925658738;    long CjhCVzIFBf70013660 = -191405168;    long CjhCVzIFBf34486259 = -396875129;    long CjhCVzIFBf87234652 = -730446120;    long CjhCVzIFBf71820834 = -590700162;    long CjhCVzIFBf18211393 = -323113023;    long CjhCVzIFBf70088897 = -812244579;    long CjhCVzIFBf21878428 = -502866611;    long CjhCVzIFBf5328539 = -672944531;    long CjhCVzIFBf77955662 = -378618852;    long CjhCVzIFBf27556797 = -886050690;    long CjhCVzIFBf55364457 = -614653144;    long CjhCVzIFBf6896989 = -865476736;    long CjhCVzIFBf91137669 = 41742059;    long CjhCVzIFBf65689097 = -846679738;    long CjhCVzIFBf63978462 = -963895572;    long CjhCVzIFBf35394805 = -7932959;    long CjhCVzIFBf20655226 = -555713127;    long CjhCVzIFBf97600479 = -393745894;    long CjhCVzIFBf89880781 = 47889576;    long CjhCVzIFBf70482749 = -817073822;    long CjhCVzIFBf69548234 = -982639081;    long CjhCVzIFBf41280296 = 46596153;    long CjhCVzIFBf90330750 = -664651444;    long CjhCVzIFBf52994042 = -671892543;    long CjhCVzIFBf1473087 = -700161395;    long CjhCVzIFBf95441912 = -659617735;    long CjhCVzIFBf18898862 = -483457288;    long CjhCVzIFBf96119146 = -427660020;    long CjhCVzIFBf38899364 = -21723492;    long CjhCVzIFBf74197301 = -338210989;    long CjhCVzIFBf59776021 = -615987702;    long CjhCVzIFBf48665497 = -451300957;    long CjhCVzIFBf35342066 = -545675069;    long CjhCVzIFBf70012549 = -639436616;    long CjhCVzIFBf32297256 = -88089868;    long CjhCVzIFBf90437957 = -288765018;    long CjhCVzIFBf69345786 = -598530538;    long CjhCVzIFBf72022272 = -470234617;    long CjhCVzIFBf34169526 = -452420162;    long CjhCVzIFBf76068294 = 5696984;    long CjhCVzIFBf68039697 = -934471033;    long CjhCVzIFBf533601 = -170727832;    long CjhCVzIFBf47578463 = -780873152;    long CjhCVzIFBf58404630 = -116921553;    long CjhCVzIFBf13457257 = -246144059;    long CjhCVzIFBf45063544 = -625416319;    long CjhCVzIFBf75954653 = -555585119;    long CjhCVzIFBf57896740 = -34900494;    long CjhCVzIFBf10749581 = -910703924;    long CjhCVzIFBf27584199 = -618406192;    long CjhCVzIFBf65701627 = -905126126;     CjhCVzIFBf92725617 = CjhCVzIFBf7206906;     CjhCVzIFBf7206906 = CjhCVzIFBf38509816;     CjhCVzIFBf38509816 = CjhCVzIFBf93558194;     CjhCVzIFBf93558194 = CjhCVzIFBf37455537;     CjhCVzIFBf37455537 = CjhCVzIFBf71654051;     CjhCVzIFBf71654051 = CjhCVzIFBf10072116;     CjhCVzIFBf10072116 = CjhCVzIFBf68000013;     CjhCVzIFBf68000013 = CjhCVzIFBf88902679;     CjhCVzIFBf88902679 = CjhCVzIFBf91975243;     CjhCVzIFBf91975243 = CjhCVzIFBf64498331;     CjhCVzIFBf64498331 = CjhCVzIFBf49981398;     CjhCVzIFBf49981398 = CjhCVzIFBf36037972;     CjhCVzIFBf36037972 = CjhCVzIFBf60400874;     CjhCVzIFBf60400874 = CjhCVzIFBf75410372;     CjhCVzIFBf75410372 = CjhCVzIFBf66814422;     CjhCVzIFBf66814422 = CjhCVzIFBf76292177;     CjhCVzIFBf76292177 = CjhCVzIFBf21815756;     CjhCVzIFBf21815756 = CjhCVzIFBf53433618;     CjhCVzIFBf53433618 = CjhCVzIFBf62534235;     CjhCVzIFBf62534235 = CjhCVzIFBf42484698;     CjhCVzIFBf42484698 = CjhCVzIFBf70847189;     CjhCVzIFBf70847189 = CjhCVzIFBf1878368;     CjhCVzIFBf1878368 = CjhCVzIFBf60554153;     CjhCVzIFBf60554153 = CjhCVzIFBf66001398;     CjhCVzIFBf66001398 = CjhCVzIFBf82091080;     CjhCVzIFBf82091080 = CjhCVzIFBf64757063;     CjhCVzIFBf64757063 = CjhCVzIFBf18934447;     CjhCVzIFBf18934447 = CjhCVzIFBf2310917;     CjhCVzIFBf2310917 = CjhCVzIFBf24924217;     CjhCVzIFBf24924217 = CjhCVzIFBf56580438;     CjhCVzIFBf56580438 = CjhCVzIFBf43843106;     CjhCVzIFBf43843106 = CjhCVzIFBf52380919;     CjhCVzIFBf52380919 = CjhCVzIFBf46157191;     CjhCVzIFBf46157191 = CjhCVzIFBf89918124;     CjhCVzIFBf89918124 = CjhCVzIFBf5862139;     CjhCVzIFBf5862139 = CjhCVzIFBf25534126;     CjhCVzIFBf25534126 = CjhCVzIFBf85961427;     CjhCVzIFBf85961427 = CjhCVzIFBf68821713;     CjhCVzIFBf68821713 = CjhCVzIFBf51960532;     CjhCVzIFBf51960532 = CjhCVzIFBf67092322;     CjhCVzIFBf67092322 = CjhCVzIFBf23585837;     CjhCVzIFBf23585837 = CjhCVzIFBf74728043;     CjhCVzIFBf74728043 = CjhCVzIFBf62979003;     CjhCVzIFBf62979003 = CjhCVzIFBf86356852;     CjhCVzIFBf86356852 = CjhCVzIFBf6225377;     CjhCVzIFBf6225377 = CjhCVzIFBf33425584;     CjhCVzIFBf33425584 = CjhCVzIFBf29414997;     CjhCVzIFBf29414997 = CjhCVzIFBf48921897;     CjhCVzIFBf48921897 = CjhCVzIFBf70013660;     CjhCVzIFBf70013660 = CjhCVzIFBf34486259;     CjhCVzIFBf34486259 = CjhCVzIFBf87234652;     CjhCVzIFBf87234652 = CjhCVzIFBf71820834;     CjhCVzIFBf71820834 = CjhCVzIFBf18211393;     CjhCVzIFBf18211393 = CjhCVzIFBf70088897;     CjhCVzIFBf70088897 = CjhCVzIFBf21878428;     CjhCVzIFBf21878428 = CjhCVzIFBf5328539;     CjhCVzIFBf5328539 = CjhCVzIFBf77955662;     CjhCVzIFBf77955662 = CjhCVzIFBf27556797;     CjhCVzIFBf27556797 = CjhCVzIFBf55364457;     CjhCVzIFBf55364457 = CjhCVzIFBf6896989;     CjhCVzIFBf6896989 = CjhCVzIFBf91137669;     CjhCVzIFBf91137669 = CjhCVzIFBf65689097;     CjhCVzIFBf65689097 = CjhCVzIFBf63978462;     CjhCVzIFBf63978462 = CjhCVzIFBf35394805;     CjhCVzIFBf35394805 = CjhCVzIFBf20655226;     CjhCVzIFBf20655226 = CjhCVzIFBf97600479;     CjhCVzIFBf97600479 = CjhCVzIFBf89880781;     CjhCVzIFBf89880781 = CjhCVzIFBf70482749;     CjhCVzIFBf70482749 = CjhCVzIFBf69548234;     CjhCVzIFBf69548234 = CjhCVzIFBf41280296;     CjhCVzIFBf41280296 = CjhCVzIFBf90330750;     CjhCVzIFBf90330750 = CjhCVzIFBf52994042;     CjhCVzIFBf52994042 = CjhCVzIFBf1473087;     CjhCVzIFBf1473087 = CjhCVzIFBf95441912;     CjhCVzIFBf95441912 = CjhCVzIFBf18898862;     CjhCVzIFBf18898862 = CjhCVzIFBf96119146;     CjhCVzIFBf96119146 = CjhCVzIFBf38899364;     CjhCVzIFBf38899364 = CjhCVzIFBf74197301;     CjhCVzIFBf74197301 = CjhCVzIFBf59776021;     CjhCVzIFBf59776021 = CjhCVzIFBf48665497;     CjhCVzIFBf48665497 = CjhCVzIFBf35342066;     CjhCVzIFBf35342066 = CjhCVzIFBf70012549;     CjhCVzIFBf70012549 = CjhCVzIFBf32297256;     CjhCVzIFBf32297256 = CjhCVzIFBf90437957;     CjhCVzIFBf90437957 = CjhCVzIFBf69345786;     CjhCVzIFBf69345786 = CjhCVzIFBf72022272;     CjhCVzIFBf72022272 = CjhCVzIFBf34169526;     CjhCVzIFBf34169526 = CjhCVzIFBf76068294;     CjhCVzIFBf76068294 = CjhCVzIFBf68039697;     CjhCVzIFBf68039697 = CjhCVzIFBf533601;     CjhCVzIFBf533601 = CjhCVzIFBf47578463;     CjhCVzIFBf47578463 = CjhCVzIFBf58404630;     CjhCVzIFBf58404630 = CjhCVzIFBf13457257;     CjhCVzIFBf13457257 = CjhCVzIFBf45063544;     CjhCVzIFBf45063544 = CjhCVzIFBf75954653;     CjhCVzIFBf75954653 = CjhCVzIFBf57896740;     CjhCVzIFBf57896740 = CjhCVzIFBf10749581;     CjhCVzIFBf10749581 = CjhCVzIFBf27584199;     CjhCVzIFBf27584199 = CjhCVzIFBf65701627;     CjhCVzIFBf65701627 = CjhCVzIFBf92725617;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ZRBDlBInlw48888372() {     long LjVviOkhCI69773603 = -4533531;    long LjVviOkhCI99979708 = 93480084;    long LjVviOkhCI26698529 = 80344883;    long LjVviOkhCI94919964 = -318858826;    long LjVviOkhCI1241360 = -479069906;    long LjVviOkhCI65906133 = -804615812;    long LjVviOkhCI54781222 = 57303194;    long LjVviOkhCI3594925 = -393162333;    long LjVviOkhCI91100056 = -966939058;    long LjVviOkhCI69731299 = -821645347;    long LjVviOkhCI60330881 = -279156806;    long LjVviOkhCI54357383 = -970970098;    long LjVviOkhCI35010554 = -259257168;    long LjVviOkhCI42137837 = -49070749;    long LjVviOkhCI97197614 = -498197936;    long LjVviOkhCI26273323 = -991927307;    long LjVviOkhCI70094533 = -598888764;    long LjVviOkhCI72388225 = -750925282;    long LjVviOkhCI75507580 = 6014144;    long LjVviOkhCI86611311 = -259436943;    long LjVviOkhCI97872769 = -214141605;    long LjVviOkhCI7618732 = -463478053;    long LjVviOkhCI4763126 = -51928813;    long LjVviOkhCI44832201 = -255239573;    long LjVviOkhCI68851571 = -908617747;    long LjVviOkhCI95060945 = -508676924;    long LjVviOkhCI43614826 = -660443733;    long LjVviOkhCI42691372 = -852634679;    long LjVviOkhCI36422707 = -457926715;    long LjVviOkhCI52426935 = -221262608;    long LjVviOkhCI19164094 = -572072100;    long LjVviOkhCI47652050 = -732680900;    long LjVviOkhCI15623043 = -659450078;    long LjVviOkhCI99918933 = 65886478;    long LjVviOkhCI18293608 = -459643402;    long LjVviOkhCI92053360 = -327297590;    long LjVviOkhCI81736958 = -743213197;    long LjVviOkhCI82647087 = -849264056;    long LjVviOkhCI32585897 = 68889580;    long LjVviOkhCI24259749 = -675993998;    long LjVviOkhCI63953426 = -41626986;    long LjVviOkhCI63071225 = -53228927;    long LjVviOkhCI10995058 = -43505143;    long LjVviOkhCI12185624 = -640418022;    long LjVviOkhCI30306131 = -3317106;    long LjVviOkhCI29231293 = 36174638;    long LjVviOkhCI34498900 = -642165901;    long LjVviOkhCI22057400 = -228563612;    long LjVviOkhCI67066179 = -111341764;    long LjVviOkhCI91893645 = -986419835;    long LjVviOkhCI5209646 = -830611901;    long LjVviOkhCI35920802 = -194185636;    long LjVviOkhCI6414892 = -110472841;    long LjVviOkhCI25663425 = 37239535;    long LjVviOkhCI51015603 = -491958098;    long LjVviOkhCI62154872 = -541055479;    long LjVviOkhCI95216583 = -854591104;    long LjVviOkhCI81866328 = -664415545;    long LjVviOkhCI26068393 = -410241079;    long LjVviOkhCI6180415 = -970392983;    long LjVviOkhCI22291308 = -44172080;    long LjVviOkhCI12089851 = -90062127;    long LjVviOkhCI67172217 = -935235618;    long LjVviOkhCI38673122 = -645676451;    long LjVviOkhCI50567206 = -149573247;    long LjVviOkhCI12678831 = -546475906;    long LjVviOkhCI38734341 = -211520021;    long LjVviOkhCI35091620 = -225143647;    long LjVviOkhCI23844229 = -589427348;    long LjVviOkhCI5144255 = -70900347;    long LjVviOkhCI44536364 = -148714110;    long LjVviOkhCI87447446 = -749624709;    long LjVviOkhCI39802329 = -719814862;    long LjVviOkhCI51247831 = -317991859;    long LjVviOkhCI22657885 = -117809958;    long LjVviOkhCI34801544 = -60912678;    long LjVviOkhCI96623673 = -319972910;    long LjVviOkhCI92577501 = -411510792;    long LjVviOkhCI14526071 = -151922467;    long LjVviOkhCI39620279 = -844792386;    long LjVviOkhCI60562045 = -866511023;    long LjVviOkhCI21557426 = -331880121;    long LjVviOkhCI75625192 = -641292916;    long LjVviOkhCI44529061 = -471506881;    long LjVviOkhCI47217290 = -390650708;    long LjVviOkhCI83243291 = -277886465;    long LjVviOkhCI41237158 = -522208059;    long LjVviOkhCI89959618 = -596689613;    long LjVviOkhCI48903330 = -442155425;    long LjVviOkhCI56138735 = -918587923;    long LjVviOkhCI96836776 = -472706487;    long LjVviOkhCI99870630 = 21202347;    long LjVviOkhCI56578694 = -339022978;    long LjVviOkhCI26405482 = 39282562;    long LjVviOkhCI1968442 = -531821918;    long LjVviOkhCI51863576 = -951564859;    long LjVviOkhCI95899007 = -117993309;    long LjVviOkhCI72321936 = -397828693;    long LjVviOkhCI61618417 = -390844775;    long LjVviOkhCI17627300 = -4533531;     LjVviOkhCI69773603 = LjVviOkhCI99979708;     LjVviOkhCI99979708 = LjVviOkhCI26698529;     LjVviOkhCI26698529 = LjVviOkhCI94919964;     LjVviOkhCI94919964 = LjVviOkhCI1241360;     LjVviOkhCI1241360 = LjVviOkhCI65906133;     LjVviOkhCI65906133 = LjVviOkhCI54781222;     LjVviOkhCI54781222 = LjVviOkhCI3594925;     LjVviOkhCI3594925 = LjVviOkhCI91100056;     LjVviOkhCI91100056 = LjVviOkhCI69731299;     LjVviOkhCI69731299 = LjVviOkhCI60330881;     LjVviOkhCI60330881 = LjVviOkhCI54357383;     LjVviOkhCI54357383 = LjVviOkhCI35010554;     LjVviOkhCI35010554 = LjVviOkhCI42137837;     LjVviOkhCI42137837 = LjVviOkhCI97197614;     LjVviOkhCI97197614 = LjVviOkhCI26273323;     LjVviOkhCI26273323 = LjVviOkhCI70094533;     LjVviOkhCI70094533 = LjVviOkhCI72388225;     LjVviOkhCI72388225 = LjVviOkhCI75507580;     LjVviOkhCI75507580 = LjVviOkhCI86611311;     LjVviOkhCI86611311 = LjVviOkhCI97872769;     LjVviOkhCI97872769 = LjVviOkhCI7618732;     LjVviOkhCI7618732 = LjVviOkhCI4763126;     LjVviOkhCI4763126 = LjVviOkhCI44832201;     LjVviOkhCI44832201 = LjVviOkhCI68851571;     LjVviOkhCI68851571 = LjVviOkhCI95060945;     LjVviOkhCI95060945 = LjVviOkhCI43614826;     LjVviOkhCI43614826 = LjVviOkhCI42691372;     LjVviOkhCI42691372 = LjVviOkhCI36422707;     LjVviOkhCI36422707 = LjVviOkhCI52426935;     LjVviOkhCI52426935 = LjVviOkhCI19164094;     LjVviOkhCI19164094 = LjVviOkhCI47652050;     LjVviOkhCI47652050 = LjVviOkhCI15623043;     LjVviOkhCI15623043 = LjVviOkhCI99918933;     LjVviOkhCI99918933 = LjVviOkhCI18293608;     LjVviOkhCI18293608 = LjVviOkhCI92053360;     LjVviOkhCI92053360 = LjVviOkhCI81736958;     LjVviOkhCI81736958 = LjVviOkhCI82647087;     LjVviOkhCI82647087 = LjVviOkhCI32585897;     LjVviOkhCI32585897 = LjVviOkhCI24259749;     LjVviOkhCI24259749 = LjVviOkhCI63953426;     LjVviOkhCI63953426 = LjVviOkhCI63071225;     LjVviOkhCI63071225 = LjVviOkhCI10995058;     LjVviOkhCI10995058 = LjVviOkhCI12185624;     LjVviOkhCI12185624 = LjVviOkhCI30306131;     LjVviOkhCI30306131 = LjVviOkhCI29231293;     LjVviOkhCI29231293 = LjVviOkhCI34498900;     LjVviOkhCI34498900 = LjVviOkhCI22057400;     LjVviOkhCI22057400 = LjVviOkhCI67066179;     LjVviOkhCI67066179 = LjVviOkhCI91893645;     LjVviOkhCI91893645 = LjVviOkhCI5209646;     LjVviOkhCI5209646 = LjVviOkhCI35920802;     LjVviOkhCI35920802 = LjVviOkhCI6414892;     LjVviOkhCI6414892 = LjVviOkhCI25663425;     LjVviOkhCI25663425 = LjVviOkhCI51015603;     LjVviOkhCI51015603 = LjVviOkhCI62154872;     LjVviOkhCI62154872 = LjVviOkhCI95216583;     LjVviOkhCI95216583 = LjVviOkhCI81866328;     LjVviOkhCI81866328 = LjVviOkhCI26068393;     LjVviOkhCI26068393 = LjVviOkhCI6180415;     LjVviOkhCI6180415 = LjVviOkhCI22291308;     LjVviOkhCI22291308 = LjVviOkhCI12089851;     LjVviOkhCI12089851 = LjVviOkhCI67172217;     LjVviOkhCI67172217 = LjVviOkhCI38673122;     LjVviOkhCI38673122 = LjVviOkhCI50567206;     LjVviOkhCI50567206 = LjVviOkhCI12678831;     LjVviOkhCI12678831 = LjVviOkhCI38734341;     LjVviOkhCI38734341 = LjVviOkhCI35091620;     LjVviOkhCI35091620 = LjVviOkhCI23844229;     LjVviOkhCI23844229 = LjVviOkhCI5144255;     LjVviOkhCI5144255 = LjVviOkhCI44536364;     LjVviOkhCI44536364 = LjVviOkhCI87447446;     LjVviOkhCI87447446 = LjVviOkhCI39802329;     LjVviOkhCI39802329 = LjVviOkhCI51247831;     LjVviOkhCI51247831 = LjVviOkhCI22657885;     LjVviOkhCI22657885 = LjVviOkhCI34801544;     LjVviOkhCI34801544 = LjVviOkhCI96623673;     LjVviOkhCI96623673 = LjVviOkhCI92577501;     LjVviOkhCI92577501 = LjVviOkhCI14526071;     LjVviOkhCI14526071 = LjVviOkhCI39620279;     LjVviOkhCI39620279 = LjVviOkhCI60562045;     LjVviOkhCI60562045 = LjVviOkhCI21557426;     LjVviOkhCI21557426 = LjVviOkhCI75625192;     LjVviOkhCI75625192 = LjVviOkhCI44529061;     LjVviOkhCI44529061 = LjVviOkhCI47217290;     LjVviOkhCI47217290 = LjVviOkhCI83243291;     LjVviOkhCI83243291 = LjVviOkhCI41237158;     LjVviOkhCI41237158 = LjVviOkhCI89959618;     LjVviOkhCI89959618 = LjVviOkhCI48903330;     LjVviOkhCI48903330 = LjVviOkhCI56138735;     LjVviOkhCI56138735 = LjVviOkhCI96836776;     LjVviOkhCI96836776 = LjVviOkhCI99870630;     LjVviOkhCI99870630 = LjVviOkhCI56578694;     LjVviOkhCI56578694 = LjVviOkhCI26405482;     LjVviOkhCI26405482 = LjVviOkhCI1968442;     LjVviOkhCI1968442 = LjVviOkhCI51863576;     LjVviOkhCI51863576 = LjVviOkhCI95899007;     LjVviOkhCI95899007 = LjVviOkhCI72321936;     LjVviOkhCI72321936 = LjVviOkhCI61618417;     LjVviOkhCI61618417 = LjVviOkhCI17627300;     LjVviOkhCI17627300 = LjVviOkhCI69773603;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ejfuyrlISt8216095() {     float KbWusZOPYj79085634 = -393326628;    float KbWusZOPYj24688790 = 55648018;    float KbWusZOPYj97507215 = -161860037;    float KbWusZOPYj45249916 = -970793233;    float KbWusZOPYj45724650 = -689762724;    float KbWusZOPYj76852211 = -113201078;    float KbWusZOPYj12708962 = -144213917;    float KbWusZOPYj27338107 = -442210140;    float KbWusZOPYj25278796 = -653822765;    float KbWusZOPYj36675513 = 89155549;    float KbWusZOPYj7393168 = -450133914;    float KbWusZOPYj72740971 = -376079094;    float KbWusZOPYj46718726 = -405508540;    float KbWusZOPYj51148588 = -200701380;    float KbWusZOPYj35059707 = -331084773;    float KbWusZOPYj18526121 = -635848610;    float KbWusZOPYj41831681 = -536281136;    float KbWusZOPYj46081133 = -129518405;    float KbWusZOPYj17734648 = -256617819;    float KbWusZOPYj85843540 = -644157010;    float KbWusZOPYj26386833 = -395074720;    float KbWusZOPYj20975776 = 8629673;    float KbWusZOPYj59263590 = -445936734;    float KbWusZOPYj25863885 = -812860944;    float KbWusZOPYj96135458 = -891097725;    float KbWusZOPYj19255802 = -561991529;    float KbWusZOPYj62483884 = -519732434;    float KbWusZOPYj31487610 = -564254906;    float KbWusZOPYj9878838 = -345381309;    float KbWusZOPYj53252818 = -965062858;    float KbWusZOPYj5868812 = -376270535;    float KbWusZOPYj17273343 = -259763076;    float KbWusZOPYj8208585 = -21513198;    float KbWusZOPYj89089300 = 93985725;    float KbWusZOPYj46122902 = -765712958;    float KbWusZOPYj45292349 = -233405910;    float KbWusZOPYj75175250 = -944239749;    float KbWusZOPYj73642725 = -599490758;    float KbWusZOPYj16468396 = -888666915;    float KbWusZOPYj86296092 = -737895353;    float KbWusZOPYj81944394 = -772755353;    float KbWusZOPYj43571711 = -71397059;    float KbWusZOPYj12853744 = -544950652;    float KbWusZOPYj50558473 = -909295131;    float KbWusZOPYj8265232 = -581722601;    float KbWusZOPYj19684512 = -745382256;    float KbWusZOPYj53597428 = -455640357;    float KbWusZOPYj81220227 = -429487678;    float KbWusZOPYj92422517 = -678920211;    float KbWusZOPYj71554259 = -572945980;    float KbWusZOPYj48807039 = -355765401;    float KbWusZOPYj7411473 = -483244728;    float KbWusZOPYj82146724 = -194276752;    float KbWusZOPYj35369804 = -38573508;    float KbWusZOPYj81829262 = -305325821;    float KbWusZOPYj58109858 = -301956302;    float KbWusZOPYj65425199 = -498415248;    float KbWusZOPYj71643331 = -348999094;    float KbWusZOPYj49114458 = 20304491;    float KbWusZOPYj26468849 = -27771196;    float KbWusZOPYj14368328 = -593468645;    float KbWusZOPYj81221352 = -579959012;    float KbWusZOPYj17459269 = 3171168;    float KbWusZOPYj72025977 = -688759908;    float KbWusZOPYj30806702 = -534573917;    float KbWusZOPYj90119825 = -90370839;    float KbWusZOPYj64532387 = -254565897;    float KbWusZOPYj57629426 = -399494265;    float KbWusZOPYj5025686 = -434988422;    float KbWusZOPYj89767357 = 2321137;    float KbWusZOPYj43350871 = -691608861;    float KbWusZOPYj68188955 = -936790379;    float KbWusZOPYj29612738 = -240851491;    float KbWusZOPYj31438555 = -518722466;    float KbWusZOPYj3899147 = -871401658;    float KbWusZOPYj82815121 = -223677661;    float KbWusZOPYj8122033 = -446419676;    float KbWusZOPYj8705117 = -536641603;    float KbWusZOPYj17598654 = -131138343;    float KbWusZOPYj76450947 = -45715470;    float KbWusZOPYj65658373 = -6351172;    float KbWusZOPYj81263656 = 9755244;    float KbWusZOPYj39065092 = -885334696;    float KbWusZOPYj38324578 = -772435329;    float KbWusZOPYj4445780 = -509297457;    float KbWusZOPYj98457339 = -893025807;    float KbWusZOPYj35126619 = 34513675;    float KbWusZOPYj72838780 = -982939690;    float KbWusZOPYj7260039 = -600688454;    float KbWusZOPYj88013044 = -363756657;    float KbWusZOPYj79867150 = -734990663;    float KbWusZOPYj3531919 = -495240656;    float KbWusZOPYj24528268 = -519795250;    float KbWusZOPYj89999547 = -760895720;    float KbWusZOPYj71927764 = -44426709;    float KbWusZOPYj723043 = -92796341;    float KbWusZOPYj26112443 = 25431772;    float KbWusZOPYj40827766 = -856190745;    float KbWusZOPYj19751771 = -274721215;    float KbWusZOPYj18145406 = -393326628;     KbWusZOPYj79085634 = KbWusZOPYj24688790;     KbWusZOPYj24688790 = KbWusZOPYj97507215;     KbWusZOPYj97507215 = KbWusZOPYj45249916;     KbWusZOPYj45249916 = KbWusZOPYj45724650;     KbWusZOPYj45724650 = KbWusZOPYj76852211;     KbWusZOPYj76852211 = KbWusZOPYj12708962;     KbWusZOPYj12708962 = KbWusZOPYj27338107;     KbWusZOPYj27338107 = KbWusZOPYj25278796;     KbWusZOPYj25278796 = KbWusZOPYj36675513;     KbWusZOPYj36675513 = KbWusZOPYj7393168;     KbWusZOPYj7393168 = KbWusZOPYj72740971;     KbWusZOPYj72740971 = KbWusZOPYj46718726;     KbWusZOPYj46718726 = KbWusZOPYj51148588;     KbWusZOPYj51148588 = KbWusZOPYj35059707;     KbWusZOPYj35059707 = KbWusZOPYj18526121;     KbWusZOPYj18526121 = KbWusZOPYj41831681;     KbWusZOPYj41831681 = KbWusZOPYj46081133;     KbWusZOPYj46081133 = KbWusZOPYj17734648;     KbWusZOPYj17734648 = KbWusZOPYj85843540;     KbWusZOPYj85843540 = KbWusZOPYj26386833;     KbWusZOPYj26386833 = KbWusZOPYj20975776;     KbWusZOPYj20975776 = KbWusZOPYj59263590;     KbWusZOPYj59263590 = KbWusZOPYj25863885;     KbWusZOPYj25863885 = KbWusZOPYj96135458;     KbWusZOPYj96135458 = KbWusZOPYj19255802;     KbWusZOPYj19255802 = KbWusZOPYj62483884;     KbWusZOPYj62483884 = KbWusZOPYj31487610;     KbWusZOPYj31487610 = KbWusZOPYj9878838;     KbWusZOPYj9878838 = KbWusZOPYj53252818;     KbWusZOPYj53252818 = KbWusZOPYj5868812;     KbWusZOPYj5868812 = KbWusZOPYj17273343;     KbWusZOPYj17273343 = KbWusZOPYj8208585;     KbWusZOPYj8208585 = KbWusZOPYj89089300;     KbWusZOPYj89089300 = KbWusZOPYj46122902;     KbWusZOPYj46122902 = KbWusZOPYj45292349;     KbWusZOPYj45292349 = KbWusZOPYj75175250;     KbWusZOPYj75175250 = KbWusZOPYj73642725;     KbWusZOPYj73642725 = KbWusZOPYj16468396;     KbWusZOPYj16468396 = KbWusZOPYj86296092;     KbWusZOPYj86296092 = KbWusZOPYj81944394;     KbWusZOPYj81944394 = KbWusZOPYj43571711;     KbWusZOPYj43571711 = KbWusZOPYj12853744;     KbWusZOPYj12853744 = KbWusZOPYj50558473;     KbWusZOPYj50558473 = KbWusZOPYj8265232;     KbWusZOPYj8265232 = KbWusZOPYj19684512;     KbWusZOPYj19684512 = KbWusZOPYj53597428;     KbWusZOPYj53597428 = KbWusZOPYj81220227;     KbWusZOPYj81220227 = KbWusZOPYj92422517;     KbWusZOPYj92422517 = KbWusZOPYj71554259;     KbWusZOPYj71554259 = KbWusZOPYj48807039;     KbWusZOPYj48807039 = KbWusZOPYj7411473;     KbWusZOPYj7411473 = KbWusZOPYj82146724;     KbWusZOPYj82146724 = KbWusZOPYj35369804;     KbWusZOPYj35369804 = KbWusZOPYj81829262;     KbWusZOPYj81829262 = KbWusZOPYj58109858;     KbWusZOPYj58109858 = KbWusZOPYj65425199;     KbWusZOPYj65425199 = KbWusZOPYj71643331;     KbWusZOPYj71643331 = KbWusZOPYj49114458;     KbWusZOPYj49114458 = KbWusZOPYj26468849;     KbWusZOPYj26468849 = KbWusZOPYj14368328;     KbWusZOPYj14368328 = KbWusZOPYj81221352;     KbWusZOPYj81221352 = KbWusZOPYj17459269;     KbWusZOPYj17459269 = KbWusZOPYj72025977;     KbWusZOPYj72025977 = KbWusZOPYj30806702;     KbWusZOPYj30806702 = KbWusZOPYj90119825;     KbWusZOPYj90119825 = KbWusZOPYj64532387;     KbWusZOPYj64532387 = KbWusZOPYj57629426;     KbWusZOPYj57629426 = KbWusZOPYj5025686;     KbWusZOPYj5025686 = KbWusZOPYj89767357;     KbWusZOPYj89767357 = KbWusZOPYj43350871;     KbWusZOPYj43350871 = KbWusZOPYj68188955;     KbWusZOPYj68188955 = KbWusZOPYj29612738;     KbWusZOPYj29612738 = KbWusZOPYj31438555;     KbWusZOPYj31438555 = KbWusZOPYj3899147;     KbWusZOPYj3899147 = KbWusZOPYj82815121;     KbWusZOPYj82815121 = KbWusZOPYj8122033;     KbWusZOPYj8122033 = KbWusZOPYj8705117;     KbWusZOPYj8705117 = KbWusZOPYj17598654;     KbWusZOPYj17598654 = KbWusZOPYj76450947;     KbWusZOPYj76450947 = KbWusZOPYj65658373;     KbWusZOPYj65658373 = KbWusZOPYj81263656;     KbWusZOPYj81263656 = KbWusZOPYj39065092;     KbWusZOPYj39065092 = KbWusZOPYj38324578;     KbWusZOPYj38324578 = KbWusZOPYj4445780;     KbWusZOPYj4445780 = KbWusZOPYj98457339;     KbWusZOPYj98457339 = KbWusZOPYj35126619;     KbWusZOPYj35126619 = KbWusZOPYj72838780;     KbWusZOPYj72838780 = KbWusZOPYj7260039;     KbWusZOPYj7260039 = KbWusZOPYj88013044;     KbWusZOPYj88013044 = KbWusZOPYj79867150;     KbWusZOPYj79867150 = KbWusZOPYj3531919;     KbWusZOPYj3531919 = KbWusZOPYj24528268;     KbWusZOPYj24528268 = KbWusZOPYj89999547;     KbWusZOPYj89999547 = KbWusZOPYj71927764;     KbWusZOPYj71927764 = KbWusZOPYj723043;     KbWusZOPYj723043 = KbWusZOPYj26112443;     KbWusZOPYj26112443 = KbWusZOPYj40827766;     KbWusZOPYj40827766 = KbWusZOPYj19751771;     KbWusZOPYj19751771 = KbWusZOPYj18145406;     KbWusZOPYj18145406 = KbWusZOPYj79085634;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void XIqnzjqUSh30576474() {     float eizSbjsMtF48272974 = -480232489;    float eizSbjsMtF31629726 = -696609096;    float eizSbjsMtF97494900 = -552988343;    float eizSbjsMtF25811329 = -106420610;    float eizSbjsMtF74941179 = -292043270;    float eizSbjsMtF98310526 = -704295034;    float eizSbjsMtF33836429 = 42948561;    float eizSbjsMtF30899212 = -378765879;    float eizSbjsMtF64960806 = -129402316;    float eizSbjsMtF204179 = -895967311;    float eizSbjsMtF73223485 = -672822847;    float eizSbjsMtF52802133 = -917730365;    float eizSbjsMtF62117538 = -509109433;    float eizSbjsMtF33279431 = -817882863;    float eizSbjsMtF13554400 = -788172454;    float eizSbjsMtF92958039 = -221191130;    float eizSbjsMtF55643458 = -807424624;    float eizSbjsMtF17668195 = -340994331;    float eizSbjsMtF18940256 = -448343778;    float eizSbjsMtF49733081 = -777992654;    float eizSbjsMtF47061138 = -393966149;    float eizSbjsMtF91677172 = -433667995;    float eizSbjsMtF71306037 = -593745274;    float eizSbjsMtF38061943 = -402227809;    float eizSbjsMtF94423485 = -948393295;    float eizSbjsMtF95516172 = -212380917;    float eizSbjsMtF66830211 = -544292213;    float eizSbjsMtF88262591 = -613743328;    float eizSbjsMtF68956358 = -684119275;    float eizSbjsMtF12267154 = -815602872;    float eizSbjsMtF80756957 = -307029116;    float eizSbjsMtF91346756 = -838065392;    float eizSbjsMtF20461979 = -407865105;    float eizSbjsMtF54350313 = -192293437;    float eizSbjsMtF67766153 = -256618373;    float eizSbjsMtF34593285 = -641543384;    float eizSbjsMtF90394631 = -779537052;    float eizSbjsMtF72801660 = -484842547;    float eizSbjsMtF30989479 = -585591011;    float eizSbjsMtF10852071 = -167731014;    float eizSbjsMtF89271772 = -951036470;    float eizSbjsMtF73003319 = -226623958;    float eizSbjsMtF64824748 = -981188001;    float eizSbjsMtF18461407 = -324847941;    float eizSbjsMtF23255402 = -104303290;    float eizSbjsMtF79591745 = -265304077;    float eizSbjsMtF35348217 = -50312158;    float eizSbjsMtF6150702 = -726565152;    float eizSbjsMtF60195605 = -644618346;    float eizSbjsMtF66923111 = -905719567;    float eizSbjsMtF9724068 = -711898105;    float eizSbjsMtF81492221 = -437340550;    float eizSbjsMtF64564014 = -318214165;    float eizSbjsMtF39606553 = -132851307;    float eizSbjsMtF83515335 = -50868454;    float eizSbjsMtF56595802 = 53435505;    float eizSbjsMtF60323688 = -2863822;    float eizSbjsMtF59432957 = -50760534;    float eizSbjsMtF31387844 = -158027316;    float eizSbjsMtF79425006 = 20337647;    float eizSbjsMtF31480316 = -60002821;    float eizSbjsMtF45573838 = -343308112;    float eizSbjsMtF61942854 = -694646604;    float eizSbjsMtF52693652 = -313799444;    float eizSbjsMtF19447222 = -488938195;    float eizSbjsMtF81876728 = -834757456;    float eizSbjsMtF32340154 = -409865261;    float eizSbjsMtF7767225 = -216815996;    float eizSbjsMtF65513278 = -461264490;    float eizSbjsMtF78961115 = -46629071;    float eizSbjsMtF2563409 = -441654079;    float eizSbjsMtF82841797 = -222582078;    float eizSbjsMtF86678715 = -755403321;    float eizSbjsMtF8088185 = -180612765;    float eizSbjsMtF60461309 = -826956185;    float eizSbjsMtF74057818 = -67342192;    float eizSbjsMtF26852424 = -452479994;    float eizSbjsMtF52844630 = -168897333;    float eizSbjsMtF14806542 = -197924520;    float eizSbjsMtF14831740 = -583089219;    float eizSbjsMtF60167956 = -62068760;    float eizSbjsMtF60679510 = -817727061;    float eizSbjsMtF28066986 = -969124982;    float eizSbjsMtF2033248 = -778399709;    float eizSbjsMtF2543087 = -3704768;    float eizSbjsMtF99264735 = -869688567;    float eizSbjsMtF26782742 = -419851227;    float eizSbjsMtF80855426 = -175013798;    float eizSbjsMtF70834977 = -41424984;    float eizSbjsMtF11170352 = -210053879;    float eizSbjsMtF74269596 = -538679562;    float eizSbjsMtF30961674 = -628776519;    float eizSbjsMtF41413817 = -226815231;    float eizSbjsMtF51564473 = -505928658;    float eizSbjsMtF79371755 = -7728194;    float eizSbjsMtF43697934 = -507728358;    float eizSbjsMtF11060466 = -531977354;    float eizSbjsMtF12131096 = -567388558;    float eizSbjsMtF99014185 = -835909747;    float eizSbjsMtF41378673 = -480232489;     eizSbjsMtF48272974 = eizSbjsMtF31629726;     eizSbjsMtF31629726 = eizSbjsMtF97494900;     eizSbjsMtF97494900 = eizSbjsMtF25811329;     eizSbjsMtF25811329 = eizSbjsMtF74941179;     eizSbjsMtF74941179 = eizSbjsMtF98310526;     eizSbjsMtF98310526 = eizSbjsMtF33836429;     eizSbjsMtF33836429 = eizSbjsMtF30899212;     eizSbjsMtF30899212 = eizSbjsMtF64960806;     eizSbjsMtF64960806 = eizSbjsMtF204179;     eizSbjsMtF204179 = eizSbjsMtF73223485;     eizSbjsMtF73223485 = eizSbjsMtF52802133;     eizSbjsMtF52802133 = eizSbjsMtF62117538;     eizSbjsMtF62117538 = eizSbjsMtF33279431;     eizSbjsMtF33279431 = eizSbjsMtF13554400;     eizSbjsMtF13554400 = eizSbjsMtF92958039;     eizSbjsMtF92958039 = eizSbjsMtF55643458;     eizSbjsMtF55643458 = eizSbjsMtF17668195;     eizSbjsMtF17668195 = eizSbjsMtF18940256;     eizSbjsMtF18940256 = eizSbjsMtF49733081;     eizSbjsMtF49733081 = eizSbjsMtF47061138;     eizSbjsMtF47061138 = eizSbjsMtF91677172;     eizSbjsMtF91677172 = eizSbjsMtF71306037;     eizSbjsMtF71306037 = eizSbjsMtF38061943;     eizSbjsMtF38061943 = eizSbjsMtF94423485;     eizSbjsMtF94423485 = eizSbjsMtF95516172;     eizSbjsMtF95516172 = eizSbjsMtF66830211;     eizSbjsMtF66830211 = eizSbjsMtF88262591;     eizSbjsMtF88262591 = eizSbjsMtF68956358;     eizSbjsMtF68956358 = eizSbjsMtF12267154;     eizSbjsMtF12267154 = eizSbjsMtF80756957;     eizSbjsMtF80756957 = eizSbjsMtF91346756;     eizSbjsMtF91346756 = eizSbjsMtF20461979;     eizSbjsMtF20461979 = eizSbjsMtF54350313;     eizSbjsMtF54350313 = eizSbjsMtF67766153;     eizSbjsMtF67766153 = eizSbjsMtF34593285;     eizSbjsMtF34593285 = eizSbjsMtF90394631;     eizSbjsMtF90394631 = eizSbjsMtF72801660;     eizSbjsMtF72801660 = eizSbjsMtF30989479;     eizSbjsMtF30989479 = eizSbjsMtF10852071;     eizSbjsMtF10852071 = eizSbjsMtF89271772;     eizSbjsMtF89271772 = eizSbjsMtF73003319;     eizSbjsMtF73003319 = eizSbjsMtF64824748;     eizSbjsMtF64824748 = eizSbjsMtF18461407;     eizSbjsMtF18461407 = eizSbjsMtF23255402;     eizSbjsMtF23255402 = eizSbjsMtF79591745;     eizSbjsMtF79591745 = eizSbjsMtF35348217;     eizSbjsMtF35348217 = eizSbjsMtF6150702;     eizSbjsMtF6150702 = eizSbjsMtF60195605;     eizSbjsMtF60195605 = eizSbjsMtF66923111;     eizSbjsMtF66923111 = eizSbjsMtF9724068;     eizSbjsMtF9724068 = eizSbjsMtF81492221;     eizSbjsMtF81492221 = eizSbjsMtF64564014;     eizSbjsMtF64564014 = eizSbjsMtF39606553;     eizSbjsMtF39606553 = eizSbjsMtF83515335;     eizSbjsMtF83515335 = eizSbjsMtF56595802;     eizSbjsMtF56595802 = eizSbjsMtF60323688;     eizSbjsMtF60323688 = eizSbjsMtF59432957;     eizSbjsMtF59432957 = eizSbjsMtF31387844;     eizSbjsMtF31387844 = eizSbjsMtF79425006;     eizSbjsMtF79425006 = eizSbjsMtF31480316;     eizSbjsMtF31480316 = eizSbjsMtF45573838;     eizSbjsMtF45573838 = eizSbjsMtF61942854;     eizSbjsMtF61942854 = eizSbjsMtF52693652;     eizSbjsMtF52693652 = eizSbjsMtF19447222;     eizSbjsMtF19447222 = eizSbjsMtF81876728;     eizSbjsMtF81876728 = eizSbjsMtF32340154;     eizSbjsMtF32340154 = eizSbjsMtF7767225;     eizSbjsMtF7767225 = eizSbjsMtF65513278;     eizSbjsMtF65513278 = eizSbjsMtF78961115;     eizSbjsMtF78961115 = eizSbjsMtF2563409;     eizSbjsMtF2563409 = eizSbjsMtF82841797;     eizSbjsMtF82841797 = eizSbjsMtF86678715;     eizSbjsMtF86678715 = eizSbjsMtF8088185;     eizSbjsMtF8088185 = eizSbjsMtF60461309;     eizSbjsMtF60461309 = eizSbjsMtF74057818;     eizSbjsMtF74057818 = eizSbjsMtF26852424;     eizSbjsMtF26852424 = eizSbjsMtF52844630;     eizSbjsMtF52844630 = eizSbjsMtF14806542;     eizSbjsMtF14806542 = eizSbjsMtF14831740;     eizSbjsMtF14831740 = eizSbjsMtF60167956;     eizSbjsMtF60167956 = eizSbjsMtF60679510;     eizSbjsMtF60679510 = eizSbjsMtF28066986;     eizSbjsMtF28066986 = eizSbjsMtF2033248;     eizSbjsMtF2033248 = eizSbjsMtF2543087;     eizSbjsMtF2543087 = eizSbjsMtF99264735;     eizSbjsMtF99264735 = eizSbjsMtF26782742;     eizSbjsMtF26782742 = eizSbjsMtF80855426;     eizSbjsMtF80855426 = eizSbjsMtF70834977;     eizSbjsMtF70834977 = eizSbjsMtF11170352;     eizSbjsMtF11170352 = eizSbjsMtF74269596;     eizSbjsMtF74269596 = eizSbjsMtF30961674;     eizSbjsMtF30961674 = eizSbjsMtF41413817;     eizSbjsMtF41413817 = eizSbjsMtF51564473;     eizSbjsMtF51564473 = eizSbjsMtF79371755;     eizSbjsMtF79371755 = eizSbjsMtF43697934;     eizSbjsMtF43697934 = eizSbjsMtF11060466;     eizSbjsMtF11060466 = eizSbjsMtF12131096;     eizSbjsMtF12131096 = eizSbjsMtF99014185;     eizSbjsMtF99014185 = eizSbjsMtF41378673;     eizSbjsMtF41378673 = eizSbjsMtF48272974;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void DwRyJoDTxV88817354() {     float CUjbusDaeX86930102 = -737138526;    float CUjbusDaeX56951447 = -884095424;    float CUjbusDaeX38991274 = -881463110;    float CUjbusDaeX28749925 = 71512957;    float CUjbusDaeX2394199 = -953507401;    float CUjbusDaeX36659559 = -161015554;    float CUjbusDaeX57658941 = -562061074;    float CUjbusDaeX32407039 = 66914746;    float CUjbusDaeX94644573 = -129761728;    float CUjbusDaeX42501689 = -52474499;    float CUjbusDaeX88196913 = -788634062;    float CUjbusDaeX32784988 = -974814750;    float CUjbusDaeX9924781 = -206652983;    float CUjbusDaeX35365259 = -241061809;    float CUjbusDaeX91282527 = -452665714;    float CUjbusDaeX39964471 = 88473328;    float CUjbusDaeX61454158 = -745439151;    float CUjbusDaeX32567874 = -478957070;    float CUjbusDaeX39673676 = -312778932;    float CUjbusDaeX26215483 = -926358642;    float CUjbusDaeX60274159 = -521453310;    float CUjbusDaeX32786586 = -435270905;    float CUjbusDaeX42301892 = -99388971;    float CUjbusDaeX7069144 = -207908536;    float CUjbusDaeX21804329 = -918315511;    float CUjbusDaeX47400487 = -121514042;    float CUjbusDaeX62549273 = -158802996;    float CUjbusDaeX86978365 = -124723281;    float CUjbusDaeX16609225 = -50250809;    float CUjbusDaeX61965876 = -838723738;    float CUjbusDaeX77096018 = -556340482;    float CUjbusDaeX8818516 = -232761285;    float CUjbusDaeX72828371 = -473938724;    float CUjbusDaeX78297123 = 10994628;    float CUjbusDaeX58750230 = -845398113;    float CUjbusDaeX49253110 = 41691971;    float CUjbusDaeX96012120 = -291797085;    float CUjbusDaeX45963650 = -448587481;    float CUjbusDaeX53995488 = -293759577;    float CUjbusDaeX63721562 = 33260150;    float CUjbusDaeX41117290 = -792117908;    float CUjbusDaeX17869645 = -572299062;    float CUjbusDaeX97858154 = -675444585;    float CUjbusDaeX29941905 = -300232301;    float CUjbusDaeX47269470 = -60692091;    float CUjbusDaeX83853114 = -644546151;    float CUjbusDaeX42164437 = 11642874;    float CUjbusDaeX87391109 = -229739601;    float CUjbusDaeX39439686 = -458314755;    float CUjbusDaeX48178950 = -2749277;    float CUjbusDaeX91761822 = -479756987;    float CUjbusDaeX18385016 = -398252794;    float CUjbusDaeX72944363 = -970247038;    float CUjbusDaeX64210763 = -363742780;    float CUjbusDaeX28543196 = -731744902;    float CUjbusDaeX54143517 = -201867622;    float CUjbusDaeX14649555 = -684706454;    float CUjbusDaeX31922131 = -573554574;    float CUjbusDaeX6945596 = -10171533;    float CUjbusDaeX54993712 = -731993360;    float CUjbusDaeX74110285 = 97787441;    float CUjbusDaeX70680575 = -337337794;    float CUjbusDaeX15797814 = -882834445;    float CUjbusDaeX32678697 = -291037991;    float CUjbusDaeX65405671 = -496134018;    float CUjbusDaeX79378398 = -455872778;    float CUjbusDaeX59956617 = -400876026;    float CUjbusDaeX31627657 = -117647612;    float CUjbusDaeX76615028 = -395663697;    float CUjbusDaeX42029417 = -394357686;    float CUjbusDaeX43952350 = -619729587;    float CUjbusDaeX15490509 = -196851671;    float CUjbusDaeX78572386 = -85197493;    float CUjbusDaeX75952113 = -246039082;    float CUjbusDaeX85098193 = -34240735;    float CUjbusDaeX42404514 = -949154249;    float CUjbusDaeX34928432 = -759826320;    float CUjbusDaeX12359987 = -799156670;    float CUjbusDaeX59799674 = -47216446;    float CUjbusDaeX37951215 = -173769360;    float CUjbusDaeX5236050 = -33156916;    float CUjbusDaeX75158164 = -929063395;    float CUjbusDaeX47538680 = -666408527;    float CUjbusDaeX68430275 = 52498467;    float CUjbusDaeX70204054 = -258966751;    float CUjbusDaeX58711002 = -58087689;    float CUjbusDaeX35874153 = -262514248;    float CUjbusDaeX8617608 = -10195945;    float CUjbusDaeX49753927 = -257260471;    float CUjbusDaeX4606714 = -543530491;    float CUjbusDaeX34603555 = -273601576;    float CUjbusDaeX64089990 = -718242512;    float CUjbusDaeX39018054 = -338415949;    float CUjbusDaeX99001775 = -561766218;    float CUjbusDaeX89611277 = 35472709;    float CUjbusDaeX70436715 = -354780114;    float CUjbusDaeX2071831 = -689464617;    float CUjbusDaeX65179457 = -284406595;    float CUjbusDaeX64536234 = -804098284;    float CUjbusDaeX67891072 = -737138526;     CUjbusDaeX86930102 = CUjbusDaeX56951447;     CUjbusDaeX56951447 = CUjbusDaeX38991274;     CUjbusDaeX38991274 = CUjbusDaeX28749925;     CUjbusDaeX28749925 = CUjbusDaeX2394199;     CUjbusDaeX2394199 = CUjbusDaeX36659559;     CUjbusDaeX36659559 = CUjbusDaeX57658941;     CUjbusDaeX57658941 = CUjbusDaeX32407039;     CUjbusDaeX32407039 = CUjbusDaeX94644573;     CUjbusDaeX94644573 = CUjbusDaeX42501689;     CUjbusDaeX42501689 = CUjbusDaeX88196913;     CUjbusDaeX88196913 = CUjbusDaeX32784988;     CUjbusDaeX32784988 = CUjbusDaeX9924781;     CUjbusDaeX9924781 = CUjbusDaeX35365259;     CUjbusDaeX35365259 = CUjbusDaeX91282527;     CUjbusDaeX91282527 = CUjbusDaeX39964471;     CUjbusDaeX39964471 = CUjbusDaeX61454158;     CUjbusDaeX61454158 = CUjbusDaeX32567874;     CUjbusDaeX32567874 = CUjbusDaeX39673676;     CUjbusDaeX39673676 = CUjbusDaeX26215483;     CUjbusDaeX26215483 = CUjbusDaeX60274159;     CUjbusDaeX60274159 = CUjbusDaeX32786586;     CUjbusDaeX32786586 = CUjbusDaeX42301892;     CUjbusDaeX42301892 = CUjbusDaeX7069144;     CUjbusDaeX7069144 = CUjbusDaeX21804329;     CUjbusDaeX21804329 = CUjbusDaeX47400487;     CUjbusDaeX47400487 = CUjbusDaeX62549273;     CUjbusDaeX62549273 = CUjbusDaeX86978365;     CUjbusDaeX86978365 = CUjbusDaeX16609225;     CUjbusDaeX16609225 = CUjbusDaeX61965876;     CUjbusDaeX61965876 = CUjbusDaeX77096018;     CUjbusDaeX77096018 = CUjbusDaeX8818516;     CUjbusDaeX8818516 = CUjbusDaeX72828371;     CUjbusDaeX72828371 = CUjbusDaeX78297123;     CUjbusDaeX78297123 = CUjbusDaeX58750230;     CUjbusDaeX58750230 = CUjbusDaeX49253110;     CUjbusDaeX49253110 = CUjbusDaeX96012120;     CUjbusDaeX96012120 = CUjbusDaeX45963650;     CUjbusDaeX45963650 = CUjbusDaeX53995488;     CUjbusDaeX53995488 = CUjbusDaeX63721562;     CUjbusDaeX63721562 = CUjbusDaeX41117290;     CUjbusDaeX41117290 = CUjbusDaeX17869645;     CUjbusDaeX17869645 = CUjbusDaeX97858154;     CUjbusDaeX97858154 = CUjbusDaeX29941905;     CUjbusDaeX29941905 = CUjbusDaeX47269470;     CUjbusDaeX47269470 = CUjbusDaeX83853114;     CUjbusDaeX83853114 = CUjbusDaeX42164437;     CUjbusDaeX42164437 = CUjbusDaeX87391109;     CUjbusDaeX87391109 = CUjbusDaeX39439686;     CUjbusDaeX39439686 = CUjbusDaeX48178950;     CUjbusDaeX48178950 = CUjbusDaeX91761822;     CUjbusDaeX91761822 = CUjbusDaeX18385016;     CUjbusDaeX18385016 = CUjbusDaeX72944363;     CUjbusDaeX72944363 = CUjbusDaeX64210763;     CUjbusDaeX64210763 = CUjbusDaeX28543196;     CUjbusDaeX28543196 = CUjbusDaeX54143517;     CUjbusDaeX54143517 = CUjbusDaeX14649555;     CUjbusDaeX14649555 = CUjbusDaeX31922131;     CUjbusDaeX31922131 = CUjbusDaeX6945596;     CUjbusDaeX6945596 = CUjbusDaeX54993712;     CUjbusDaeX54993712 = CUjbusDaeX74110285;     CUjbusDaeX74110285 = CUjbusDaeX70680575;     CUjbusDaeX70680575 = CUjbusDaeX15797814;     CUjbusDaeX15797814 = CUjbusDaeX32678697;     CUjbusDaeX32678697 = CUjbusDaeX65405671;     CUjbusDaeX65405671 = CUjbusDaeX79378398;     CUjbusDaeX79378398 = CUjbusDaeX59956617;     CUjbusDaeX59956617 = CUjbusDaeX31627657;     CUjbusDaeX31627657 = CUjbusDaeX76615028;     CUjbusDaeX76615028 = CUjbusDaeX42029417;     CUjbusDaeX42029417 = CUjbusDaeX43952350;     CUjbusDaeX43952350 = CUjbusDaeX15490509;     CUjbusDaeX15490509 = CUjbusDaeX78572386;     CUjbusDaeX78572386 = CUjbusDaeX75952113;     CUjbusDaeX75952113 = CUjbusDaeX85098193;     CUjbusDaeX85098193 = CUjbusDaeX42404514;     CUjbusDaeX42404514 = CUjbusDaeX34928432;     CUjbusDaeX34928432 = CUjbusDaeX12359987;     CUjbusDaeX12359987 = CUjbusDaeX59799674;     CUjbusDaeX59799674 = CUjbusDaeX37951215;     CUjbusDaeX37951215 = CUjbusDaeX5236050;     CUjbusDaeX5236050 = CUjbusDaeX75158164;     CUjbusDaeX75158164 = CUjbusDaeX47538680;     CUjbusDaeX47538680 = CUjbusDaeX68430275;     CUjbusDaeX68430275 = CUjbusDaeX70204054;     CUjbusDaeX70204054 = CUjbusDaeX58711002;     CUjbusDaeX58711002 = CUjbusDaeX35874153;     CUjbusDaeX35874153 = CUjbusDaeX8617608;     CUjbusDaeX8617608 = CUjbusDaeX49753927;     CUjbusDaeX49753927 = CUjbusDaeX4606714;     CUjbusDaeX4606714 = CUjbusDaeX34603555;     CUjbusDaeX34603555 = CUjbusDaeX64089990;     CUjbusDaeX64089990 = CUjbusDaeX39018054;     CUjbusDaeX39018054 = CUjbusDaeX99001775;     CUjbusDaeX99001775 = CUjbusDaeX89611277;     CUjbusDaeX89611277 = CUjbusDaeX70436715;     CUjbusDaeX70436715 = CUjbusDaeX2071831;     CUjbusDaeX2071831 = CUjbusDaeX65179457;     CUjbusDaeX65179457 = CUjbusDaeX64536234;     CUjbusDaeX64536234 = CUjbusDaeX67891072;     CUjbusDaeX67891072 = CUjbusDaeX86930102;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void rzVBvJTKPd11942206() {     double LOkdeBiZfM9034772 = -288448174;    double LOkdeBiZfM29859100 = 50333622;    double LOkdeBiZfM26239549 = -474898798;    double LOkdeBiZfM1940843 = -584082897;    double LOkdeBiZfM31548492 = -87661362;    double LOkdeBiZfM56110275 = -647091322;    double LOkdeBiZfM68247103 = -504713789;    double LOkdeBiZfM13655283 = -722474000;    double LOkdeBiZfM41487958 = -64757457;    double LOkdeBiZfM19025094 = -408954365;    double LOkdeBiZfM42425978 = -14825114;    double LOkdeBiZfM68827404 = -51778199;    double LOkdeBiZfM59923342 = -235028538;    double LOkdeBiZfM40155868 = -379954586;    double LOkdeBiZfM7279064 = -229825530;    double LOkdeBiZfM86077790 = -873543714;    double LOkdeBiZfM33090364 = -526991420;    double LOkdeBiZfM66818734 = -115688874;    double LOkdeBiZfM62633103 = -966897823;    double LOkdeBiZfM56028446 = -198298397;    double LOkdeBiZfM89292855 = -383236316;    double LOkdeBiZfM96895183 = -723029644;    double LOkdeBiZfM98684255 = 34557055;    double LOkdeBiZfM88957848 = -144954397;    double LOkdeBiZfM26539786 = -684543559;    double LOkdeBiZfM36339911 = 42946082;    double LOkdeBiZfM22612286 = -350998264;    double LOkdeBiZfM7724004 = -501174624;    double LOkdeBiZfM94003961 = -605852327;    double LOkdeBiZfM39453005 = -436978769;    double LOkdeBiZfM74824053 = -249862432;    double LOkdeBiZfM97034774 = -446741378;    double LOkdeBiZfM26007439 = -609912413;    double LOkdeBiZfM44261026 = 11021389;    double LOkdeBiZfM87282018 = -402185625;    double LOkdeBiZfM54888024 = -673213707;    double LOkdeBiZfM14273105 = -183079610;    double LOkdeBiZfM24745631 = -123171596;    double LOkdeBiZfM8339777 = -380485233;    double LOkdeBiZfM80149742 = -263626365;    double LOkdeBiZfM32683898 = -710776370;    double LOkdeBiZfM20374926 = -294986446;    double LOkdeBiZfM74316949 = -641193284;    double LOkdeBiZfM53711394 = -253317210;    double LOkdeBiZfM21219009 = -58608144;    double LOkdeBiZfM7506495 = -587376814;    double LOkdeBiZfM11147192 = -918066013;    double LOkdeBiZfM610323 = 22744909;    double LOkdeBiZfM90201684 = -525731315;    double LOkdeBiZfM54744561 = -613286999;    double LOkdeBiZfM40427340 = -679239789;    double LOkdeBiZfM3504977 = -776351475;    double LOkdeBiZfM7712997 = -238000223;    double LOkdeBiZfM8366597 = -597087714;    double LOkdeBiZfM22649351 = -782657834;    double LOkdeBiZfM12139588 = -565418531;    double LOkdeBiZfM31174844 = -984223434;    double LOkdeBiZfM37281701 = -229944401;    double LOkdeBiZfM75401056 = -899539338;    double LOkdeBiZfM95208580 = -30607445;    double LOkdeBiZfM33497989 = -196093058;    double LOkdeBiZfM60523099 = 96460834;    double LOkdeBiZfM19651321 = -16621673;    double LOkdeBiZfM2034954 = -627778689;    double LOkdeBiZfM44201041 = -59091933;    double LOkdeBiZfM45391204 = -568083737;    double LOkdeBiZfM42819965 = -441865787;    double LOkdeBiZfM15662317 = -146049927;    double LOkdeBiZfM52873850 = -977768961;    double LOkdeBiZfM52391039 = -556611823;    double LOkdeBiZfM71804685 = -590464105;    double LOkdeBiZfM8344733 = -303819825;    double LOkdeBiZfM58478957 = -735203641;    double LOkdeBiZfM82483360 = -603271458;    double LOkdeBiZfM23344548 = -487522028;    double LOkdeBiZfM68917929 = 11750130;    double LOkdeBiZfM22578235 = 18163640;    double LOkdeBiZfM44972862 = -712125735;    double LOkdeBiZfM67738840 = 13653746;    double LOkdeBiZfM19033291 = 2833254;    double LOkdeBiZfM25192720 = -38987905;    double LOkdeBiZfM22001963 = -273743174;    double LOkdeBiZfM17522319 = -975443310;    double LOkdeBiZfM39259401 = -992565329;    double LOkdeBiZfM99025664 = -757738980;    double LOkdeBiZfM71319076 = -473510957;    double LOkdeBiZfM89321777 = -108741156;    double LOkdeBiZfM17640842 = 87175300;    double LOkdeBiZfM21611675 = -206320777;    double LOkdeBiZfM75142431 = -836767095;    double LOkdeBiZfM23713181 = -688990274;    double LOkdeBiZfM76991404 = -953135209;    double LOkdeBiZfM49344575 = -223632258;    double LOkdeBiZfM13131196 = -249877789;    double LOkdeBiZfM46651754 = 32466693;    double LOkdeBiZfM72160799 = -707237204;    double LOkdeBiZfM723605 = -178364773;    double LOkdeBiZfM72281996 = 86585404;    double LOkdeBiZfM9510354 = -94225278;    double LOkdeBiZfM75827804 = -288448174;     LOkdeBiZfM9034772 = LOkdeBiZfM29859100;     LOkdeBiZfM29859100 = LOkdeBiZfM26239549;     LOkdeBiZfM26239549 = LOkdeBiZfM1940843;     LOkdeBiZfM1940843 = LOkdeBiZfM31548492;     LOkdeBiZfM31548492 = LOkdeBiZfM56110275;     LOkdeBiZfM56110275 = LOkdeBiZfM68247103;     LOkdeBiZfM68247103 = LOkdeBiZfM13655283;     LOkdeBiZfM13655283 = LOkdeBiZfM41487958;     LOkdeBiZfM41487958 = LOkdeBiZfM19025094;     LOkdeBiZfM19025094 = LOkdeBiZfM42425978;     LOkdeBiZfM42425978 = LOkdeBiZfM68827404;     LOkdeBiZfM68827404 = LOkdeBiZfM59923342;     LOkdeBiZfM59923342 = LOkdeBiZfM40155868;     LOkdeBiZfM40155868 = LOkdeBiZfM7279064;     LOkdeBiZfM7279064 = LOkdeBiZfM86077790;     LOkdeBiZfM86077790 = LOkdeBiZfM33090364;     LOkdeBiZfM33090364 = LOkdeBiZfM66818734;     LOkdeBiZfM66818734 = LOkdeBiZfM62633103;     LOkdeBiZfM62633103 = LOkdeBiZfM56028446;     LOkdeBiZfM56028446 = LOkdeBiZfM89292855;     LOkdeBiZfM89292855 = LOkdeBiZfM96895183;     LOkdeBiZfM96895183 = LOkdeBiZfM98684255;     LOkdeBiZfM98684255 = LOkdeBiZfM88957848;     LOkdeBiZfM88957848 = LOkdeBiZfM26539786;     LOkdeBiZfM26539786 = LOkdeBiZfM36339911;     LOkdeBiZfM36339911 = LOkdeBiZfM22612286;     LOkdeBiZfM22612286 = LOkdeBiZfM7724004;     LOkdeBiZfM7724004 = LOkdeBiZfM94003961;     LOkdeBiZfM94003961 = LOkdeBiZfM39453005;     LOkdeBiZfM39453005 = LOkdeBiZfM74824053;     LOkdeBiZfM74824053 = LOkdeBiZfM97034774;     LOkdeBiZfM97034774 = LOkdeBiZfM26007439;     LOkdeBiZfM26007439 = LOkdeBiZfM44261026;     LOkdeBiZfM44261026 = LOkdeBiZfM87282018;     LOkdeBiZfM87282018 = LOkdeBiZfM54888024;     LOkdeBiZfM54888024 = LOkdeBiZfM14273105;     LOkdeBiZfM14273105 = LOkdeBiZfM24745631;     LOkdeBiZfM24745631 = LOkdeBiZfM8339777;     LOkdeBiZfM8339777 = LOkdeBiZfM80149742;     LOkdeBiZfM80149742 = LOkdeBiZfM32683898;     LOkdeBiZfM32683898 = LOkdeBiZfM20374926;     LOkdeBiZfM20374926 = LOkdeBiZfM74316949;     LOkdeBiZfM74316949 = LOkdeBiZfM53711394;     LOkdeBiZfM53711394 = LOkdeBiZfM21219009;     LOkdeBiZfM21219009 = LOkdeBiZfM7506495;     LOkdeBiZfM7506495 = LOkdeBiZfM11147192;     LOkdeBiZfM11147192 = LOkdeBiZfM610323;     LOkdeBiZfM610323 = LOkdeBiZfM90201684;     LOkdeBiZfM90201684 = LOkdeBiZfM54744561;     LOkdeBiZfM54744561 = LOkdeBiZfM40427340;     LOkdeBiZfM40427340 = LOkdeBiZfM3504977;     LOkdeBiZfM3504977 = LOkdeBiZfM7712997;     LOkdeBiZfM7712997 = LOkdeBiZfM8366597;     LOkdeBiZfM8366597 = LOkdeBiZfM22649351;     LOkdeBiZfM22649351 = LOkdeBiZfM12139588;     LOkdeBiZfM12139588 = LOkdeBiZfM31174844;     LOkdeBiZfM31174844 = LOkdeBiZfM37281701;     LOkdeBiZfM37281701 = LOkdeBiZfM75401056;     LOkdeBiZfM75401056 = LOkdeBiZfM95208580;     LOkdeBiZfM95208580 = LOkdeBiZfM33497989;     LOkdeBiZfM33497989 = LOkdeBiZfM60523099;     LOkdeBiZfM60523099 = LOkdeBiZfM19651321;     LOkdeBiZfM19651321 = LOkdeBiZfM2034954;     LOkdeBiZfM2034954 = LOkdeBiZfM44201041;     LOkdeBiZfM44201041 = LOkdeBiZfM45391204;     LOkdeBiZfM45391204 = LOkdeBiZfM42819965;     LOkdeBiZfM42819965 = LOkdeBiZfM15662317;     LOkdeBiZfM15662317 = LOkdeBiZfM52873850;     LOkdeBiZfM52873850 = LOkdeBiZfM52391039;     LOkdeBiZfM52391039 = LOkdeBiZfM71804685;     LOkdeBiZfM71804685 = LOkdeBiZfM8344733;     LOkdeBiZfM8344733 = LOkdeBiZfM58478957;     LOkdeBiZfM58478957 = LOkdeBiZfM82483360;     LOkdeBiZfM82483360 = LOkdeBiZfM23344548;     LOkdeBiZfM23344548 = LOkdeBiZfM68917929;     LOkdeBiZfM68917929 = LOkdeBiZfM22578235;     LOkdeBiZfM22578235 = LOkdeBiZfM44972862;     LOkdeBiZfM44972862 = LOkdeBiZfM67738840;     LOkdeBiZfM67738840 = LOkdeBiZfM19033291;     LOkdeBiZfM19033291 = LOkdeBiZfM25192720;     LOkdeBiZfM25192720 = LOkdeBiZfM22001963;     LOkdeBiZfM22001963 = LOkdeBiZfM17522319;     LOkdeBiZfM17522319 = LOkdeBiZfM39259401;     LOkdeBiZfM39259401 = LOkdeBiZfM99025664;     LOkdeBiZfM99025664 = LOkdeBiZfM71319076;     LOkdeBiZfM71319076 = LOkdeBiZfM89321777;     LOkdeBiZfM89321777 = LOkdeBiZfM17640842;     LOkdeBiZfM17640842 = LOkdeBiZfM21611675;     LOkdeBiZfM21611675 = LOkdeBiZfM75142431;     LOkdeBiZfM75142431 = LOkdeBiZfM23713181;     LOkdeBiZfM23713181 = LOkdeBiZfM76991404;     LOkdeBiZfM76991404 = LOkdeBiZfM49344575;     LOkdeBiZfM49344575 = LOkdeBiZfM13131196;     LOkdeBiZfM13131196 = LOkdeBiZfM46651754;     LOkdeBiZfM46651754 = LOkdeBiZfM72160799;     LOkdeBiZfM72160799 = LOkdeBiZfM723605;     LOkdeBiZfM723605 = LOkdeBiZfM72281996;     LOkdeBiZfM72281996 = LOkdeBiZfM9510354;     LOkdeBiZfM9510354 = LOkdeBiZfM75827804;     LOkdeBiZfM75827804 = LOkdeBiZfM9034772;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void TvSWPiYEko70183087() {     double qNcMVAiRQP47691900 = -545354211;    double qNcMVAiRQP55180821 = -137152707;    double qNcMVAiRQP67735922 = -803373565;    double qNcMVAiRQP4879438 = -406149330;    double qNcMVAiRQP59001511 = -749125494;    double qNcMVAiRQP94459306 = -103811843;    double qNcMVAiRQP92069614 = -9723424;    double qNcMVAiRQP15163109 = -276793375;    double qNcMVAiRQP71171725 = -65116869;    double qNcMVAiRQP61322604 = -665461553;    double qNcMVAiRQP57399407 = -130636329;    double qNcMVAiRQP48810259 = -108862584;    double qNcMVAiRQP7730585 = 67427912;    double qNcMVAiRQP42241696 = -903133532;    double qNcMVAiRQP85007190 = -994318790;    double qNcMVAiRQP33084221 = -563879255;    double qNcMVAiRQP38901064 = -465005947;    double qNcMVAiRQP81718413 = -253651613;    double qNcMVAiRQP83366523 = -831332977;    double qNcMVAiRQP32510848 = -346664385;    double qNcMVAiRQP2505877 = -510723477;    double qNcMVAiRQP38004597 = -724632554;    double qNcMVAiRQP69680110 = -571086642;    double qNcMVAiRQP57965049 = 49364876;    double qNcMVAiRQP53920629 = -654465775;    double qNcMVAiRQP88224224 = -966187042;    double qNcMVAiRQP18331349 = 34490953;    double qNcMVAiRQP6439779 = -12154578;    double qNcMVAiRQP41656828 = 28016139;    double qNcMVAiRQP89151727 = -460099634;    double qNcMVAiRQP71163114 = -499173798;    double qNcMVAiRQP14506535 = -941437272;    double qNcMVAiRQP78373831 = -675986033;    double qNcMVAiRQP68207836 = -885690546;    double qNcMVAiRQP78266096 = -990965365;    double qNcMVAiRQP69547849 = 10021648;    double qNcMVAiRQP19890595 = -795339643;    double qNcMVAiRQP97907620 = -86916530;    double qNcMVAiRQP31345786 = -88653800;    double qNcMVAiRQP33019234 = -62635201;    double qNcMVAiRQP84529416 = -551857808;    double qNcMVAiRQP65241251 = -640661550;    double qNcMVAiRQP7350356 = -335449868;    double qNcMVAiRQP65191892 = -228701570;    double qNcMVAiRQP45233077 = -14996945;    double qNcMVAiRQP11767864 = -966618888;    double qNcMVAiRQP17963412 = -856110981;    double qNcMVAiRQP81850730 = -580429540;    double qNcMVAiRQP69445766 = -339427724;    double qNcMVAiRQP36000400 = -810316708;    double qNcMVAiRQP22465095 = -447098671;    double qNcMVAiRQP40397772 = -737263719;    double qNcMVAiRQP16093346 = -890033095;    double qNcMVAiRQP32970807 = -827979186;    double qNcMVAiRQP67677211 = -363534282;    double qNcMVAiRQP9687303 = -820721658;    double qNcMVAiRQP85500710 = -566066065;    double qNcMVAiRQP9770874 = -752738441;    double qNcMVAiRQP50958809 = -751683555;    double qNcMVAiRQP70777286 = -782938452;    double qNcMVAiRQP76127958 = -38302797;    double qNcMVAiRQP85629836 = -997568847;    double qNcMVAiRQP73506281 = -204809515;    double qNcMVAiRQP82019998 = -605017235;    double qNcMVAiRQP90159489 = -66287756;    double qNcMVAiRQP42892873 = -189199058;    double qNcMVAiRQP70436428 = -432876552;    double qNcMVAiRQP39522749 = -46881543;    double qNcMVAiRQP63975600 = -912168168;    double qNcMVAiRQP15459342 = -904340438;    double qNcMVAiRQP13193627 = -768539613;    double qNcMVAiRQP40993444 = -278089418;    double qNcMVAiRQP50372628 = -64997813;    double qNcMVAiRQP50347289 = -668697776;    double qNcMVAiRQP47981432 = -794806578;    double qNcMVAiRQP37264625 = -870061928;    double qNcMVAiRQP30654242 = -289182686;    double qNcMVAiRQP4488218 = -242385072;    double qNcMVAiRQP12731973 = -935638179;    double qNcMVAiRQP42152766 = -687846888;    double qNcMVAiRQP70260813 = -10076062;    double qNcMVAiRQP36480618 = -385079507;    double qNcMVAiRQP36994013 = -672726854;    double qNcMVAiRQP5656428 = -161667153;    double qNcMVAiRQP66686632 = 86999037;    double qNcMVAiRQP30765343 = -761910079;    double qNcMVAiRQP98413188 = 48595823;    double qNcMVAiRQP45403024 = -848006847;    double qNcMVAiRQP530626 = -422156264;    double qNcMVAiRQP68578793 = -70243707;    double qNcMVAiRQP84047139 = -423912288;    double qNcMVAiRQP10119722 = 57398798;    double qNcMVAiRQP46948812 = -335232976;    double qNcMVAiRQP60568499 = -305715348;    double qNcMVAiRQP56891276 = 75667595;    double qNcMVAiRQP98899580 = -554288961;    double qNcMVAiRQP91734970 = -335852036;    double qNcMVAiRQP25330357 = -730432633;    double qNcMVAiRQP75032402 = -62413815;    double qNcMVAiRQP2340204 = -545354211;     qNcMVAiRQP47691900 = qNcMVAiRQP55180821;     qNcMVAiRQP55180821 = qNcMVAiRQP67735922;     qNcMVAiRQP67735922 = qNcMVAiRQP4879438;     qNcMVAiRQP4879438 = qNcMVAiRQP59001511;     qNcMVAiRQP59001511 = qNcMVAiRQP94459306;     qNcMVAiRQP94459306 = qNcMVAiRQP92069614;     qNcMVAiRQP92069614 = qNcMVAiRQP15163109;     qNcMVAiRQP15163109 = qNcMVAiRQP71171725;     qNcMVAiRQP71171725 = qNcMVAiRQP61322604;     qNcMVAiRQP61322604 = qNcMVAiRQP57399407;     qNcMVAiRQP57399407 = qNcMVAiRQP48810259;     qNcMVAiRQP48810259 = qNcMVAiRQP7730585;     qNcMVAiRQP7730585 = qNcMVAiRQP42241696;     qNcMVAiRQP42241696 = qNcMVAiRQP85007190;     qNcMVAiRQP85007190 = qNcMVAiRQP33084221;     qNcMVAiRQP33084221 = qNcMVAiRQP38901064;     qNcMVAiRQP38901064 = qNcMVAiRQP81718413;     qNcMVAiRQP81718413 = qNcMVAiRQP83366523;     qNcMVAiRQP83366523 = qNcMVAiRQP32510848;     qNcMVAiRQP32510848 = qNcMVAiRQP2505877;     qNcMVAiRQP2505877 = qNcMVAiRQP38004597;     qNcMVAiRQP38004597 = qNcMVAiRQP69680110;     qNcMVAiRQP69680110 = qNcMVAiRQP57965049;     qNcMVAiRQP57965049 = qNcMVAiRQP53920629;     qNcMVAiRQP53920629 = qNcMVAiRQP88224224;     qNcMVAiRQP88224224 = qNcMVAiRQP18331349;     qNcMVAiRQP18331349 = qNcMVAiRQP6439779;     qNcMVAiRQP6439779 = qNcMVAiRQP41656828;     qNcMVAiRQP41656828 = qNcMVAiRQP89151727;     qNcMVAiRQP89151727 = qNcMVAiRQP71163114;     qNcMVAiRQP71163114 = qNcMVAiRQP14506535;     qNcMVAiRQP14506535 = qNcMVAiRQP78373831;     qNcMVAiRQP78373831 = qNcMVAiRQP68207836;     qNcMVAiRQP68207836 = qNcMVAiRQP78266096;     qNcMVAiRQP78266096 = qNcMVAiRQP69547849;     qNcMVAiRQP69547849 = qNcMVAiRQP19890595;     qNcMVAiRQP19890595 = qNcMVAiRQP97907620;     qNcMVAiRQP97907620 = qNcMVAiRQP31345786;     qNcMVAiRQP31345786 = qNcMVAiRQP33019234;     qNcMVAiRQP33019234 = qNcMVAiRQP84529416;     qNcMVAiRQP84529416 = qNcMVAiRQP65241251;     qNcMVAiRQP65241251 = qNcMVAiRQP7350356;     qNcMVAiRQP7350356 = qNcMVAiRQP65191892;     qNcMVAiRQP65191892 = qNcMVAiRQP45233077;     qNcMVAiRQP45233077 = qNcMVAiRQP11767864;     qNcMVAiRQP11767864 = qNcMVAiRQP17963412;     qNcMVAiRQP17963412 = qNcMVAiRQP81850730;     qNcMVAiRQP81850730 = qNcMVAiRQP69445766;     qNcMVAiRQP69445766 = qNcMVAiRQP36000400;     qNcMVAiRQP36000400 = qNcMVAiRQP22465095;     qNcMVAiRQP22465095 = qNcMVAiRQP40397772;     qNcMVAiRQP40397772 = qNcMVAiRQP16093346;     qNcMVAiRQP16093346 = qNcMVAiRQP32970807;     qNcMVAiRQP32970807 = qNcMVAiRQP67677211;     qNcMVAiRQP67677211 = qNcMVAiRQP9687303;     qNcMVAiRQP9687303 = qNcMVAiRQP85500710;     qNcMVAiRQP85500710 = qNcMVAiRQP9770874;     qNcMVAiRQP9770874 = qNcMVAiRQP50958809;     qNcMVAiRQP50958809 = qNcMVAiRQP70777286;     qNcMVAiRQP70777286 = qNcMVAiRQP76127958;     qNcMVAiRQP76127958 = qNcMVAiRQP85629836;     qNcMVAiRQP85629836 = qNcMVAiRQP73506281;     qNcMVAiRQP73506281 = qNcMVAiRQP82019998;     qNcMVAiRQP82019998 = qNcMVAiRQP90159489;     qNcMVAiRQP90159489 = qNcMVAiRQP42892873;     qNcMVAiRQP42892873 = qNcMVAiRQP70436428;     qNcMVAiRQP70436428 = qNcMVAiRQP39522749;     qNcMVAiRQP39522749 = qNcMVAiRQP63975600;     qNcMVAiRQP63975600 = qNcMVAiRQP15459342;     qNcMVAiRQP15459342 = qNcMVAiRQP13193627;     qNcMVAiRQP13193627 = qNcMVAiRQP40993444;     qNcMVAiRQP40993444 = qNcMVAiRQP50372628;     qNcMVAiRQP50372628 = qNcMVAiRQP50347289;     qNcMVAiRQP50347289 = qNcMVAiRQP47981432;     qNcMVAiRQP47981432 = qNcMVAiRQP37264625;     qNcMVAiRQP37264625 = qNcMVAiRQP30654242;     qNcMVAiRQP30654242 = qNcMVAiRQP4488218;     qNcMVAiRQP4488218 = qNcMVAiRQP12731973;     qNcMVAiRQP12731973 = qNcMVAiRQP42152766;     qNcMVAiRQP42152766 = qNcMVAiRQP70260813;     qNcMVAiRQP70260813 = qNcMVAiRQP36480618;     qNcMVAiRQP36480618 = qNcMVAiRQP36994013;     qNcMVAiRQP36994013 = qNcMVAiRQP5656428;     qNcMVAiRQP5656428 = qNcMVAiRQP66686632;     qNcMVAiRQP66686632 = qNcMVAiRQP30765343;     qNcMVAiRQP30765343 = qNcMVAiRQP98413188;     qNcMVAiRQP98413188 = qNcMVAiRQP45403024;     qNcMVAiRQP45403024 = qNcMVAiRQP530626;     qNcMVAiRQP530626 = qNcMVAiRQP68578793;     qNcMVAiRQP68578793 = qNcMVAiRQP84047139;     qNcMVAiRQP84047139 = qNcMVAiRQP10119722;     qNcMVAiRQP10119722 = qNcMVAiRQP46948812;     qNcMVAiRQP46948812 = qNcMVAiRQP60568499;     qNcMVAiRQP60568499 = qNcMVAiRQP56891276;     qNcMVAiRQP56891276 = qNcMVAiRQP98899580;     qNcMVAiRQP98899580 = qNcMVAiRQP91734970;     qNcMVAiRQP91734970 = qNcMVAiRQP25330357;     qNcMVAiRQP25330357 = qNcMVAiRQP75032402;     qNcMVAiRQP75032402 = qNcMVAiRQP2340204;     qNcMVAiRQP2340204 = qNcMVAiRQP47691900;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void aSfmvTmjcg76181437() {     double EZfYXguVSb57007166 = -447885238;    double EZfYXguVSb10603743 = -153687210;    double EZfYXguVSb87888003 = -517014178;    double EZfYXguVSb62669460 = -597813322;    double EZfYXguVSb99064750 = -725640651;    double EZfYXguVSb88002668 = -662680704;    double EZfYXguVSb65723686 = -908972302;    double EZfYXguVSb4299266 = -473752523;    double EZfYXguVSb63980382 = -445177540;    double EZfYXguVSb29947061 = -486257221;    double EZfYXguVSb94301391 = -321877402;    double EZfYXguVSb60048009 = -746232399;    double EZfYXguVSb3512301 = -617994223;    double EZfYXguVSb74330337 = -882187636;    double EZfYXguVSb283229 = -845849201;    double EZfYXguVSb38054745 = -591402733;    double EZfYXguVSb82711831 = -492591034;    double EZfYXguVSb93911054 = 16291074;    double EZfYXguVSb65379455 = -784973806;    double EZfYXguVSb95706195 = -425372226;    double EZfYXguVSb91185227 = -836423405;    double EZfYXguVSb62213509 = -547528887;    double EZfYXguVSb5741377 = -185615642;    double EZfYXguVSb17171678 = -567796234;    double EZfYXguVSb16983172 = -973598826;    double EZfYXguVSb54132042 = 34601317;    double EZfYXguVSb52089615 = -774397892;    double EZfYXguVSb77534254 = -519291310;    double EZfYXguVSb8773735 = -86403297;    double EZfYXguVSb1932676 = -266184197;    double EZfYXguVSb41161493 = -109825615;    double EZfYXguVSb91765897 = -272608566;    double EZfYXguVSb28233161 = -487077045;    double EZfYXguVSb57236784 = -369250432;    double EZfYXguVSb64916371 = -67377959;    double EZfYXguVSb1372744 = -406203800;    double EZfYXguVSb57358202 = -396539506;    double EZfYXguVSb53944419 = -939511893;    double EZfYXguVSb97571486 = -139869587;    double EZfYXguVSb9119132 = -869820714;    double EZfYXguVSb8592551 = -689014225;    double EZfYXguVSb52892907 = -561933641;    double EZfYXguVSb29067361 = -557330250;    double EZfYXguVSb23948793 = -719096458;    double EZfYXguVSb81183151 = -906772739;    double EZfYXguVSb82007099 = -192153447;    double EZfYXguVSb23213043 = -428945126;    double EZfYXguVSb53321768 = 73027071;    double EZfYXguVSb35472910 = -575124240;    double EZfYXguVSb5638302 = -603330411;    double EZfYXguVSb59432804 = -182974668;    double EZfYXguVSb4614814 = -285249937;    double EZfYXguVSb4101004 = -477810002;    double EZfYXguVSb37552051 = -87832304;    double EZfYXguVSb84996209 = -298452367;    double EZfYXguVSb94793656 = -900356352;    double EZfYXguVSb4862367 = -968071568;    double EZfYXguVSb70716325 = -949217944;    double EZfYXguVSb45686288 = -624214496;    double EZfYXguVSb44932708 = -660241968;    double EZfYXguVSb35913053 = -888282812;    double EZfYXguVSb88189432 = -289680993;    double EZfYXguVSb95525530 = -287349227;    double EZfYXguVSb62047707 = -78993344;    double EZfYXguVSb88785568 = -276431607;    double EZfYXguVSb2535494 = 50731164;    double EZfYXguVSb31814848 = -159155355;    double EZfYXguVSb46275516 = -148743791;    double EZfYXguVSb9413966 = -714809678;    double EZfYXguVSb98910484 = -339645402;    double EZfYXguVSb80696542 = -94863228;    double EZfYXguVSb28767413 = -553079142;    double EZfYXguVSb96339568 = -843839339;    double EZfYXguVSb56260324 = -915153093;    double EZfYXguVSb87113645 = -736358001;    double EZfYXguVSb38292321 = -174489765;    double EZfYXguVSb33146148 = -990198637;    double EZfYXguVSb81792584 = -466519184;    double EZfYXguVSb35988527 = -661023496;    double EZfYXguVSb34976073 = -681445380;    double EZfYXguVSb30918999 = -536453558;    double EZfYXguVSb98767847 = -747424964;    double EZfYXguVSb42061344 = -944167071;    double EZfYXguVSb3135433 = -483072887;    double EZfYXguVSb42499871 = 16790471;    double EZfYXguVSb36546680 = -824575679;    double EZfYXguVSb87664894 = -794798565;    double EZfYXguVSb90681110 = -299244741;    double EZfYXguVSb72240575 = 29201934;    double EZfYXguVSb70122714 = -167021608;    double EZfYXguVSb96510377 = -438132232;    double EZfYXguVSb86641877 = -447321562;    double EZfYXguVSb8258131 = -215297397;    double EZfYXguVSb52638778 = -479627619;    double EZfYXguVSb73206078 = -981537902;    double EZfYXguVSb20403118 = -299333233;    double EZfYXguVSb57367376 = -174584415;    double EZfYXguVSb67019654 = -378336906;    double EZfYXguVSb35163225 = -342664852;    double EZfYXguVSb78647657 = -447885238;     EZfYXguVSb57007166 = EZfYXguVSb10603743;     EZfYXguVSb10603743 = EZfYXguVSb87888003;     EZfYXguVSb87888003 = EZfYXguVSb62669460;     EZfYXguVSb62669460 = EZfYXguVSb99064750;     EZfYXguVSb99064750 = EZfYXguVSb88002668;     EZfYXguVSb88002668 = EZfYXguVSb65723686;     EZfYXguVSb65723686 = EZfYXguVSb4299266;     EZfYXguVSb4299266 = EZfYXguVSb63980382;     EZfYXguVSb63980382 = EZfYXguVSb29947061;     EZfYXguVSb29947061 = EZfYXguVSb94301391;     EZfYXguVSb94301391 = EZfYXguVSb60048009;     EZfYXguVSb60048009 = EZfYXguVSb3512301;     EZfYXguVSb3512301 = EZfYXguVSb74330337;     EZfYXguVSb74330337 = EZfYXguVSb283229;     EZfYXguVSb283229 = EZfYXguVSb38054745;     EZfYXguVSb38054745 = EZfYXguVSb82711831;     EZfYXguVSb82711831 = EZfYXguVSb93911054;     EZfYXguVSb93911054 = EZfYXguVSb65379455;     EZfYXguVSb65379455 = EZfYXguVSb95706195;     EZfYXguVSb95706195 = EZfYXguVSb91185227;     EZfYXguVSb91185227 = EZfYXguVSb62213509;     EZfYXguVSb62213509 = EZfYXguVSb5741377;     EZfYXguVSb5741377 = EZfYXguVSb17171678;     EZfYXguVSb17171678 = EZfYXguVSb16983172;     EZfYXguVSb16983172 = EZfYXguVSb54132042;     EZfYXguVSb54132042 = EZfYXguVSb52089615;     EZfYXguVSb52089615 = EZfYXguVSb77534254;     EZfYXguVSb77534254 = EZfYXguVSb8773735;     EZfYXguVSb8773735 = EZfYXguVSb1932676;     EZfYXguVSb1932676 = EZfYXguVSb41161493;     EZfYXguVSb41161493 = EZfYXguVSb91765897;     EZfYXguVSb91765897 = EZfYXguVSb28233161;     EZfYXguVSb28233161 = EZfYXguVSb57236784;     EZfYXguVSb57236784 = EZfYXguVSb64916371;     EZfYXguVSb64916371 = EZfYXguVSb1372744;     EZfYXguVSb1372744 = EZfYXguVSb57358202;     EZfYXguVSb57358202 = EZfYXguVSb53944419;     EZfYXguVSb53944419 = EZfYXguVSb97571486;     EZfYXguVSb97571486 = EZfYXguVSb9119132;     EZfYXguVSb9119132 = EZfYXguVSb8592551;     EZfYXguVSb8592551 = EZfYXguVSb52892907;     EZfYXguVSb52892907 = EZfYXguVSb29067361;     EZfYXguVSb29067361 = EZfYXguVSb23948793;     EZfYXguVSb23948793 = EZfYXguVSb81183151;     EZfYXguVSb81183151 = EZfYXguVSb82007099;     EZfYXguVSb82007099 = EZfYXguVSb23213043;     EZfYXguVSb23213043 = EZfYXguVSb53321768;     EZfYXguVSb53321768 = EZfYXguVSb35472910;     EZfYXguVSb35472910 = EZfYXguVSb5638302;     EZfYXguVSb5638302 = EZfYXguVSb59432804;     EZfYXguVSb59432804 = EZfYXguVSb4614814;     EZfYXguVSb4614814 = EZfYXguVSb4101004;     EZfYXguVSb4101004 = EZfYXguVSb37552051;     EZfYXguVSb37552051 = EZfYXguVSb84996209;     EZfYXguVSb84996209 = EZfYXguVSb94793656;     EZfYXguVSb94793656 = EZfYXguVSb4862367;     EZfYXguVSb4862367 = EZfYXguVSb70716325;     EZfYXguVSb70716325 = EZfYXguVSb45686288;     EZfYXguVSb45686288 = EZfYXguVSb44932708;     EZfYXguVSb44932708 = EZfYXguVSb35913053;     EZfYXguVSb35913053 = EZfYXguVSb88189432;     EZfYXguVSb88189432 = EZfYXguVSb95525530;     EZfYXguVSb95525530 = EZfYXguVSb62047707;     EZfYXguVSb62047707 = EZfYXguVSb88785568;     EZfYXguVSb88785568 = EZfYXguVSb2535494;     EZfYXguVSb2535494 = EZfYXguVSb31814848;     EZfYXguVSb31814848 = EZfYXguVSb46275516;     EZfYXguVSb46275516 = EZfYXguVSb9413966;     EZfYXguVSb9413966 = EZfYXguVSb98910484;     EZfYXguVSb98910484 = EZfYXguVSb80696542;     EZfYXguVSb80696542 = EZfYXguVSb28767413;     EZfYXguVSb28767413 = EZfYXguVSb96339568;     EZfYXguVSb96339568 = EZfYXguVSb56260324;     EZfYXguVSb56260324 = EZfYXguVSb87113645;     EZfYXguVSb87113645 = EZfYXguVSb38292321;     EZfYXguVSb38292321 = EZfYXguVSb33146148;     EZfYXguVSb33146148 = EZfYXguVSb81792584;     EZfYXguVSb81792584 = EZfYXguVSb35988527;     EZfYXguVSb35988527 = EZfYXguVSb34976073;     EZfYXguVSb34976073 = EZfYXguVSb30918999;     EZfYXguVSb30918999 = EZfYXguVSb98767847;     EZfYXguVSb98767847 = EZfYXguVSb42061344;     EZfYXguVSb42061344 = EZfYXguVSb3135433;     EZfYXguVSb3135433 = EZfYXguVSb42499871;     EZfYXguVSb42499871 = EZfYXguVSb36546680;     EZfYXguVSb36546680 = EZfYXguVSb87664894;     EZfYXguVSb87664894 = EZfYXguVSb90681110;     EZfYXguVSb90681110 = EZfYXguVSb72240575;     EZfYXguVSb72240575 = EZfYXguVSb70122714;     EZfYXguVSb70122714 = EZfYXguVSb96510377;     EZfYXguVSb96510377 = EZfYXguVSb86641877;     EZfYXguVSb86641877 = EZfYXguVSb8258131;     EZfYXguVSb8258131 = EZfYXguVSb52638778;     EZfYXguVSb52638778 = EZfYXguVSb73206078;     EZfYXguVSb73206078 = EZfYXguVSb20403118;     EZfYXguVSb20403118 = EZfYXguVSb57367376;     EZfYXguVSb57367376 = EZfYXguVSb67019654;     EZfYXguVSb67019654 = EZfYXguVSb35163225;     EZfYXguVSb35163225 = EZfYXguVSb78647657;     EZfYXguVSb78647657 = EZfYXguVSb57007166;}
// Junk Finished
