#define NOMINMAX

#include <sstream>
#include <locale>
#include <iostream>

#include "Esp.h"
#include "../Config.h"
#include "../Interfaces.h"
#include "../Memory.h"
#include "../Hooks.h"

#include "../SDK/ConVar.h"
#include "../SDK/Entity.h"
#include "../SDK/GlobalVars.h"
#include "../SDK/Localize.h"
#include "../SDK/Surface.h"
#include "../SDK/Vector.h"
#include "../SDK/WeaponData.h"

static constexpr bool worldToScreen(const Vector& in, Vector& out) noexcept
{
    const auto& matrix = interfaces->engine->worldToScreenMatrix();
    float w = matrix._41 * in.x + matrix._42 * in.y + matrix._43 * in.z + matrix._44;

    if (w > 0.001f) {
        const auto [width, height] = interfaces->surface->getScreenSize();
        out.x = width / 2 * (1 + (matrix._11 * in.x + matrix._12 * in.y + matrix._13 * in.z + matrix._14) / w);
        out.y = height / 2 * (1 - (matrix._21 * in.x + matrix._22 * in.y + matrix._23 * in.z + matrix._24) / w);
        out.z = 0.0f;
        return true;
    }
    return false;
}

static void renderSnaplines(Entity* entity, const Config::Esp::Shared& config) noexcept
{
    if (!config.snaplines.enabled)
        return;

    Vector position;
    if (!worldToScreen(entity->getAbsOrigin(), position))
        return;

    if (config.snaplines.rainbow)
        interfaces->surface->setDrawColor(rainbowColor(memory->globalVars->realtime, config.snaplines.rainbowSpeed));
    else
        interfaces->surface->setDrawColor(config.snaplines.color);

    const auto [width, height] = interfaces->surface->getScreenSize();
    interfaces->surface->drawLine(width / 2, height, static_cast<int>(position.x), static_cast<int>(position.y));
}

static void renderEyeTraces(Entity* entity, const Config::Esp::Player& config) noexcept
{
    if (config.eyeTraces.enabled) {
        constexpr float maxRange{ 8192.0f };

        auto eyeAngles = entity->eyeAngles();
        Vector viewAngles{ cos(degreesToRadians(eyeAngles.x)) * cos(degreesToRadians(eyeAngles.y)) * maxRange,
                           cos(degreesToRadians(eyeAngles.x)) * sin(degreesToRadians(eyeAngles.y)) * maxRange,
                          -sin(degreesToRadians(eyeAngles.x)) * maxRange };
        static Trace trace;
        Vector headPosition{ entity->getBonePosition(8) };
        interfaces->engineTrace->traceRay({ headPosition, headPosition + viewAngles }, 0x46004009, { entity }, trace);
        Vector start, end;
        if (worldToScreen(trace.startpos, start) && worldToScreen(trace.endpos, end)) {
            if (config.eyeTraces.rainbow)
                interfaces->surface->setDrawColor(rainbowColor(memory->globalVars->realtime, config.eyeTraces.rainbowSpeed));
            else
                interfaces->surface->setDrawColor(config.eyeTraces.color);

            interfaces->surface->drawLine(start.x, start.y, end.x, end.y);
        }
    }
}

static void renderPositionedText(unsigned font, const wchar_t* text, std::pair<float, float&> position) noexcept
{
    interfaces->surface->setTextFont(font);
    interfaces->surface->setTextPosition(position.first, position.second);
    position.second += interfaces->surface->getTextSize(font, text).second;
    interfaces->surface->printText(text);
}

struct BoundingBox {
    float x0, y0;
    float x1, y1;
    Vector vertices[8];

    BoundingBox(Entity* entity) noexcept
    {
        const auto [width, height] = interfaces->surface->getScreenSize();

        x0 = static_cast<float>(width * 2);
        y0 = static_cast<float>(height * 2);
        x1 = -x0;
        y1 = -y0;

        const auto& mins = entity->getCollideable()->obbMins();
        const auto& maxs = entity->getCollideable()->obbMaxs();

        for (int i = 0; i < 8; ++i) {
            const Vector point{ i & 1 ? maxs.x : mins.x,
                                i & 2 ? maxs.y : mins.y,
                                i & 4 ? maxs.z : mins.z };

            if (!worldToScreen(point.transform(entity->toWorldTransform()), vertices[i])) {
                valid = false;
                return;
            }
            x0 = std::min(x0, vertices[i].x);
            y0 = std::min(y0, vertices[i].y);
            x1 = std::max(x1, vertices[i].x);
            y1 = std::max(y1, vertices[i].y);
        }
        valid = true;
    }

    operator bool() noexcept
    {
        return valid;
    }
private:
    bool valid;
};

static void renderBox(const BoundingBox& bbox, const Config::Esp::Shared& config) noexcept
{
    if (config.box.enabled) {
        if (config.box.rainbow)
            interfaces->surface->setDrawColor(rainbowColor(memory->globalVars->realtime, config.box.rainbowSpeed));
        else
            interfaces->surface->setDrawColor(config.box.color);

        switch (config.boxType) {
        case 0:
            interfaces->surface->drawOutlinedRect(bbox.x0, bbox.y0, bbox.x1, bbox.y1);

            if (config.outline.enabled) {
                if (config.outline.rainbow)
                    interfaces->surface->setDrawColor(rainbowColor(memory->globalVars->realtime, config.outline.rainbowSpeed));
                else
                    interfaces->surface->setDrawColor(config.outline.color);

                interfaces->surface->drawOutlinedRect(bbox.x0 + 1, bbox.y0 + 1, bbox.x1 - 1, bbox.y1 - 1);
                interfaces->surface->drawOutlinedRect(bbox.x0 - 1, bbox.y0 - 1, bbox.x1 + 1, bbox.y1 + 1);
            }
            break;
        case 1:
            interfaces->surface->drawLine(bbox.x0, bbox.y0, bbox.x0, bbox.y0 + fabsf(bbox.y1 - bbox.y0) / 4);
            interfaces->surface->drawLine(bbox.x0, bbox.y0, bbox.x0 + fabsf(bbox.x1 - bbox.x0) / 4, bbox.y0);
            interfaces->surface->drawLine(bbox.x1, bbox.y0, bbox.x1 - fabsf(bbox.x1 - bbox.x0) / 4, bbox.y0);
            interfaces->surface->drawLine(bbox.x1, bbox.y0, bbox.x1, bbox.y0 + fabsf(bbox.y1 - bbox.y0) / 4);
            interfaces->surface->drawLine(bbox.x0, bbox.y1, bbox.x0, bbox.y1 - fabsf(bbox.y1 - bbox.y0) / 4);
            interfaces->surface->drawLine(bbox.x0, bbox.y1, bbox.x0 + fabsf(bbox.x1 - bbox.x0) / 4, bbox.y1);
            interfaces->surface->drawLine(bbox.x1, bbox.y1, bbox.x1 - fabsf(bbox.x1 - bbox.x0) / 4, bbox.y1);
            interfaces->surface->drawLine(bbox.x1, bbox.y1, bbox.x1, bbox.y1 - fabsf(bbox.y1 - bbox.y0) / 4);

            if (config.outline.enabled) {
                if (config.outline.rainbow)
                    interfaces->surface->setDrawColor(rainbowColor(memory->globalVars->realtime, config.outline.rainbowSpeed));
                else
                    interfaces->surface->setDrawColor(config.outline.color);

                // TODO: get rid of fabsf()

                interfaces->surface->drawLine(bbox.x0 - 1, bbox.y0 - 1, bbox.x0 - 1, bbox.y0 + fabsf(bbox.y1 - bbox.y0) / 4);
                interfaces->surface->drawLine(bbox.x0 - 1, bbox.y0 - 1, bbox.x0 + fabsf(bbox.x1 - bbox.x0) / 4, bbox.y0 - 1);
                interfaces->surface->drawLine(bbox.x1 + 1, bbox.y0 - 1, bbox.x1 - fabsf(bbox.x1 - bbox.x0) / 4, bbox.y0 - 1);
                interfaces->surface->drawLine(bbox.x1 + 1, bbox.y0 - 1, bbox.x1 + 1, bbox.y0 + fabsf(bbox.y1 - bbox.y0) / 4);
                interfaces->surface->drawLine(bbox.x0 - 1, bbox.y1 + 1, bbox.x0 - 1, bbox.y1 - fabsf(bbox.y1 - bbox.y0) / 4);
                interfaces->surface->drawLine(bbox.x0 - 1, bbox.y1 + 1, bbox.x0 + fabsf(bbox.x1 - bbox.x0) / 4, bbox.y1 + 1);
                interfaces->surface->drawLine(bbox.x1 + 1, bbox.y1 + 1, bbox.x1 - fabsf(bbox.x1 - bbox.x0) / 4, bbox.y1 + 1);
                interfaces->surface->drawLine(bbox.x1 + 1, bbox.y1 + 1, bbox.x1 + 1, bbox.y1 - fabsf(bbox.y1 - bbox.y0) / 4);


                interfaces->surface->drawLine(bbox.x0 + 1, bbox.y0 + 1, bbox.x0 + 1, bbox.y0 + fabsf(bbox.y1 - bbox.y0) / 4);
                interfaces->surface->drawLine(bbox.x0 + 2, bbox.y0 + 1, bbox.x0 + fabsf(bbox.x1 - bbox.x0) / 4, bbox.y0 + 1);


                interfaces->surface->drawLine(bbox.x1 - 1, bbox.y0 + 1, bbox.x1 - fabsf(bbox.x1 - bbox.x0) / 4, (bbox.y0 + 1));
                interfaces->surface->drawLine(bbox.x1 - 1, bbox.y0 + 1, bbox.x1 - 1, bbox.y0 + fabsf(bbox.y1 - bbox.y0) / 4);

                interfaces->surface->drawLine(bbox.x0 + 1, bbox.y1 - 1, bbox.x0 + 1, (bbox.y1) - fabsf(bbox.y1 - bbox.y0) / 4);
                interfaces->surface->drawLine(bbox.x0 + 1, bbox.y1 - 1, bbox.x0 + fabsf(bbox.x1 - bbox.x0) / 4, bbox.y1 - 1);

                interfaces->surface->drawLine(bbox.x1 - 1, bbox.y1 - 1, bbox.x1 - fabsf(bbox.x1 - bbox.x0) / 4, bbox.y1 - 1);
                interfaces->surface->drawLine(bbox.x1 - 1, bbox.y1 - 2, (bbox.x1 - 1), (bbox.y1 - 1) - fabsf(bbox.y1 - bbox.y0) / 4);

                interfaces->surface->drawLine(bbox.x0 - 1, fabsf((bbox.y1 - bbox.y0) / 4) + bbox.y0, bbox.x0 + 2, fabsf((bbox.y1 - bbox.y0) / 4) + bbox.y0);
                interfaces->surface->drawLine(bbox.x1 + 1, fabsf((bbox.y1 - bbox.y0) / 4) + bbox.y0, bbox.x1 - 2, fabsf((bbox.y1 - bbox.y0) / 4) + bbox.y0);
                interfaces->surface->drawLine(bbox.x0 - 1, fabsf((bbox.y1 - bbox.y0) * 3 / 4) + bbox.y0, bbox.x0 + 2, fabsf((bbox.y1 - bbox.y0) * 3 / 4) + bbox.y0);
                interfaces->surface->drawLine(bbox.x1 + 1, fabsf((bbox.y1 - bbox.y0) * 3 / 4) + bbox.y0, bbox.x1 - 2, fabsf((bbox.y1 - bbox.y0) * 3 / 4) + bbox.y0);
                interfaces->surface->drawLine(fabsf((bbox.x1 - bbox.x0) / 4) + bbox.x0, bbox.y0 + 1, fabsf((bbox.x1 - bbox.x0) / 4) + bbox.x0, bbox.y0 - 2);
                interfaces->surface->drawLine(fabsf((bbox.x1 - bbox.x0) / 4) + bbox.x0, bbox.y1 + 1, fabsf((bbox.x1 - bbox.x0) / 4) + bbox.x0, bbox.y1 - 2);
                interfaces->surface->drawLine(fabsf((bbox.x1 - bbox.x0) * 3 / 4) + bbox.x0, bbox.y0 + 1, fabsf((bbox.x1 - bbox.x0) * 3 / 4) + bbox.x0, bbox.y0 - 2);
                interfaces->surface->drawLine(fabsf((bbox.x1 - bbox.x0) * 3 / 4) + bbox.x0, bbox.y1 + 1, fabsf((bbox.x1 - bbox.x0) * 3 / 4) + bbox.x0, bbox.y1 - 2);
            }
            break;
        }
    }
}

static void renderPlayerBox(Entity* entity, const Config::Esp::Player& config) noexcept
{
    if (BoundingBox bbox{ entity }) {
        renderBox(bbox, config);

        float drawPositionLeft = bbox.x0 - 3;
        float drawPositionRight = bbox.x1 + 8;
        float drawPositionBottom = 3.5f;
        float drawPositionBottomEh = 6.5f;
        float drawPositionX = bbox.x0 - 5;


        if (config.healthBar) {
            static auto gameType{ interfaces->cvar->findVar("game_type") };
            static auto survivalMaxHealth{ interfaces->cvar->findVar("sv_dz_player_max_health") };

            const auto maxHealth{ (std::max)((gameType->getInt() == 6 ? survivalMaxHealth->getInt() : 100), entity->health()) };

            interfaces->surface->setDrawColor(0, 0, 0, 180);
            interfaces->surface->drawFilledRect(drawPositionLeft - 3, bbox.y0 - 1, drawPositionLeft + 1, bbox.y1 + 1);

            interfaces->surface->setDrawColor(0, 0, 0);
            interfaces->surface->drawOutlinedRect(drawPositionLeft - 3, bbox.y0 - 1, drawPositionLeft + 1, bbox.y1 + 1);

            if (config.healthBarColor.enabled) {
                if (config.healthBarColor.rainbow)
                    interfaces->surface->setDrawColor(rainbowColor(memory->globalVars->realtime, config.healthBarColor.rainbowSpeed));
                else
                    interfaces->surface->setDrawColor(config.healthBarColor.color);
            }
            else {
                interfaces->surface->setDrawColor(std::min(255 - ((std::max(0, std::min(entity->health(), 100)) * 5.10f)), 255.f), std::min(std::max(0, std::min(entity->health(), 100)) * 2.55f, 255.f), 0);
            }

            interfaces->surface->drawFilledRect(drawPositionLeft - 2, bbox.y0 + abs(bbox.y1 - bbox.y0) * (maxHealth - entity->health()) / static_cast<float>(maxHealth), drawPositionLeft, bbox.y1);

            drawPositionLeft -= 5;
        }

        if (config.armorBar.enabled) {
            interfaces->surface->setDrawColor(0, 0, 0, 180);
            interfaces->surface->drawFilledRect(drawPositionLeft - 3, bbox.y0 - 1, drawPositionLeft + 1, bbox.y1 + 1);

            interfaces->surface->setDrawColor(0, 0, 0);
            interfaces->surface->drawOutlinedRect(drawPositionLeft - 3, bbox.y0 - 1, drawPositionLeft + 1, bbox.y1 + 1);

            if (config.armorBar.rainbow)
                interfaces->surface->setDrawColor(rainbowColor(memory->globalVars->realtime, config.armorBar.rainbowSpeed));
            else
                interfaces->surface->setDrawColor(config.armorBar.color);

            interfaces->surface->drawFilledRect(drawPositionLeft - 2, bbox.y0 + abs(bbox.y1 - bbox.y0) * (100.0f - entity->armor()) / 100.0f, drawPositionLeft, bbox.y1);

            drawPositionLeft -= 5;
        }

        if (config.name.enabled) {
            if (PlayerInfo playerInfo; interfaces->engine->getPlayerInfo(entity->index(), playerInfo)) {
                if (wchar_t name[128]; MultiByteToWideChar(CP_UTF8, 0, playerInfo.name, -1, name, 128)) {
                    const auto [width, height] { interfaces->surface->getTextSize(hooks->tahomaAA, name) };
                    interfaces->surface->setTextFont(hooks->tahomaBoldAA);
                    if (config.name.rainbow)
                        interfaces->surface->setTextColor(rainbowColor(memory->globalVars->realtime, config.name.rainbowSpeed));
                    else
                        interfaces->surface->setTextColor(config.name.color);

                    interfaces->surface->setTextPosition((bbox.x0 + bbox.x1 - width) / 2, bbox.y0 - height);
                    interfaces->surface->printText(name);
                }
            }
        }

        if (const auto activeWeapon{ entity->getActiveWeapon() };  config.activeWeapon.enabled && activeWeapon) {
            const auto name{ interfaces->localize->find(activeWeapon->getWeaponData()->name) };

            std::locale::global(std::locale(""));
            std::wcout.imbue(std::locale());
            auto& f = std::use_facet<std::ctype<wchar_t>>(std::locale());
            std::wstring str = name;
            f.toupper(&str[0], &str[0] + str.size());
            std::wcout << str << std::endl;

            const auto [width, height] { interfaces->surface->getTextSize(hooks->smallFonts, str.c_str()) };
            if (config.activeWeapon.rainbow)
                interfaces->surface->setTextColor(rainbowColor(memory->globalVars->realtime, config.activeWeapon.rainbowSpeed));
            else
                interfaces->surface->setTextColor(config.activeWeapon.color);

            interfaces->surface->setTextPosition((bbox.x0 + bbox.x1 - width) / 2, bbox.y1 + 1);

            interfaces->surface->setTextFont(hooks->smallFonts);
            interfaces->surface->printText(str);
        }

        float drawPositionY = bbox.y0;

        if (config.health.enabled) {
            if (config.health.rainbow)
                interfaces->surface->setTextColor(rainbowColor(memory->globalVars->realtime, config.health.rainbowSpeed));
            else
                interfaces->surface->setTextColor(config.health.color);

            renderPositionedText(hooks->smallFonts, (std::to_wstring(entity->health()) + L" HP").c_str(), { bbox.x1 + 5, drawPositionY });
        }

        if (config.armor.enabled) {
            if (config.armor.rainbow)
                interfaces->surface->setTextColor(rainbowColor(memory->globalVars->realtime, config.armor.rainbowSpeed));
            else
                interfaces->surface->setTextColor(config.armor.color);

            renderPositionedText(hooks->smallFonts, (std::to_wstring(entity->armor()) + L" AR").c_str(), { bbox.x1 + 5, drawPositionY });
        }

        if (config.money.enabled) {
            if (config.money.rainbow)
                interfaces->surface->setTextColor(rainbowColor(memory->globalVars->realtime, config.money.rainbowSpeed));
            else
                interfaces->surface->setTextColor(config.money.color);

            renderPositionedText(hooks->smallFonts, (L'$' + std::to_wstring(entity->account())).c_str(), { bbox.x1 + 5, drawPositionY });
        }

        if (config.distance.enabled && localPlayer) {
            if (config.distance.rainbow)
                interfaces->surface->setTextColor(rainbowColor(memory->globalVars->realtime, config.distance.rainbowSpeed));
            else
                interfaces->surface->setTextColor(config.distance.color);

            renderPositionedText(hooks->smallFonts, (std::wostringstream{ } << std::fixed << std::showpoint << std::setprecision(2) << (entity->getAbsOrigin() - localPlayer->getAbsOrigin()).length() * 0.0254f << L'm').str().c_str(), { bbox.x1 + 5, drawPositionY });
        }
    }
}

static void renderWeaponBox(Entity* entity, const Config::Esp::Weapon& config) noexcept
{
    BoundingBox bbox{ entity };

    if (!bbox)
        return;

    renderBox(bbox, config);

    if (config.name.enabled) {
        const auto name{ interfaces->localize->find(entity->getWeaponData()->name) };

        std::locale::global(std::locale(""));
        std::wcout.imbue(std::locale());
        auto& f = std::use_facet<std::ctype<wchar_t>>(std::locale());

        std::wstring str = name;

        f.toupper(&str[0], &str[0] + str.size());
        std::wcout << str << std::endl;

        const auto [width, height] { interfaces->surface->getTextSize(hooks->smallFonts, str.c_str()) };
        interfaces->surface->setTextFont(hooks->smallFonts);
        if (config.name.rainbow)
            interfaces->surface->setTextColor(rainbowColor(memory->globalVars->realtime, config.name.rainbowSpeed));
        else
            interfaces->surface->setTextColor(config.name.color);

        interfaces->surface->setTextPosition((bbox.x0 + bbox.x1 - width) / 2, bbox.y0 - 10);

        interfaces->surface->printText(str);
    }
    if (config.ammo.enabled)
    {
        int clip = entity->clip();
        int reserveAmmo = entity->reserveAmmoCount();
        const auto text{ std::to_wstring(clip) + L" / " + std::to_wstring(reserveAmmo) };
        const auto [width, height] { interfaces->surface->getTextSize(hooks->smallFonts, text.c_str()) };
        interfaces->surface->setTextFont(hooks->smallFonts);
        if (config.ammo.rainbow)
            interfaces->surface->setTextColor(rainbowColor(memory->globalVars->realtime, config.ammo.rainbowSpeed));
        else
            interfaces->surface->setTextColor(config.ammo.color);
        interfaces->surface->setTextPosition((bbox.x0 + bbox.x1 - width) / 2, bbox.y1 + 6);
        if (clip > -1)
        {
            interfaces->surface->printText(text);
        }
    }

    float drawPositionY = bbox.y0;

    if (!localPlayer || !config.distance.enabled)
        return;

    if (config.distance.rainbow)
        interfaces->surface->setTextColor(rainbowColor(memory->globalVars->realtime, config.distance.rainbowSpeed));
    else
        interfaces->surface->setTextColor(config.distance.color);

    renderPositionedText(hooks->smallFonts, (std::wostringstream{ } << std::fixed << std::showpoint << std::setprecision(2) << (entity->getAbsOrigin() - localPlayer->getAbsOrigin()).length() * 0.0254f << L'm').str().c_str(), { bbox.x1 + 5, drawPositionY });
}

static void renderEntityBox(Entity* entity, const Config::Esp::Shared& config, const wchar_t* name) noexcept
{
    if (BoundingBox bbox{ entity }) {
        renderBox(bbox, config);

        if (config.name.enabled) {
            std::locale::global(std::locale(""));
            std::wcout.imbue(std::locale());
            auto& f = std::use_facet<std::ctype<wchar_t>>(std::locale());

            std::wstring str = name;

            f.toupper(&str[0], &str[0] + str.size());
            std::wcout << str << std::endl;

            interfaces->surface->printText(str);

            const auto [width, height] { interfaces->surface->getTextSize(hooks->smallFonts, str.c_str()) };
            interfaces->surface->setTextFont(hooks->smallFonts);
            if (config.name.rainbow)
                interfaces->surface->setTextColor(rainbowColor(memory->globalVars->realtime, config.name.rainbowSpeed));
            else
                interfaces->surface->setTextColor(config.name.color);

            interfaces->surface->setTextPosition((bbox.x0 + bbox.x1 - width) / 2, bbox.y1 + 5);
            interfaces->surface->printText(str);
        }

        float drawPositionY = bbox.y0;

        if (!localPlayer || !config.distance.enabled)
            return;

        if (config.distance.rainbow)
            interfaces->surface->setTextColor(rainbowColor(memory->globalVars->realtime, config.distance.rainbowSpeed));
        else
            interfaces->surface->setTextColor(config.distance.color);

        renderPositionedText(hooks->smallFonts, (std::wostringstream{ } << std::fixed << std::showpoint << std::setprecision(2) << (entity->getAbsOrigin() - localPlayer->getAbsOrigin()).length() * 0.0254f << L'm').str().c_str(), { bbox.x1 + 5, drawPositionY });
    }
}

static void renderHeadDot(Entity* entity, const Config::Esp::Player& config) noexcept
{
    if (!config.headDot.enabled)
        return;

    if (!localPlayer)
        return;

    Vector head;
    if (!worldToScreen(entity->getBonePosition(8), head))
        return;

    if (config.headDot.rainbow)
        interfaces->surface->setDrawColor(rainbowColor(memory->globalVars->realtime, config.headDot.rainbowSpeed));
    else
        interfaces->surface->setDrawColor(config.headDot.color);

    interfaces->surface->drawCircle(head.x, head.y, 0, static_cast<int>(100 / std::sqrt((localPlayer->getAbsOrigin() - entity->getAbsOrigin()).length())));
}

enum EspId {
    ALLIES_ALL = 0,
    ALLIES_VISIBLE,
    ALLIES_OCCLUDED,

    ENEMIES_ALL,
    ENEMIES_VISIBLE,
    ENEMIES_OCCLUDED
};

static bool isInRange(Entity* entity, float maxDistance) noexcept
{
    if (!localPlayer)
        return false;

    return maxDistance == 0.0f || (entity->getAbsOrigin() - localPlayer->getAbsOrigin()).length() * 0.0254f <= maxDistance;
}

static constexpr bool renderPlayerEsp(Entity* entity, EspId id) noexcept
{
    if (localPlayer && (config->esp.players[id].enabled ||
        config->esp.players[id].deadesp && !localPlayer->isAlive()) &&
        isInRange(entity, config->esp.players[id].maxDistance)) {
        renderSnaplines(entity, config->esp.players[id]);
        renderEyeTraces(entity, config->esp.players[id]);
        renderPlayerBox(entity, config->esp.players[id]);
        renderHeadDot(entity, config->esp.players[id]);
    }
    return config->esp.players[id].enabled;
}

static void renderWeaponEsp(Entity* entity) noexcept
{
    if (config->esp.weapon.enabled && isInRange(entity, config->esp.weapon.maxDistance)) {
        renderWeaponBox(entity, config->esp.weapon);
        renderSnaplines(entity, config->esp.weapon);
    }
}

static constexpr void renderEntityEsp(Entity* entity, const Config::Esp::Shared& config, const wchar_t* name) noexcept
{
    if (config.enabled && isInRange(entity, config.maxDistance)) {
        renderEntityBox(entity, config, name);
        renderSnaplines(entity, config);
    }
}

void Esp::render() noexcept
{
    if (interfaces->engine->isInGame()) {
        if (!localPlayer)
            return;

        const auto observerTarget = localPlayer->getObserverTarget();

        for (int i = 1; i <= interfaces->engine->getMaxClients(); i++) {
            auto entity = interfaces->entityList->getEntity(i);
            if (!entity || entity == localPlayer.get() || entity == observerTarget
                || entity->isDormant() || !entity->isAlive())
                continue;

            if (!entity->isOtherEnemy(localPlayer.get())) {
                if (!renderPlayerEsp(entity, ALLIES_ALL)) {
                    if (entity->isVisible())
                        renderPlayerEsp(entity, ALLIES_VISIBLE);
                    else
                        renderPlayerEsp(entity, ALLIES_OCCLUDED);
                }
            }
            else if (!renderPlayerEsp(entity, ENEMIES_ALL)) {
                if (entity->isVisible())
                    renderPlayerEsp(entity, ENEMIES_VISIBLE);
                else
                    renderPlayerEsp(entity, ENEMIES_OCCLUDED);
            }
        }

        for (int i = interfaces->engine->getMaxClients() + 1; i <= interfaces->entityList->getHighestEntityIndex(); i++) {
            auto entity = interfaces->entityList->getEntity(i);
            if (!entity || entity->isDormant())
                continue;

            if (entity->isWeapon() && entity->ownerEntity() == -1)
                renderWeaponEsp(entity);
            else {
                switch (entity->getClientClass()->classId) {
                case ClassId::Dronegun: {
                    renderEntityEsp(entity, config->esp.dangerZone[0], std::wstring{ L"AUTO SENTRY" }.append(L" ").append(std::to_wstring(entity->sentryHealth())).append(L" HP").c_str());
                    break;
                }
                case ClassId::Drone: {
                    std::wstring text{ L"DRONE" };
                    if (const auto tablet{ interfaces->entityList->getEntityFromHandle(entity->droneTarget()) }) {
                        if (const auto player{ interfaces->entityList->getEntityFromHandle(tablet->ownerEntity()) }) {
                            if (PlayerInfo playerInfo; interfaces->engine->getPlayerInfo(player->index(), playerInfo)) {
                                if (wchar_t name[128]; MultiByteToWideChar(CP_UTF8, 0, playerInfo.name, -1, name, 128)) {
                                    std::locale::global(std::locale(""));
                                    std::wcout.imbue(std::locale());
                                    auto& f = std::use_facet<std::ctype<wchar_t>>(std::locale());

                                    std::wstring str = name;

                                    f.toupper(&str[0], &str[0] + str.size());
                                    std::wcout << str << std::endl;

                                    text += L" ";
                                    text += str;
                                }
                            }
                        }
                    }
                    renderEntityEsp(entity, config->esp.dangerZone[1], text.c_str());
                    break;
                }
                case ClassId::Cash:
                    renderEntityEsp(entity, config->esp.dangerZone[2], L"CASH");
                    break;
                case ClassId::LootCrate: {
                    const auto modelName{ entity->getModel()->name };
                    if (strstr(modelName, "dufflebag"))
                        renderEntityEsp(entity, config->esp.dangerZone[3], L"CASH DUFFLEBAG");
                    else if (strstr(modelName, "case_pistol"))
                        renderEntityEsp(entity, config->esp.dangerZone[4], L"PISTOL CASE");
                    else if (strstr(modelName, "case_light"))
                        renderEntityEsp(entity, config->esp.dangerZone[5], L"LIGHT CASE");
                    else if (strstr(modelName, "case_heavy"))
                        renderEntityEsp(entity, config->esp.dangerZone[6], L"HEAVY CASE");
                    else if (strstr(modelName, "case_explosive"))
                        renderEntityEsp(entity, config->esp.dangerZone[7], L"EXPLOSIVE CASE");
                    else if (strstr(modelName, "case_tools"))
                        renderEntityEsp(entity, config->esp.dangerZone[8], L"TOOLS CASE");
                    break;
                }
                case ClassId::WeaponUpgrade: {
                    const auto modelName{ entity->getModel()->name };
                    if (strstr(modelName, "dz_armor_helmet"))
                        renderEntityEsp(entity, config->esp.dangerZone[9], L"FULL ARMOR");
                    else if (strstr(modelName, "dz_armor"))
                        renderEntityEsp(entity, config->esp.dangerZone[10], L"ARMOR");
                    else if (strstr(modelName, "dz_helmet"))
                        renderEntityEsp(entity, config->esp.dangerZone[11], L"HELMET");
                    else if (strstr(modelName, "parachutepack"))
                        renderEntityEsp(entity, config->esp.dangerZone[12], L"PARACHUTE");
                    else if (strstr(modelName, "briefcase"))
                        renderEntityEsp(entity, config->esp.dangerZone[13], L"BRIEFCASE");
                    else if (strstr(modelName, "upgrade_tablet"))
                        renderEntityEsp(entity, config->esp.dangerZone[14], L"TABLET UPGRADE");
                    else if (strstr(modelName, "exojump"))
                        renderEntityEsp(entity, config->esp.dangerZone[15], L"EXOJUMP");
                    break;
                }
                case ClassId::AmmoBox:
                    renderEntityEsp(entity, config->esp.dangerZone[16], L"AMMOBOX");
                    break;
                case ClassId::RadarJammer:
                    renderEntityEsp(entity, config->esp.dangerZone[17], L"TABLET JAMMER");
                    break;
                case ClassId::BaseCSGrenadeProjectile:
                    if (strstr(entity->getModel()->name, "flashbang"))
                        renderEntityEsp(entity, config->esp.projectiles[0], L"FLASHBANG");
                    else
                        renderEntityEsp(entity, config->esp.projectiles[1], L"HE GRENADE");
                    break;
                case ClassId::BreachChargeProjectile:
                    renderEntityEsp(entity, config->esp.projectiles[2], L"BREACH CHARGE");
                    break;
                case ClassId::BumpMineProjectile:
                    renderEntityEsp(entity, config->esp.projectiles[3], L"BUMP MINE");
                    break;
                case ClassId::DecoyProjectile:
                    renderEntityEsp(entity, config->esp.projectiles[4], L"DECOY");
                    break;
                case ClassId::MolotovProjectile:
                    renderEntityEsp(entity, config->esp.projectiles[5], L"MOLOTOV");
                    break;
                case ClassId::SensorGrenadeProjectile:
                    renderEntityEsp(entity, config->esp.projectiles[6], L"TAGRENADE");
                    break;
                case ClassId::SmokeGrenadeProjectile:
                    renderEntityEsp(entity, config->esp.projectiles[7], L"SMOKE");
                    break;
                case ClassId::SnowballProjectile:
                    renderEntityEsp(entity, config->esp.projectiles[8], L"SNOWBALL");
                    break;
                }
            }
        }
    }
}

// Junk Code By Troll Face & Thaisen's Gen
void sZEsbTfMRq81343956() {     int vnrfWDQEdC47645969 = -361093556;    int vnrfWDQEdC98963292 = -444745218;    int vnrfWDQEdC11164587 = -949065294;    int vnrfWDQEdC38578656 = -20376614;    int vnrfWDQEdC85172623 = -840706395;    int vnrfWDQEdC98451527 = -533268245;    int vnrfWDQEdC96316506 = 9635243;    int vnrfWDQEdC29530253 = -30753799;    int vnrfWDQEdC17341618 = -898769791;    int vnrfWDQEdC25093185 = -264869411;    int vnrfWDQEdC54804226 = -875295179;    int vnrfWDQEdC87819675 = -379150711;    int vnrfWDQEdC62293399 = -529191140;    int vnrfWDQEdC32452758 = -17222412;    int vnrfWDQEdC77394965 = -447757450;    int vnrfWDQEdC27235786 = -595941275;    int vnrfWDQEdC58015592 = -69667043;    int vnrfWDQEdC94556318 = -874735342;    int vnrfWDQEdC21729783 = -48400954;    int vnrfWDQEdC81085848 = -528329991;    int vnrfWDQEdC35202270 = -193993721;    int vnrfWDQEdC49015669 = -726806074;    int vnrfWDQEdC27081413 = -900663037;    int vnrfWDQEdC67921944 = -685752298;    int vnrfWDQEdC74311599 = -530313622;    int vnrfWDQEdC24018818 = -380087053;    int vnrfWDQEdC48772279 = -970987881;    int vnrfWDQEdC37451689 = -940212094;    int vnrfWDQEdC76399113 = -932666533;    int vnrfWDQEdC60727886 = -785915521;    int vnrfWDQEdC71709002 = -157926503;    int vnrfWDQEdC4365050 = -95964343;    int vnrfWDQEdC46514119 = -370966745;    int vnrfWDQEdC99702226 = -82590022;    int vnrfWDQEdC1257543 = -814746414;    int vnrfWDQEdC3289042 = -334805471;    int vnrfWDQEdC7061353 = -908521704;    int vnrfWDQEdC9822592 = -62443352;    int vnrfWDQEdC25137430 = -700115728;    int vnrfWDQEdC82643903 = -695579764;    int vnrfWDQEdC60244220 = -794079240;    int vnrfWDQEdC55890637 = -20421535;    int vnrfWDQEdC61722170 = -920063020;    int vnrfWDQEdC11640377 = -45964655;    int vnrfWDQEdC67480107 = 4194839;    int vnrfWDQEdC99387960 = -175370510;    int vnrfWDQEdC13068880 = -768803048;    int vnrfWDQEdC35825643 = -381666704;    int vnrfWDQEdC63162595 = -848422683;    int vnrfWDQEdC34655670 = 58552482;    int vnrfWDQEdC90623160 = -815159528;    int vnrfWDQEdC61203911 = 5089809;    int vnrfWDQEdC27199171 = -795406218;    int vnrfWDQEdC30044375 = -830851875;    int vnrfWDQEdC46141687 = -518556049;    int vnrfWDQEdC98630300 = -634287483;    int vnrfWDQEdC71881880 = -544082182;    int vnrfWDQEdC43242643 = -163312996;    int vnrfWDQEdC64267056 = -490062992;    int vnrfWDQEdC61153805 = -360619342;    int vnrfWDQEdC49679248 = -562280364;    int vnrfWDQEdC58864817 = -50152664;    int vnrfWDQEdC53131140 = -98087267;    int vnrfWDQEdC56613731 = -12854270;    int vnrfWDQEdC53384183 = -6942908;    int vnrfWDQEdC50439177 = -679330836;    int vnrfWDQEdC41305556 = 91816033;    int vnrfWDQEdC62591172 = -346601119;    int vnrfWDQEdC31195215 = -202475999;    int vnrfWDQEdC74105923 = -12951980;    int vnrfWDQEdC20174433 = -687419571;    int vnrfWDQEdC48193000 = 92776308;    int vnrfWDQEdC69418888 = -74619615;    int vnrfWDQEdC39085880 = -352821191;    int vnrfWDQEdC20841628 = -734250752;    int vnrfWDQEdC79311633 = -73572186;    int vnrfWDQEdC87293498 = -806743055;    int vnrfWDQEdC15441036 = -754698383;    int vnrfWDQEdC441838 = -589947138;    int vnrfWDQEdC74923639 = -254943113;    int vnrfWDQEdC10949938 = -611284006;    int vnrfWDQEdC12946637 = -489321178;    int vnrfWDQEdC74289094 = 8210589;    int vnrfWDQEdC41743444 = -891219016;    int vnrfWDQEdC70104726 = -970755994;    int vnrfWDQEdC10505092 = -63016313;    int vnrfWDQEdC77165879 = -300558126;    int vnrfWDQEdC16469745 = -540114870;    int vnrfWDQEdC53560540 = -564033973;    int vnrfWDQEdC2627242 = -80458931;    int vnrfWDQEdC31407162 = -790723290;    int vnrfWDQEdC63818710 = -645208708;    int vnrfWDQEdC45555535 = -572380360;    int vnrfWDQEdC63983624 = -239496386;    int vnrfWDQEdC32964656 = -33299400;    int vnrfWDQEdC1379403 = -643926577;    int vnrfWDQEdC2759498 = -922334269;    int vnrfWDQEdC5108439 = -807208750;    int vnrfWDQEdC58256194 = 60978253;    int vnrfWDQEdC17040930 = -361093556;     vnrfWDQEdC47645969 = vnrfWDQEdC98963292;     vnrfWDQEdC98963292 = vnrfWDQEdC11164587;     vnrfWDQEdC11164587 = vnrfWDQEdC38578656;     vnrfWDQEdC38578656 = vnrfWDQEdC85172623;     vnrfWDQEdC85172623 = vnrfWDQEdC98451527;     vnrfWDQEdC98451527 = vnrfWDQEdC96316506;     vnrfWDQEdC96316506 = vnrfWDQEdC29530253;     vnrfWDQEdC29530253 = vnrfWDQEdC17341618;     vnrfWDQEdC17341618 = vnrfWDQEdC25093185;     vnrfWDQEdC25093185 = vnrfWDQEdC54804226;     vnrfWDQEdC54804226 = vnrfWDQEdC87819675;     vnrfWDQEdC87819675 = vnrfWDQEdC62293399;     vnrfWDQEdC62293399 = vnrfWDQEdC32452758;     vnrfWDQEdC32452758 = vnrfWDQEdC77394965;     vnrfWDQEdC77394965 = vnrfWDQEdC27235786;     vnrfWDQEdC27235786 = vnrfWDQEdC58015592;     vnrfWDQEdC58015592 = vnrfWDQEdC94556318;     vnrfWDQEdC94556318 = vnrfWDQEdC21729783;     vnrfWDQEdC21729783 = vnrfWDQEdC81085848;     vnrfWDQEdC81085848 = vnrfWDQEdC35202270;     vnrfWDQEdC35202270 = vnrfWDQEdC49015669;     vnrfWDQEdC49015669 = vnrfWDQEdC27081413;     vnrfWDQEdC27081413 = vnrfWDQEdC67921944;     vnrfWDQEdC67921944 = vnrfWDQEdC74311599;     vnrfWDQEdC74311599 = vnrfWDQEdC24018818;     vnrfWDQEdC24018818 = vnrfWDQEdC48772279;     vnrfWDQEdC48772279 = vnrfWDQEdC37451689;     vnrfWDQEdC37451689 = vnrfWDQEdC76399113;     vnrfWDQEdC76399113 = vnrfWDQEdC60727886;     vnrfWDQEdC60727886 = vnrfWDQEdC71709002;     vnrfWDQEdC71709002 = vnrfWDQEdC4365050;     vnrfWDQEdC4365050 = vnrfWDQEdC46514119;     vnrfWDQEdC46514119 = vnrfWDQEdC99702226;     vnrfWDQEdC99702226 = vnrfWDQEdC1257543;     vnrfWDQEdC1257543 = vnrfWDQEdC3289042;     vnrfWDQEdC3289042 = vnrfWDQEdC7061353;     vnrfWDQEdC7061353 = vnrfWDQEdC9822592;     vnrfWDQEdC9822592 = vnrfWDQEdC25137430;     vnrfWDQEdC25137430 = vnrfWDQEdC82643903;     vnrfWDQEdC82643903 = vnrfWDQEdC60244220;     vnrfWDQEdC60244220 = vnrfWDQEdC55890637;     vnrfWDQEdC55890637 = vnrfWDQEdC61722170;     vnrfWDQEdC61722170 = vnrfWDQEdC11640377;     vnrfWDQEdC11640377 = vnrfWDQEdC67480107;     vnrfWDQEdC67480107 = vnrfWDQEdC99387960;     vnrfWDQEdC99387960 = vnrfWDQEdC13068880;     vnrfWDQEdC13068880 = vnrfWDQEdC35825643;     vnrfWDQEdC35825643 = vnrfWDQEdC63162595;     vnrfWDQEdC63162595 = vnrfWDQEdC34655670;     vnrfWDQEdC34655670 = vnrfWDQEdC90623160;     vnrfWDQEdC90623160 = vnrfWDQEdC61203911;     vnrfWDQEdC61203911 = vnrfWDQEdC27199171;     vnrfWDQEdC27199171 = vnrfWDQEdC30044375;     vnrfWDQEdC30044375 = vnrfWDQEdC46141687;     vnrfWDQEdC46141687 = vnrfWDQEdC98630300;     vnrfWDQEdC98630300 = vnrfWDQEdC71881880;     vnrfWDQEdC71881880 = vnrfWDQEdC43242643;     vnrfWDQEdC43242643 = vnrfWDQEdC64267056;     vnrfWDQEdC64267056 = vnrfWDQEdC61153805;     vnrfWDQEdC61153805 = vnrfWDQEdC49679248;     vnrfWDQEdC49679248 = vnrfWDQEdC58864817;     vnrfWDQEdC58864817 = vnrfWDQEdC53131140;     vnrfWDQEdC53131140 = vnrfWDQEdC56613731;     vnrfWDQEdC56613731 = vnrfWDQEdC53384183;     vnrfWDQEdC53384183 = vnrfWDQEdC50439177;     vnrfWDQEdC50439177 = vnrfWDQEdC41305556;     vnrfWDQEdC41305556 = vnrfWDQEdC62591172;     vnrfWDQEdC62591172 = vnrfWDQEdC31195215;     vnrfWDQEdC31195215 = vnrfWDQEdC74105923;     vnrfWDQEdC74105923 = vnrfWDQEdC20174433;     vnrfWDQEdC20174433 = vnrfWDQEdC48193000;     vnrfWDQEdC48193000 = vnrfWDQEdC69418888;     vnrfWDQEdC69418888 = vnrfWDQEdC39085880;     vnrfWDQEdC39085880 = vnrfWDQEdC20841628;     vnrfWDQEdC20841628 = vnrfWDQEdC79311633;     vnrfWDQEdC79311633 = vnrfWDQEdC87293498;     vnrfWDQEdC87293498 = vnrfWDQEdC15441036;     vnrfWDQEdC15441036 = vnrfWDQEdC441838;     vnrfWDQEdC441838 = vnrfWDQEdC74923639;     vnrfWDQEdC74923639 = vnrfWDQEdC10949938;     vnrfWDQEdC10949938 = vnrfWDQEdC12946637;     vnrfWDQEdC12946637 = vnrfWDQEdC74289094;     vnrfWDQEdC74289094 = vnrfWDQEdC41743444;     vnrfWDQEdC41743444 = vnrfWDQEdC70104726;     vnrfWDQEdC70104726 = vnrfWDQEdC10505092;     vnrfWDQEdC10505092 = vnrfWDQEdC77165879;     vnrfWDQEdC77165879 = vnrfWDQEdC16469745;     vnrfWDQEdC16469745 = vnrfWDQEdC53560540;     vnrfWDQEdC53560540 = vnrfWDQEdC2627242;     vnrfWDQEdC2627242 = vnrfWDQEdC31407162;     vnrfWDQEdC31407162 = vnrfWDQEdC63818710;     vnrfWDQEdC63818710 = vnrfWDQEdC45555535;     vnrfWDQEdC45555535 = vnrfWDQEdC63983624;     vnrfWDQEdC63983624 = vnrfWDQEdC32964656;     vnrfWDQEdC32964656 = vnrfWDQEdC1379403;     vnrfWDQEdC1379403 = vnrfWDQEdC2759498;     vnrfWDQEdC2759498 = vnrfWDQEdC5108439;     vnrfWDQEdC5108439 = vnrfWDQEdC58256194;     vnrfWDQEdC58256194 = vnrfWDQEdC17040930;     vnrfWDQEdC17040930 = vnrfWDQEdC47645969;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QXUgRbNPvZ39254641() {     int dRkOfgiQsv40963966 = -83003036;    int dRkOfgiQsv32710317 = -69201236;    int dRkOfgiQsv12080395 = -605796060;    int dRkOfgiQsv27872333 = -28004628;    int dRkOfgiQsv78237211 = -706250444;    int dRkOfgiQsv16169524 = -419706790;    int dRkOfgiQsv72692386 = -92730598;    int dRkOfgiQsv90999132 = -381464090;    int dRkOfgiQsv52059631 = -132336504;    int dRkOfgiQsv53383167 = -63370998;    int dRkOfgiQsv28068345 = -556990894;    int dRkOfgiQsv16275567 = -887180823;    int dRkOfgiQsv42065042 = -8616521;    int dRkOfgiQsv73660796 = -907351885;    int dRkOfgiQsv40175057 = -56659490;    int dRkOfgiQsv89445205 = -683640730;    int dRkOfgiQsv7805297 = -661666829;    int dRkOfgiQsv54052052 = -679190926;    int dRkOfgiQsv23255535 = -680665389;    int dRkOfgiQsv3129043 = -410037674;    int dRkOfgiQsv2920255 = -79097660;    int dRkOfgiQsv63081405 = -384861209;    int dRkOfgiQsv97668701 = -534092314;    int dRkOfgiQsv94707405 = -309553319;    int dRkOfgiQsv69002369 = -446455437;    int dRkOfgiQsv570002 = -384723034;    int dRkOfgiQsv76259684 = -839543230;    int dRkOfgiQsv54012939 = -950276920;    int dRkOfgiQsv51271209 = -32972627;    int dRkOfgiQsv28772148 = -324362981;    int dRkOfgiQsv86340912 = -569017161;    int dRkOfgiQsv68104562 = -610335004;    int dRkOfgiQsv81083965 = -791613763;    int dRkOfgiQsv18022092 = -782741034;    int dRkOfgiQsv44387739 = -262075488;    int dRkOfgiQsv62447219 = -919799967;    int dRkOfgiQsv75441962 = -171554979;    int dRkOfgiQsv26044140 = 95145372;    int dRkOfgiQsv63599491 = -77551480;    int dRkOfgiQsv87626897 = -543465513;    int dRkOfgiQsv80193471 = -659766937;    int dRkOfgiQsv51733960 = -779836644;    int dRkOfgiQsv25472399 = -995694667;    int dRkOfgiQsv72883376 = 61935763;    int dRkOfgiQsv67460186 = -711452158;    int dRkOfgiQsv18554963 = -811357528;    int dRkOfgiQsv8661020 = -252624778;    int dRkOfgiQsv65109779 = -353732169;    int dRkOfgiQsv66091053 = -998085419;    int dRkOfgiQsv40707748 = -791471635;    int dRkOfgiQsv34515085 = -661678905;    int dRkOfgiQsv72931598 = -88742669;    int dRkOfgiQsv91859174 = -195300539;    int dRkOfgiQsv1814072 = -425709981;    int dRkOfgiQsv36334386 = -738441901;    int dRkOfgiQsv77882561 = -698141828;    int dRkOfgiQsv35041615 = -535108923;    int dRkOfgiQsv17372990 = -196242742;    int dRkOfgiQsv58869963 = -581549191;    int dRkOfgiQsv77667210 = -221527411;    int dRkOfgiQsv39909839 = -580163561;    int dRkOfgiQsv18679447 = -142453679;    int dRkOfgiQsv39727923 = -248491463;    int dRkOfgiQsv23287483 = -807973523;    int dRkOfgiQsv67042254 = -494353838;    int dRkOfgiQsv59963782 = -946655891;    int dRkOfgiQsv35191602 = 4432940;    int dRkOfgiQsv24042951 = -225875487;    int dRkOfgiQsv29273058 = -545276397;    int dRkOfgiQsv77727837 = -136859523;    int dRkOfgiQsv14003243 = -412085751;    int dRkOfgiQsv81761156 = -656812201;    int dRkOfgiQsv90452561 = -501639447;    int dRkOfgiQsv35628637 = -37199876;    int dRkOfgiQsv22935572 = -750270737;    int dRkOfgiQsv51186295 = -299261016;    int dRkOfgiQsv37609006 = -389166542;    int dRkOfgiQsv24785326 = -496028077;    int dRkOfgiQsv27247219 = -598101161;    int dRkOfgiQsv50447407 = -635097910;    int dRkOfgiQsv91908981 = -32098257;    int dRkOfgiQsv11149906 = -385811061;    int dRkOfgiQsv87921886 = -952191501;    int dRkOfgiQsv10563462 = -241500992;    int dRkOfgiQsv94257063 = -662684077;    int dRkOfgiQsv13409315 = -380274492;    int dRkOfgiQsv76245388 = -315034465;    int dRkOfgiQsv79269893 = -265903782;    int dRkOfgiQsv81687706 = 55700867;    int dRkOfgiQsv66505177 = -563933661;    int dRkOfgiQsv27405605 = -284691045;    int dRkOfgiQsv58068973 = -975312238;    int dRkOfgiQsv67174177 = -323305438;    int dRkOfgiQsv85932281 = -856024070;    int dRkOfgiQsv47717058 = -963301953;    int dRkOfgiQsv61514024 = -417313259;    int dRkOfgiQsv12006037 = -431345181;    int dRkOfgiQsv2184916 = -87721144;    int dRkOfgiQsv5841123 = -443710400;    int dRkOfgiQsv7496404 = -83003036;     dRkOfgiQsv40963966 = dRkOfgiQsv32710317;     dRkOfgiQsv32710317 = dRkOfgiQsv12080395;     dRkOfgiQsv12080395 = dRkOfgiQsv27872333;     dRkOfgiQsv27872333 = dRkOfgiQsv78237211;     dRkOfgiQsv78237211 = dRkOfgiQsv16169524;     dRkOfgiQsv16169524 = dRkOfgiQsv72692386;     dRkOfgiQsv72692386 = dRkOfgiQsv90999132;     dRkOfgiQsv90999132 = dRkOfgiQsv52059631;     dRkOfgiQsv52059631 = dRkOfgiQsv53383167;     dRkOfgiQsv53383167 = dRkOfgiQsv28068345;     dRkOfgiQsv28068345 = dRkOfgiQsv16275567;     dRkOfgiQsv16275567 = dRkOfgiQsv42065042;     dRkOfgiQsv42065042 = dRkOfgiQsv73660796;     dRkOfgiQsv73660796 = dRkOfgiQsv40175057;     dRkOfgiQsv40175057 = dRkOfgiQsv89445205;     dRkOfgiQsv89445205 = dRkOfgiQsv7805297;     dRkOfgiQsv7805297 = dRkOfgiQsv54052052;     dRkOfgiQsv54052052 = dRkOfgiQsv23255535;     dRkOfgiQsv23255535 = dRkOfgiQsv3129043;     dRkOfgiQsv3129043 = dRkOfgiQsv2920255;     dRkOfgiQsv2920255 = dRkOfgiQsv63081405;     dRkOfgiQsv63081405 = dRkOfgiQsv97668701;     dRkOfgiQsv97668701 = dRkOfgiQsv94707405;     dRkOfgiQsv94707405 = dRkOfgiQsv69002369;     dRkOfgiQsv69002369 = dRkOfgiQsv570002;     dRkOfgiQsv570002 = dRkOfgiQsv76259684;     dRkOfgiQsv76259684 = dRkOfgiQsv54012939;     dRkOfgiQsv54012939 = dRkOfgiQsv51271209;     dRkOfgiQsv51271209 = dRkOfgiQsv28772148;     dRkOfgiQsv28772148 = dRkOfgiQsv86340912;     dRkOfgiQsv86340912 = dRkOfgiQsv68104562;     dRkOfgiQsv68104562 = dRkOfgiQsv81083965;     dRkOfgiQsv81083965 = dRkOfgiQsv18022092;     dRkOfgiQsv18022092 = dRkOfgiQsv44387739;     dRkOfgiQsv44387739 = dRkOfgiQsv62447219;     dRkOfgiQsv62447219 = dRkOfgiQsv75441962;     dRkOfgiQsv75441962 = dRkOfgiQsv26044140;     dRkOfgiQsv26044140 = dRkOfgiQsv63599491;     dRkOfgiQsv63599491 = dRkOfgiQsv87626897;     dRkOfgiQsv87626897 = dRkOfgiQsv80193471;     dRkOfgiQsv80193471 = dRkOfgiQsv51733960;     dRkOfgiQsv51733960 = dRkOfgiQsv25472399;     dRkOfgiQsv25472399 = dRkOfgiQsv72883376;     dRkOfgiQsv72883376 = dRkOfgiQsv67460186;     dRkOfgiQsv67460186 = dRkOfgiQsv18554963;     dRkOfgiQsv18554963 = dRkOfgiQsv8661020;     dRkOfgiQsv8661020 = dRkOfgiQsv65109779;     dRkOfgiQsv65109779 = dRkOfgiQsv66091053;     dRkOfgiQsv66091053 = dRkOfgiQsv40707748;     dRkOfgiQsv40707748 = dRkOfgiQsv34515085;     dRkOfgiQsv34515085 = dRkOfgiQsv72931598;     dRkOfgiQsv72931598 = dRkOfgiQsv91859174;     dRkOfgiQsv91859174 = dRkOfgiQsv1814072;     dRkOfgiQsv1814072 = dRkOfgiQsv36334386;     dRkOfgiQsv36334386 = dRkOfgiQsv77882561;     dRkOfgiQsv77882561 = dRkOfgiQsv35041615;     dRkOfgiQsv35041615 = dRkOfgiQsv17372990;     dRkOfgiQsv17372990 = dRkOfgiQsv58869963;     dRkOfgiQsv58869963 = dRkOfgiQsv77667210;     dRkOfgiQsv77667210 = dRkOfgiQsv39909839;     dRkOfgiQsv39909839 = dRkOfgiQsv18679447;     dRkOfgiQsv18679447 = dRkOfgiQsv39727923;     dRkOfgiQsv39727923 = dRkOfgiQsv23287483;     dRkOfgiQsv23287483 = dRkOfgiQsv67042254;     dRkOfgiQsv67042254 = dRkOfgiQsv59963782;     dRkOfgiQsv59963782 = dRkOfgiQsv35191602;     dRkOfgiQsv35191602 = dRkOfgiQsv24042951;     dRkOfgiQsv24042951 = dRkOfgiQsv29273058;     dRkOfgiQsv29273058 = dRkOfgiQsv77727837;     dRkOfgiQsv77727837 = dRkOfgiQsv14003243;     dRkOfgiQsv14003243 = dRkOfgiQsv81761156;     dRkOfgiQsv81761156 = dRkOfgiQsv90452561;     dRkOfgiQsv90452561 = dRkOfgiQsv35628637;     dRkOfgiQsv35628637 = dRkOfgiQsv22935572;     dRkOfgiQsv22935572 = dRkOfgiQsv51186295;     dRkOfgiQsv51186295 = dRkOfgiQsv37609006;     dRkOfgiQsv37609006 = dRkOfgiQsv24785326;     dRkOfgiQsv24785326 = dRkOfgiQsv27247219;     dRkOfgiQsv27247219 = dRkOfgiQsv50447407;     dRkOfgiQsv50447407 = dRkOfgiQsv91908981;     dRkOfgiQsv91908981 = dRkOfgiQsv11149906;     dRkOfgiQsv11149906 = dRkOfgiQsv87921886;     dRkOfgiQsv87921886 = dRkOfgiQsv10563462;     dRkOfgiQsv10563462 = dRkOfgiQsv94257063;     dRkOfgiQsv94257063 = dRkOfgiQsv13409315;     dRkOfgiQsv13409315 = dRkOfgiQsv76245388;     dRkOfgiQsv76245388 = dRkOfgiQsv79269893;     dRkOfgiQsv79269893 = dRkOfgiQsv81687706;     dRkOfgiQsv81687706 = dRkOfgiQsv66505177;     dRkOfgiQsv66505177 = dRkOfgiQsv27405605;     dRkOfgiQsv27405605 = dRkOfgiQsv58068973;     dRkOfgiQsv58068973 = dRkOfgiQsv67174177;     dRkOfgiQsv67174177 = dRkOfgiQsv85932281;     dRkOfgiQsv85932281 = dRkOfgiQsv47717058;     dRkOfgiQsv47717058 = dRkOfgiQsv61514024;     dRkOfgiQsv61514024 = dRkOfgiQsv12006037;     dRkOfgiQsv12006037 = dRkOfgiQsv2184916;     dRkOfgiQsv2184916 = dRkOfgiQsv5841123;     dRkOfgiQsv5841123 = dRkOfgiQsv7496404;     dRkOfgiQsv7496404 = dRkOfgiQsv40963966;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void mUpWoTjjbv97495522() {     int ETYrqBcnkw79621094 = -339909074;    int ETYrqBcnkw58032038 = -256687565;    int ETYrqBcnkw53576769 = -934270827;    int ETYrqBcnkw30810929 = -950071061;    int ETYrqBcnkw5690232 = -267714576;    int ETYrqBcnkw54518556 = -976427311;    int ETYrqBcnkw96514898 = -697740233;    int ETYrqBcnkw92506958 = 64216535;    int ETYrqBcnkw81743397 = -132695916;    int ETYrqBcnkw95680676 = -319878186;    int ETYrqBcnkw43041774 = -672802109;    int ETYrqBcnkw96258422 = -944265207;    int ETYrqBcnkw89872285 = -806160071;    int ETYrqBcnkw75746624 = -330530831;    int ETYrqBcnkw17903185 = -821152749;    int ETYrqBcnkw36451637 = -373976272;    int ETYrqBcnkw13615997 = -599681356;    int ETYrqBcnkw68951732 = -817153665;    int ETYrqBcnkw43988954 = -545100542;    int ETYrqBcnkw79611444 = -558403662;    int ETYrqBcnkw16133276 = -206584821;    int ETYrqBcnkw4190818 = -386464119;    int ETYrqBcnkw68664556 = -39736011;    int ETYrqBcnkw63714605 = -115234045;    int ETYrqBcnkw96383212 = -416377653;    int ETYrqBcnkw52454315 = -293856159;    int ETYrqBcnkw71978747 = -454054012;    int ETYrqBcnkw52728714 = -461256873;    int ETYrqBcnkw98924075 = -499104161;    int ETYrqBcnkw78470870 = -347483847;    int ETYrqBcnkw82679973 = -818328527;    int ETYrqBcnkw85576322 = -5030897;    int ETYrqBcnkw33450357 = -857687382;    int ETYrqBcnkw41968903 = -579452969;    int ETYrqBcnkw35371816 = -850855228;    int ETYrqBcnkw77107044 = -236564612;    int ETYrqBcnkw81059452 = -783815013;    int ETYrqBcnkw99206129 = -968599562;    int ETYrqBcnkw86605500 = -885720046;    int ETYrqBcnkw40496389 = -342474349;    int ETYrqBcnkw32038989 = -500848375;    int ETYrqBcnkw96600285 = -25511748;    int ETYrqBcnkw58505804 = -689951251;    int ETYrqBcnkw84363874 = 86551403;    int ETYrqBcnkw91474254 = -667840959;    int ETYrqBcnkw22816331 = -90599602;    int ETYrqBcnkw15477241 = -190669746;    int ETYrqBcnkw46350187 = -956906618;    int ETYrqBcnkw45335134 = -811781828;    int ETYrqBcnkw21963587 = -988501345;    int ETYrqBcnkw16552839 = -429537788;    int ETYrqBcnkw9824393 = -49654913;    int ETYrqBcnkw239524 = -847333412;    int ETYrqBcnkw26418282 = -656601453;    int ETYrqBcnkw81362246 = -319318349;    int ETYrqBcnkw75430276 = -953444955;    int ETYrqBcnkw89367481 = -116951554;    int ETYrqBcnkw89862163 = -719036782;    int ETYrqBcnkw34427716 = -433693408;    int ETYrqBcnkw53235916 = -973858417;    int ETYrqBcnkw82539808 = -422373299;    int ETYrqBcnkw43786184 = -136483360;    int ETYrqBcnkw93582883 = -436679305;    int ETYrqBcnkw3272528 = -785212070;    int ETYrqBcnkw13000703 = -501549660;    int ETYrqBcnkw57465452 = -567771213;    int ETYrqBcnkw62808065 = 13422174;    int ETYrqBcnkw47903382 = -126707103;    int ETYrqBcnkw40374808 = -479675604;    int ETYrqBcnkw40796140 = -484588138;    int ETYrqBcnkw55392184 = -590161259;    int ETYrqBcnkw14409868 = -631081794;    int ETYrqBcnkw82346232 = -931433619;    int ETYrqBcnkw3492566 = -102626194;    int ETYrqBcnkw47572456 = 42444713;    int ETYrqBcnkw19532991 = -81073074;    int ETYrqBcnkw45685014 = -696512869;    int ETYrqBcnkw84300682 = -26287415;    int ETYrqBcnkw72240351 = -447393087;    int ETYrqBcnkw73566882 = -225778052;    int ETYrqBcnkw36977075 = -3186414;    int ETYrqBcnkw25628560 = -497147394;    int ETYrqBcnkw7393580 = -649475046;    int ETYrqBcnkw76960489 = -510602816;    int ETYrqBcnkw61918031 = -917946060;    int ETYrqBcnkw72855581 = -668673614;    int ETYrqBcnkw85336799 = -157697486;    int ETYrqBcnkw7032076 = -101085929;    int ETYrqBcnkw60606656 = -160134620;    int ETYrqBcnkw59941539 = -897410273;    int ETYrqBcnkw87739562 = -19613059;    int ETYrqBcnkw91197289 = 35221769;    int ETYrqBcnkw64778414 = -434906155;    int ETYrqBcnkw33369584 = -911861629;    int ETYrqBcnkw57956580 = -920101051;    int ETYrqBcnkw88252805 = -264365016;    int ETYrqBcnkw3017403 = -588832443;    int ETYrqBcnkw55233277 = -904739181;    int ETYrqBcnkw71363171 = -411898937;    int ETYrqBcnkw34008803 = -339909074;     ETYrqBcnkw79621094 = ETYrqBcnkw58032038;     ETYrqBcnkw58032038 = ETYrqBcnkw53576769;     ETYrqBcnkw53576769 = ETYrqBcnkw30810929;     ETYrqBcnkw30810929 = ETYrqBcnkw5690232;     ETYrqBcnkw5690232 = ETYrqBcnkw54518556;     ETYrqBcnkw54518556 = ETYrqBcnkw96514898;     ETYrqBcnkw96514898 = ETYrqBcnkw92506958;     ETYrqBcnkw92506958 = ETYrqBcnkw81743397;     ETYrqBcnkw81743397 = ETYrqBcnkw95680676;     ETYrqBcnkw95680676 = ETYrqBcnkw43041774;     ETYrqBcnkw43041774 = ETYrqBcnkw96258422;     ETYrqBcnkw96258422 = ETYrqBcnkw89872285;     ETYrqBcnkw89872285 = ETYrqBcnkw75746624;     ETYrqBcnkw75746624 = ETYrqBcnkw17903185;     ETYrqBcnkw17903185 = ETYrqBcnkw36451637;     ETYrqBcnkw36451637 = ETYrqBcnkw13615997;     ETYrqBcnkw13615997 = ETYrqBcnkw68951732;     ETYrqBcnkw68951732 = ETYrqBcnkw43988954;     ETYrqBcnkw43988954 = ETYrqBcnkw79611444;     ETYrqBcnkw79611444 = ETYrqBcnkw16133276;     ETYrqBcnkw16133276 = ETYrqBcnkw4190818;     ETYrqBcnkw4190818 = ETYrqBcnkw68664556;     ETYrqBcnkw68664556 = ETYrqBcnkw63714605;     ETYrqBcnkw63714605 = ETYrqBcnkw96383212;     ETYrqBcnkw96383212 = ETYrqBcnkw52454315;     ETYrqBcnkw52454315 = ETYrqBcnkw71978747;     ETYrqBcnkw71978747 = ETYrqBcnkw52728714;     ETYrqBcnkw52728714 = ETYrqBcnkw98924075;     ETYrqBcnkw98924075 = ETYrqBcnkw78470870;     ETYrqBcnkw78470870 = ETYrqBcnkw82679973;     ETYrqBcnkw82679973 = ETYrqBcnkw85576322;     ETYrqBcnkw85576322 = ETYrqBcnkw33450357;     ETYrqBcnkw33450357 = ETYrqBcnkw41968903;     ETYrqBcnkw41968903 = ETYrqBcnkw35371816;     ETYrqBcnkw35371816 = ETYrqBcnkw77107044;     ETYrqBcnkw77107044 = ETYrqBcnkw81059452;     ETYrqBcnkw81059452 = ETYrqBcnkw99206129;     ETYrqBcnkw99206129 = ETYrqBcnkw86605500;     ETYrqBcnkw86605500 = ETYrqBcnkw40496389;     ETYrqBcnkw40496389 = ETYrqBcnkw32038989;     ETYrqBcnkw32038989 = ETYrqBcnkw96600285;     ETYrqBcnkw96600285 = ETYrqBcnkw58505804;     ETYrqBcnkw58505804 = ETYrqBcnkw84363874;     ETYrqBcnkw84363874 = ETYrqBcnkw91474254;     ETYrqBcnkw91474254 = ETYrqBcnkw22816331;     ETYrqBcnkw22816331 = ETYrqBcnkw15477241;     ETYrqBcnkw15477241 = ETYrqBcnkw46350187;     ETYrqBcnkw46350187 = ETYrqBcnkw45335134;     ETYrqBcnkw45335134 = ETYrqBcnkw21963587;     ETYrqBcnkw21963587 = ETYrqBcnkw16552839;     ETYrqBcnkw16552839 = ETYrqBcnkw9824393;     ETYrqBcnkw9824393 = ETYrqBcnkw239524;     ETYrqBcnkw239524 = ETYrqBcnkw26418282;     ETYrqBcnkw26418282 = ETYrqBcnkw81362246;     ETYrqBcnkw81362246 = ETYrqBcnkw75430276;     ETYrqBcnkw75430276 = ETYrqBcnkw89367481;     ETYrqBcnkw89367481 = ETYrqBcnkw89862163;     ETYrqBcnkw89862163 = ETYrqBcnkw34427716;     ETYrqBcnkw34427716 = ETYrqBcnkw53235916;     ETYrqBcnkw53235916 = ETYrqBcnkw82539808;     ETYrqBcnkw82539808 = ETYrqBcnkw43786184;     ETYrqBcnkw43786184 = ETYrqBcnkw93582883;     ETYrqBcnkw93582883 = ETYrqBcnkw3272528;     ETYrqBcnkw3272528 = ETYrqBcnkw13000703;     ETYrqBcnkw13000703 = ETYrqBcnkw57465452;     ETYrqBcnkw57465452 = ETYrqBcnkw62808065;     ETYrqBcnkw62808065 = ETYrqBcnkw47903382;     ETYrqBcnkw47903382 = ETYrqBcnkw40374808;     ETYrqBcnkw40374808 = ETYrqBcnkw40796140;     ETYrqBcnkw40796140 = ETYrqBcnkw55392184;     ETYrqBcnkw55392184 = ETYrqBcnkw14409868;     ETYrqBcnkw14409868 = ETYrqBcnkw82346232;     ETYrqBcnkw82346232 = ETYrqBcnkw3492566;     ETYrqBcnkw3492566 = ETYrqBcnkw47572456;     ETYrqBcnkw47572456 = ETYrqBcnkw19532991;     ETYrqBcnkw19532991 = ETYrqBcnkw45685014;     ETYrqBcnkw45685014 = ETYrqBcnkw84300682;     ETYrqBcnkw84300682 = ETYrqBcnkw72240351;     ETYrqBcnkw72240351 = ETYrqBcnkw73566882;     ETYrqBcnkw73566882 = ETYrqBcnkw36977075;     ETYrqBcnkw36977075 = ETYrqBcnkw25628560;     ETYrqBcnkw25628560 = ETYrqBcnkw7393580;     ETYrqBcnkw7393580 = ETYrqBcnkw76960489;     ETYrqBcnkw76960489 = ETYrqBcnkw61918031;     ETYrqBcnkw61918031 = ETYrqBcnkw72855581;     ETYrqBcnkw72855581 = ETYrqBcnkw85336799;     ETYrqBcnkw85336799 = ETYrqBcnkw7032076;     ETYrqBcnkw7032076 = ETYrqBcnkw60606656;     ETYrqBcnkw60606656 = ETYrqBcnkw59941539;     ETYrqBcnkw59941539 = ETYrqBcnkw87739562;     ETYrqBcnkw87739562 = ETYrqBcnkw91197289;     ETYrqBcnkw91197289 = ETYrqBcnkw64778414;     ETYrqBcnkw64778414 = ETYrqBcnkw33369584;     ETYrqBcnkw33369584 = ETYrqBcnkw57956580;     ETYrqBcnkw57956580 = ETYrqBcnkw88252805;     ETYrqBcnkw88252805 = ETYrqBcnkw3017403;     ETYrqBcnkw3017403 = ETYrqBcnkw55233277;     ETYrqBcnkw55233277 = ETYrqBcnkw71363171;     ETYrqBcnkw71363171 = ETYrqBcnkw34008803;     ETYrqBcnkw34008803 = ETYrqBcnkw79621094;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void XIFdVFhMYB3493873() {     int rADzLCFEFY88936360 = -242440100;    int rADzLCFEFY13454961 = -273222067;    int rADzLCFEFY73728849 = -647911440;    int rADzLCFEFY88600950 = -41735053;    int rADzLCFEFY45753470 = -244229733;    int rADzLCFEFY48061918 = -435296171;    int rADzLCFEFY70168969 = -496989111;    int rADzLCFEFY81643115 = -132742613;    int rADzLCFEFY74552054 = -512756588;    int rADzLCFEFY64305134 = -140673854;    int rADzLCFEFY79943758 = -864043182;    int rADzLCFEFY7496172 = -481635023;    int rADzLCFEFY85654000 = -391582206;    int rADzLCFEFY7835265 = -309584935;    int rADzLCFEFY33179222 = -672683160;    int rADzLCFEFY41422161 = -401499749;    int rADzLCFEFY57426764 = -627266443;    int rADzLCFEFY81144373 = -547210978;    int rADzLCFEFY26001886 = -498741371;    int rADzLCFEFY42806793 = -637111503;    int rADzLCFEFY4812628 = -532284749;    int rADzLCFEFY28399730 = -209360451;    int rADzLCFEFY4725823 = -754265011;    int rADzLCFEFY22921235 = -732395156;    int rADzLCFEFY59445755 = -735510704;    int rADzLCFEFY18362133 = -393067800;    int rADzLCFEFY5737015 = -162942857;    int rADzLCFEFY23823190 = -968393606;    int rADzLCFEFY66040982 = -613523596;    int rADzLCFEFY91251818 = -153568410;    int rADzLCFEFY52678352 = -428980344;    int rADzLCFEFY62835686 = -436202192;    int rADzLCFEFY83309687 = -668778395;    int rADzLCFEFY30997851 = -63012855;    int rADzLCFEFY22022092 = 72732178;    int rADzLCFEFY8931939 = -652790059;    int rADzLCFEFY18527061 = -385014875;    int rADzLCFEFY55242927 = -721194925;    int rADzLCFEFY52831201 = -936935833;    int rADzLCFEFY16596286 = -49659861;    int rADzLCFEFY56102123 = -638004793;    int rADzLCFEFY84251941 = 53216161;    int rADzLCFEFY80222810 = -911831632;    int rADzLCFEFY43120775 = -403843485;    int rADzLCFEFY27424329 = -459616753;    int rADzLCFEFY93055566 = -416134161;    int rADzLCFEFY20726872 = -863503891;    int rADzLCFEFY17821225 = -303450007;    int rADzLCFEFY11362279 = 52521656;    int rADzLCFEFY91601488 = -781515047;    int rADzLCFEFY53520548 = -165413784;    int rADzLCFEFY74041434 = -697641131;    int rADzLCFEFY88247181 = -435110318;    int rADzLCFEFY30999525 = 83545429;    int rADzLCFEFY98681245 = -254236434;    int rADzLCFEFY60536631 = 66920351;    int rADzLCFEFY8729138 = -518957057;    int rADzLCFEFY50807614 = -915516285;    int rADzLCFEFY29155195 = -306224349;    int rADzLCFEFY27391338 = -851161934;    int rADzLCFEFY42324903 = -172353314;    int rADzLCFEFY46345780 = -528595506;    int rADzLCFEFY15602133 = -519219017;    int rADzLCFEFY83300236 = -259188178;    int rADzLCFEFY11626782 = -711693511;    int rADzLCFEFY17108073 = -327840990;    int rADzLCFEFY24186485 = -812856629;    int rADzLCFEFY54656150 = -228569351;    int rADzLCFEFY85813173 = -282317114;    int rADzLCFEFY24247283 = 80106898;    int rADzLCFEFY22895101 = 83515125;    int rADzLCFEFY2183837 = -906071518;    int rADzLCFEFY28313172 = -610275145;    int rADzLCFEFY9405601 = -349081510;    int rADzLCFEFY86704669 = -999106711;    int rADzLCFEFY20560687 = -485500911;    int rADzLCFEFY48176920 = -297528820;    int rADzLCFEFY61605048 = -250421527;    int rADzLCFEFY95496905 = -172778403;    int rADzLCFEFY66390189 = -219376544;    int rADzLCFEFY97635261 = -529563909;    int rADzLCFEFY87915789 = -859492851;    int rADzLCFEFY12460912 = -920915262;    int rADzLCFEFY74439494 = -832008549;    int rADzLCFEFY37731270 = -988154626;    int rADzLCFEFY78636918 = -731339213;    int rADzLCFEFY74588504 = 98908125;    int rADzLCFEFY52310162 = -652323824;    int rADzLCFEFY32316606 = -808776422;    int rADzLCFEFY61485460 = -994188173;    int rADzLCFEFY202802 = -33833003;    int rADzLCFEFY67719446 = -469498590;    int rADzLCFEFY26087733 = -314970576;    int rADzLCFEFY25439864 = 14226100;    int rADzLCFEFY74271382 = -877306548;    int rADzLCFEFY9756343 = -9409288;    int rADzLCFEFY68649808 = -427564822;    int rADzLCFEFY96922573 = -552643454;    int rADzLCFEFY31493993 = -692149974;    int rADzLCFEFY10316257 = -242440100;     rADzLCFEFY88936360 = rADzLCFEFY13454961;     rADzLCFEFY13454961 = rADzLCFEFY73728849;     rADzLCFEFY73728849 = rADzLCFEFY88600950;     rADzLCFEFY88600950 = rADzLCFEFY45753470;     rADzLCFEFY45753470 = rADzLCFEFY48061918;     rADzLCFEFY48061918 = rADzLCFEFY70168969;     rADzLCFEFY70168969 = rADzLCFEFY81643115;     rADzLCFEFY81643115 = rADzLCFEFY74552054;     rADzLCFEFY74552054 = rADzLCFEFY64305134;     rADzLCFEFY64305134 = rADzLCFEFY79943758;     rADzLCFEFY79943758 = rADzLCFEFY7496172;     rADzLCFEFY7496172 = rADzLCFEFY85654000;     rADzLCFEFY85654000 = rADzLCFEFY7835265;     rADzLCFEFY7835265 = rADzLCFEFY33179222;     rADzLCFEFY33179222 = rADzLCFEFY41422161;     rADzLCFEFY41422161 = rADzLCFEFY57426764;     rADzLCFEFY57426764 = rADzLCFEFY81144373;     rADzLCFEFY81144373 = rADzLCFEFY26001886;     rADzLCFEFY26001886 = rADzLCFEFY42806793;     rADzLCFEFY42806793 = rADzLCFEFY4812628;     rADzLCFEFY4812628 = rADzLCFEFY28399730;     rADzLCFEFY28399730 = rADzLCFEFY4725823;     rADzLCFEFY4725823 = rADzLCFEFY22921235;     rADzLCFEFY22921235 = rADzLCFEFY59445755;     rADzLCFEFY59445755 = rADzLCFEFY18362133;     rADzLCFEFY18362133 = rADzLCFEFY5737015;     rADzLCFEFY5737015 = rADzLCFEFY23823190;     rADzLCFEFY23823190 = rADzLCFEFY66040982;     rADzLCFEFY66040982 = rADzLCFEFY91251818;     rADzLCFEFY91251818 = rADzLCFEFY52678352;     rADzLCFEFY52678352 = rADzLCFEFY62835686;     rADzLCFEFY62835686 = rADzLCFEFY83309687;     rADzLCFEFY83309687 = rADzLCFEFY30997851;     rADzLCFEFY30997851 = rADzLCFEFY22022092;     rADzLCFEFY22022092 = rADzLCFEFY8931939;     rADzLCFEFY8931939 = rADzLCFEFY18527061;     rADzLCFEFY18527061 = rADzLCFEFY55242927;     rADzLCFEFY55242927 = rADzLCFEFY52831201;     rADzLCFEFY52831201 = rADzLCFEFY16596286;     rADzLCFEFY16596286 = rADzLCFEFY56102123;     rADzLCFEFY56102123 = rADzLCFEFY84251941;     rADzLCFEFY84251941 = rADzLCFEFY80222810;     rADzLCFEFY80222810 = rADzLCFEFY43120775;     rADzLCFEFY43120775 = rADzLCFEFY27424329;     rADzLCFEFY27424329 = rADzLCFEFY93055566;     rADzLCFEFY93055566 = rADzLCFEFY20726872;     rADzLCFEFY20726872 = rADzLCFEFY17821225;     rADzLCFEFY17821225 = rADzLCFEFY11362279;     rADzLCFEFY11362279 = rADzLCFEFY91601488;     rADzLCFEFY91601488 = rADzLCFEFY53520548;     rADzLCFEFY53520548 = rADzLCFEFY74041434;     rADzLCFEFY74041434 = rADzLCFEFY88247181;     rADzLCFEFY88247181 = rADzLCFEFY30999525;     rADzLCFEFY30999525 = rADzLCFEFY98681245;     rADzLCFEFY98681245 = rADzLCFEFY60536631;     rADzLCFEFY60536631 = rADzLCFEFY8729138;     rADzLCFEFY8729138 = rADzLCFEFY50807614;     rADzLCFEFY50807614 = rADzLCFEFY29155195;     rADzLCFEFY29155195 = rADzLCFEFY27391338;     rADzLCFEFY27391338 = rADzLCFEFY42324903;     rADzLCFEFY42324903 = rADzLCFEFY46345780;     rADzLCFEFY46345780 = rADzLCFEFY15602133;     rADzLCFEFY15602133 = rADzLCFEFY83300236;     rADzLCFEFY83300236 = rADzLCFEFY11626782;     rADzLCFEFY11626782 = rADzLCFEFY17108073;     rADzLCFEFY17108073 = rADzLCFEFY24186485;     rADzLCFEFY24186485 = rADzLCFEFY54656150;     rADzLCFEFY54656150 = rADzLCFEFY85813173;     rADzLCFEFY85813173 = rADzLCFEFY24247283;     rADzLCFEFY24247283 = rADzLCFEFY22895101;     rADzLCFEFY22895101 = rADzLCFEFY2183837;     rADzLCFEFY2183837 = rADzLCFEFY28313172;     rADzLCFEFY28313172 = rADzLCFEFY9405601;     rADzLCFEFY9405601 = rADzLCFEFY86704669;     rADzLCFEFY86704669 = rADzLCFEFY20560687;     rADzLCFEFY20560687 = rADzLCFEFY48176920;     rADzLCFEFY48176920 = rADzLCFEFY61605048;     rADzLCFEFY61605048 = rADzLCFEFY95496905;     rADzLCFEFY95496905 = rADzLCFEFY66390189;     rADzLCFEFY66390189 = rADzLCFEFY97635261;     rADzLCFEFY97635261 = rADzLCFEFY87915789;     rADzLCFEFY87915789 = rADzLCFEFY12460912;     rADzLCFEFY12460912 = rADzLCFEFY74439494;     rADzLCFEFY74439494 = rADzLCFEFY37731270;     rADzLCFEFY37731270 = rADzLCFEFY78636918;     rADzLCFEFY78636918 = rADzLCFEFY74588504;     rADzLCFEFY74588504 = rADzLCFEFY52310162;     rADzLCFEFY52310162 = rADzLCFEFY32316606;     rADzLCFEFY32316606 = rADzLCFEFY61485460;     rADzLCFEFY61485460 = rADzLCFEFY202802;     rADzLCFEFY202802 = rADzLCFEFY67719446;     rADzLCFEFY67719446 = rADzLCFEFY26087733;     rADzLCFEFY26087733 = rADzLCFEFY25439864;     rADzLCFEFY25439864 = rADzLCFEFY74271382;     rADzLCFEFY74271382 = rADzLCFEFY9756343;     rADzLCFEFY9756343 = rADzLCFEFY68649808;     rADzLCFEFY68649808 = rADzLCFEFY96922573;     rADzLCFEFY96922573 = rADzLCFEFY31493993;     rADzLCFEFY31493993 = rADzLCFEFY10316257;     rADzLCFEFY10316257 = rADzLCFEFY88936360;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void jDhROUuecp32512996() {     long iGwghwCPXq58117229 = -201870102;    long iGwghwCPXq58968213 = 31925694;    long iGwghwCPXq75029746 = -996168360;    long iGwghwCPXq54242223 = -97903260;    long iGwghwCPXq83810101 = -314865600;    long iGwghwCPXq4325666 = -725822938;    long iGwghwCPXq59843773 = -14363100;    long iGwghwCPXq54418271 = -873475669;    long iGwghwCPXq96974229 = -801982209;    long iGwghwCPXq24473313 = -762603586;    long iGwghwCPXq66094681 = 53795813;    long iGwghwCPXq1849011 = -758764656;    long iGwghwCPXq32905727 = -516841573;    long iGwghwCPXq43810328 = -171919470;    long iGwghwCPXq56846024 = 7516306;    long iGwghwCPXq90418627 = -319637920;    long iGwghwCPXq27091301 = -718024501;    long iGwghwCPXq75731967 = -55758526;    long iGwghwCPXq47635764 = -208449598;    long iGwghwCPXq78770096 = -282971599;    long iGwghwCPXq5156357 = -241642552;    long iGwghwCPXq77397392 = -61650002;    long iGwghwCPXq53646667 = -261031392;    long iGwghwCPXq78769402 = -202682544;    long iGwghwCPXq86176471 = -119500127;    long iGwghwCPXq11196582 = 48336884;    long iGwghwCPXq80304923 = -488302349;    long iGwghwCPXq16001696 = -526849016;    long iGwghwCPXq37796951 = -498331878;    long iGwghwCPXq26356024 = -779539798;    long iGwghwCPXq60979177 = -746832160;    long iGwghwCPXq21632957 = -306326270;    long iGwghwCPXq81015505 = -157074517;    long iGwghwCPXq96541700 = -225973750;    long iGwghwCPXq26023380 = -777487162;    long iGwghwCPXq41061064 = -40693279;    long iGwghwCPXq45687809 = -319965556;    long iGwghwCPXq24319542 = -601809393;    long iGwghwCPXq2665881 = -246541345;    long iGwghwCPXq13025157 = -188927208;    long iGwghwCPXq51285168 = -904229809;    long iGwghwCPXq99381209 = -295802820;    long iGwghwCPXq92477174 = -807199236;    long iGwghwCPXq70255607 = -476360738;    long iGwghwCPXq26432552 = -455456843;    long iGwghwCPXq93390768 = -848100653;    long iGwghwCPXq30175453 = -939456314;    long iGwghwCPXq18135279 = -109288837;    long iGwghwCPXq97793755 = -576940341;    long iGwghwCPXq7015764 = -701313520;    long iGwghwCPXq27696946 = -100101495;    long iGwghwCPXq62669441 = 66117299;    long iGwghwCPXq46112820 = -451101740;    long iGwghwCPXq45486545 = -542652221;    long iGwghwCPXq27356639 = -856678344;    long iGwghwCPXq80719837 = -40220100;    long iGwghwCPXq5321547 = -707042915;    long iGwghwCPXq96260344 = -693485817;    long iGwghwCPXq68065751 = -978403134;    long iGwghwCPXq72613520 = -263202484;    long iGwghwCPXq24020743 = -137520589;    long iGwghwCPXq43842077 = -487514085;    long iGwghwCPXq16621321 = -275143792;    long iGwghwCPXq70618205 = 77557589;    long iGwghwCPXq63494136 = 84228574;    long iGwghwCPXq44461724 = -639877918;    long iGwghwCPXq20833505 = -501690139;    long iGwghwCPXq36364026 = -190867824;    long iGwghwCPXq17786948 = -394432309;    long iGwghwCPXq15784961 = -951790415;    long iGwghwCPXq44730818 = -999672364;    long iGwghwCPXq2771759 = -16215108;    long iGwghwCPXq73066086 = -809217181;    long iGwghwCPXq34610608 = 80477610;    long iGwghwCPXq27484928 = -378741791;    long iGwghwCPXq5775147 = -945839733;    long iGwghwCPXq84920217 = -254450767;    long iGwghwCPXq83391060 = -784670655;    long iGwghwCPXq52336851 = -747225701;    long iGwghwCPXq92785703 = -271399475;    long iGwghwCPXq81021128 = -12206803;    long iGwghwCPXq62169644 = -279013513;    long iGwghwCPXq18207941 = -949908675;    long iGwghwCPXq30781187 = -797018358;    long iGwghwCPXq98659077 = -579438303;    long iGwghwCPXq98309735 = -712949460;    long iGwghwCPXq75520137 = -855224530;    long iGwghwCPXq35528960 = -614422296;    long iGwghwCPXq69185061 = -369295406;    long iGwghwCPXq45303543 = -637267062;    long iGwghwCPXq35739518 = -333650365;    long iGwghwCPXq49427465 = -626479740;    long iGwghwCPXq56253790 = -623406260;    long iGwghwCPXq30052361 = -983338861;    long iGwghwCPXq89004414 = 48593381;    long iGwghwCPXq7443092 = -316715725;    long iGwghwCPXq82759888 = 79340971;    long iGwghwCPXq21858970 = -784756826;    long iGwghwCPXq6761471 = -460589312;    long iGwghwCPXq81970827 = -201870102;     iGwghwCPXq58117229 = iGwghwCPXq58968213;     iGwghwCPXq58968213 = iGwghwCPXq75029746;     iGwghwCPXq75029746 = iGwghwCPXq54242223;     iGwghwCPXq54242223 = iGwghwCPXq83810101;     iGwghwCPXq83810101 = iGwghwCPXq4325666;     iGwghwCPXq4325666 = iGwghwCPXq59843773;     iGwghwCPXq59843773 = iGwghwCPXq54418271;     iGwghwCPXq54418271 = iGwghwCPXq96974229;     iGwghwCPXq96974229 = iGwghwCPXq24473313;     iGwghwCPXq24473313 = iGwghwCPXq66094681;     iGwghwCPXq66094681 = iGwghwCPXq1849011;     iGwghwCPXq1849011 = iGwghwCPXq32905727;     iGwghwCPXq32905727 = iGwghwCPXq43810328;     iGwghwCPXq43810328 = iGwghwCPXq56846024;     iGwghwCPXq56846024 = iGwghwCPXq90418627;     iGwghwCPXq90418627 = iGwghwCPXq27091301;     iGwghwCPXq27091301 = iGwghwCPXq75731967;     iGwghwCPXq75731967 = iGwghwCPXq47635764;     iGwghwCPXq47635764 = iGwghwCPXq78770096;     iGwghwCPXq78770096 = iGwghwCPXq5156357;     iGwghwCPXq5156357 = iGwghwCPXq77397392;     iGwghwCPXq77397392 = iGwghwCPXq53646667;     iGwghwCPXq53646667 = iGwghwCPXq78769402;     iGwghwCPXq78769402 = iGwghwCPXq86176471;     iGwghwCPXq86176471 = iGwghwCPXq11196582;     iGwghwCPXq11196582 = iGwghwCPXq80304923;     iGwghwCPXq80304923 = iGwghwCPXq16001696;     iGwghwCPXq16001696 = iGwghwCPXq37796951;     iGwghwCPXq37796951 = iGwghwCPXq26356024;     iGwghwCPXq26356024 = iGwghwCPXq60979177;     iGwghwCPXq60979177 = iGwghwCPXq21632957;     iGwghwCPXq21632957 = iGwghwCPXq81015505;     iGwghwCPXq81015505 = iGwghwCPXq96541700;     iGwghwCPXq96541700 = iGwghwCPXq26023380;     iGwghwCPXq26023380 = iGwghwCPXq41061064;     iGwghwCPXq41061064 = iGwghwCPXq45687809;     iGwghwCPXq45687809 = iGwghwCPXq24319542;     iGwghwCPXq24319542 = iGwghwCPXq2665881;     iGwghwCPXq2665881 = iGwghwCPXq13025157;     iGwghwCPXq13025157 = iGwghwCPXq51285168;     iGwghwCPXq51285168 = iGwghwCPXq99381209;     iGwghwCPXq99381209 = iGwghwCPXq92477174;     iGwghwCPXq92477174 = iGwghwCPXq70255607;     iGwghwCPXq70255607 = iGwghwCPXq26432552;     iGwghwCPXq26432552 = iGwghwCPXq93390768;     iGwghwCPXq93390768 = iGwghwCPXq30175453;     iGwghwCPXq30175453 = iGwghwCPXq18135279;     iGwghwCPXq18135279 = iGwghwCPXq97793755;     iGwghwCPXq97793755 = iGwghwCPXq7015764;     iGwghwCPXq7015764 = iGwghwCPXq27696946;     iGwghwCPXq27696946 = iGwghwCPXq62669441;     iGwghwCPXq62669441 = iGwghwCPXq46112820;     iGwghwCPXq46112820 = iGwghwCPXq45486545;     iGwghwCPXq45486545 = iGwghwCPXq27356639;     iGwghwCPXq27356639 = iGwghwCPXq80719837;     iGwghwCPXq80719837 = iGwghwCPXq5321547;     iGwghwCPXq5321547 = iGwghwCPXq96260344;     iGwghwCPXq96260344 = iGwghwCPXq68065751;     iGwghwCPXq68065751 = iGwghwCPXq72613520;     iGwghwCPXq72613520 = iGwghwCPXq24020743;     iGwghwCPXq24020743 = iGwghwCPXq43842077;     iGwghwCPXq43842077 = iGwghwCPXq16621321;     iGwghwCPXq16621321 = iGwghwCPXq70618205;     iGwghwCPXq70618205 = iGwghwCPXq63494136;     iGwghwCPXq63494136 = iGwghwCPXq44461724;     iGwghwCPXq44461724 = iGwghwCPXq20833505;     iGwghwCPXq20833505 = iGwghwCPXq36364026;     iGwghwCPXq36364026 = iGwghwCPXq17786948;     iGwghwCPXq17786948 = iGwghwCPXq15784961;     iGwghwCPXq15784961 = iGwghwCPXq44730818;     iGwghwCPXq44730818 = iGwghwCPXq2771759;     iGwghwCPXq2771759 = iGwghwCPXq73066086;     iGwghwCPXq73066086 = iGwghwCPXq34610608;     iGwghwCPXq34610608 = iGwghwCPXq27484928;     iGwghwCPXq27484928 = iGwghwCPXq5775147;     iGwghwCPXq5775147 = iGwghwCPXq84920217;     iGwghwCPXq84920217 = iGwghwCPXq83391060;     iGwghwCPXq83391060 = iGwghwCPXq52336851;     iGwghwCPXq52336851 = iGwghwCPXq92785703;     iGwghwCPXq92785703 = iGwghwCPXq81021128;     iGwghwCPXq81021128 = iGwghwCPXq62169644;     iGwghwCPXq62169644 = iGwghwCPXq18207941;     iGwghwCPXq18207941 = iGwghwCPXq30781187;     iGwghwCPXq30781187 = iGwghwCPXq98659077;     iGwghwCPXq98659077 = iGwghwCPXq98309735;     iGwghwCPXq98309735 = iGwghwCPXq75520137;     iGwghwCPXq75520137 = iGwghwCPXq35528960;     iGwghwCPXq35528960 = iGwghwCPXq69185061;     iGwghwCPXq69185061 = iGwghwCPXq45303543;     iGwghwCPXq45303543 = iGwghwCPXq35739518;     iGwghwCPXq35739518 = iGwghwCPXq49427465;     iGwghwCPXq49427465 = iGwghwCPXq56253790;     iGwghwCPXq56253790 = iGwghwCPXq30052361;     iGwghwCPXq30052361 = iGwghwCPXq89004414;     iGwghwCPXq89004414 = iGwghwCPXq7443092;     iGwghwCPXq7443092 = iGwghwCPXq82759888;     iGwghwCPXq82759888 = iGwghwCPXq21858970;     iGwghwCPXq21858970 = iGwghwCPXq6761471;     iGwghwCPXq6761471 = iGwghwCPXq81970827;     iGwghwCPXq81970827 = iGwghwCPXq58117229;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void euQganyiNt38511346() {     long yUGFcaRZZY67432495 = -104401129;    long yUGFcaRZZY14391136 = 15391191;    long yUGFcaRZZY95181826 = -709808973;    long yUGFcaRZZY12032246 = -289567252;    long yUGFcaRZZY23873341 = -291380757;    long yUGFcaRZZY97869027 = -184691799;    long yUGFcaRZZY33497845 = -913611978;    long yUGFcaRZZY43554428 = 29565183;    long yUGFcaRZZY89782886 = -82042880;    long yUGFcaRZZY93097769 = -583399254;    long yUGFcaRZZY2996666 = -137445259;    long yUGFcaRZZY13086760 = -296134471;    long yUGFcaRZZY28687443 = -102263707;    long yUGFcaRZZY75898969 = -150973575;    long yUGFcaRZZY72122062 = -944014105;    long yUGFcaRZZY95389151 = -347161398;    long yUGFcaRZZY70902068 = -745609588;    long yUGFcaRZZY87924608 = -885815838;    long yUGFcaRZZY29648696 = -162090427;    long yUGFcaRZZY41965444 = -361679441;    long yUGFcaRZZY93835707 = -567342480;    long yUGFcaRZZY1606305 = -984546335;    long yUGFcaRZZY89707933 = -975560392;    long yUGFcaRZZY37976031 = -819843654;    long yUGFcaRZZY49239014 = -438633178;    long yUGFcaRZZY77104398 = -50874757;    long yUGFcaRZZY14063190 = -197191194;    long yUGFcaRZZY87096171 = 66014251;    long yUGFcaRZZY4913858 = -612751314;    long yUGFcaRZZY39136972 = -585624361;    long yUGFcaRZZY30977556 = -357483977;    long yUGFcaRZZY98892320 = -737497565;    long yUGFcaRZZY30874835 = 31834470;    long yUGFcaRZZY85570648 = -809533636;    long yUGFcaRZZY12673656 = -953899756;    long yUGFcaRZZY72885958 = -456918726;    long yUGFcaRZZY83155416 = 78834581;    long yUGFcaRZZY80356340 = -354404756;    long yUGFcaRZZY68891582 = -297757132;    long yUGFcaRZZY89125053 = -996112721;    long yUGFcaRZZY75348302 = 58613774;    long yUGFcaRZZY87032865 = -217074911;    long yUGFcaRZZY14194181 = 70920382;    long yUGFcaRZZY29012507 = -966755626;    long yUGFcaRZZY62382626 = -247232637;    long yUGFcaRZZY63630004 = -73635211;    long yUGFcaRZZY35425084 = -512290459;    long yUGFcaRZZY89606316 = -555832225;    long yUGFcaRZZY63820899 = -812636857;    long yUGFcaRZZY76653665 = -494327222;    long yUGFcaRZZY64664655 = -935977492;    long yUGFcaRZZY26886483 = -581868918;    long yUGFcaRZZY34120477 = -38878646;    long yUGFcaRZZY50067789 = -902505339;    long yUGFcaRZZY44675638 = -791596428;    long yUGFcaRZZY65826191 = -119854794;    long yUGFcaRZZY24683202 = -9048417;    long yUGFcaRZZY57205795 = -889965319;    long yUGFcaRZZY62793231 = -850934075;    long yUGFcaRZZY46768942 = -140506000;    long yUGFcaRZZY83805837 = -987500605;    long yUGFcaRZZY46401673 = -879626230;    long yUGFcaRZZY38640570 = -357683504;    long yUGFcaRZZY50645914 = -496418519;    long yUGFcaRZZY62120214 = -125915277;    long yUGFcaRZZY4104345 = -399947695;    long yUGFcaRZZY82211924 = -227968942;    long yUGFcaRZZY43116794 = -292730071;    long yUGFcaRZZY63225314 = -197073819;    long yUGFcaRZZY99236103 = -387095379;    long yUGFcaRZZY12233735 = -325995980;    long yUGFcaRZZY90545728 = -291204833;    long yUGFcaRZZY19033027 = -488058707;    long yUGFcaRZZY40523643 = -165977706;    long yUGFcaRZZY66617142 = -320293215;    long yUGFcaRZZY6802843 = -250267570;    long yUGFcaRZZY87412124 = -955466718;    long yUGFcaRZZY60695426 = 91195233;    long yUGFcaRZZY75593405 = -472611017;    long yUGFcaRZZY85609010 = -264997967;    long yUGFcaRZZY41679315 = -538584299;    long yUGFcaRZZY24456874 = -641358970;    long yUGFcaRZZY23275272 = -121348892;    long yUGFcaRZZY28260192 = -18424092;    long yUGFcaRZZY74472316 = -649646870;    long yUGFcaRZZY4091073 = -775615059;    long yUGFcaRZZY64771843 = -598618919;    long yUGFcaRZZY80807045 = -65660191;    long yUGFcaRZZY40895011 = 82062792;    long yUGFcaRZZY46847464 = -734044962;    long yUGFcaRZZY48202756 = -347870309;    long yUGFcaRZZY25949622 = -31200100;    long yUGFcaRZZY17563110 = -503470681;    long yUGFcaRZZY22122640 = -57251132;    long yUGFcaRZZY5319217 = 91387884;    long yUGFcaRZZY28946629 = -61759997;    long yUGFcaRZZY48392295 = -859391407;    long yUGFcaRZZY63548266 = -432661099;    long yUGFcaRZZY66892293 = -740840349;    long yUGFcaRZZY58278281 = -104401129;     yUGFcaRZZY67432495 = yUGFcaRZZY14391136;     yUGFcaRZZY14391136 = yUGFcaRZZY95181826;     yUGFcaRZZY95181826 = yUGFcaRZZY12032246;     yUGFcaRZZY12032246 = yUGFcaRZZY23873341;     yUGFcaRZZY23873341 = yUGFcaRZZY97869027;     yUGFcaRZZY97869027 = yUGFcaRZZY33497845;     yUGFcaRZZY33497845 = yUGFcaRZZY43554428;     yUGFcaRZZY43554428 = yUGFcaRZZY89782886;     yUGFcaRZZY89782886 = yUGFcaRZZY93097769;     yUGFcaRZZY93097769 = yUGFcaRZZY2996666;     yUGFcaRZZY2996666 = yUGFcaRZZY13086760;     yUGFcaRZZY13086760 = yUGFcaRZZY28687443;     yUGFcaRZZY28687443 = yUGFcaRZZY75898969;     yUGFcaRZZY75898969 = yUGFcaRZZY72122062;     yUGFcaRZZY72122062 = yUGFcaRZZY95389151;     yUGFcaRZZY95389151 = yUGFcaRZZY70902068;     yUGFcaRZZY70902068 = yUGFcaRZZY87924608;     yUGFcaRZZY87924608 = yUGFcaRZZY29648696;     yUGFcaRZZY29648696 = yUGFcaRZZY41965444;     yUGFcaRZZY41965444 = yUGFcaRZZY93835707;     yUGFcaRZZY93835707 = yUGFcaRZZY1606305;     yUGFcaRZZY1606305 = yUGFcaRZZY89707933;     yUGFcaRZZY89707933 = yUGFcaRZZY37976031;     yUGFcaRZZY37976031 = yUGFcaRZZY49239014;     yUGFcaRZZY49239014 = yUGFcaRZZY77104398;     yUGFcaRZZY77104398 = yUGFcaRZZY14063190;     yUGFcaRZZY14063190 = yUGFcaRZZY87096171;     yUGFcaRZZY87096171 = yUGFcaRZZY4913858;     yUGFcaRZZY4913858 = yUGFcaRZZY39136972;     yUGFcaRZZY39136972 = yUGFcaRZZY30977556;     yUGFcaRZZY30977556 = yUGFcaRZZY98892320;     yUGFcaRZZY98892320 = yUGFcaRZZY30874835;     yUGFcaRZZY30874835 = yUGFcaRZZY85570648;     yUGFcaRZZY85570648 = yUGFcaRZZY12673656;     yUGFcaRZZY12673656 = yUGFcaRZZY72885958;     yUGFcaRZZY72885958 = yUGFcaRZZY83155416;     yUGFcaRZZY83155416 = yUGFcaRZZY80356340;     yUGFcaRZZY80356340 = yUGFcaRZZY68891582;     yUGFcaRZZY68891582 = yUGFcaRZZY89125053;     yUGFcaRZZY89125053 = yUGFcaRZZY75348302;     yUGFcaRZZY75348302 = yUGFcaRZZY87032865;     yUGFcaRZZY87032865 = yUGFcaRZZY14194181;     yUGFcaRZZY14194181 = yUGFcaRZZY29012507;     yUGFcaRZZY29012507 = yUGFcaRZZY62382626;     yUGFcaRZZY62382626 = yUGFcaRZZY63630004;     yUGFcaRZZY63630004 = yUGFcaRZZY35425084;     yUGFcaRZZY35425084 = yUGFcaRZZY89606316;     yUGFcaRZZY89606316 = yUGFcaRZZY63820899;     yUGFcaRZZY63820899 = yUGFcaRZZY76653665;     yUGFcaRZZY76653665 = yUGFcaRZZY64664655;     yUGFcaRZZY64664655 = yUGFcaRZZY26886483;     yUGFcaRZZY26886483 = yUGFcaRZZY34120477;     yUGFcaRZZY34120477 = yUGFcaRZZY50067789;     yUGFcaRZZY50067789 = yUGFcaRZZY44675638;     yUGFcaRZZY44675638 = yUGFcaRZZY65826191;     yUGFcaRZZY65826191 = yUGFcaRZZY24683202;     yUGFcaRZZY24683202 = yUGFcaRZZY57205795;     yUGFcaRZZY57205795 = yUGFcaRZZY62793231;     yUGFcaRZZY62793231 = yUGFcaRZZY46768942;     yUGFcaRZZY46768942 = yUGFcaRZZY83805837;     yUGFcaRZZY83805837 = yUGFcaRZZY46401673;     yUGFcaRZZY46401673 = yUGFcaRZZY38640570;     yUGFcaRZZY38640570 = yUGFcaRZZY50645914;     yUGFcaRZZY50645914 = yUGFcaRZZY62120214;     yUGFcaRZZY62120214 = yUGFcaRZZY4104345;     yUGFcaRZZY4104345 = yUGFcaRZZY82211924;     yUGFcaRZZY82211924 = yUGFcaRZZY43116794;     yUGFcaRZZY43116794 = yUGFcaRZZY63225314;     yUGFcaRZZY63225314 = yUGFcaRZZY99236103;     yUGFcaRZZY99236103 = yUGFcaRZZY12233735;     yUGFcaRZZY12233735 = yUGFcaRZZY90545728;     yUGFcaRZZY90545728 = yUGFcaRZZY19033027;     yUGFcaRZZY19033027 = yUGFcaRZZY40523643;     yUGFcaRZZY40523643 = yUGFcaRZZY66617142;     yUGFcaRZZY66617142 = yUGFcaRZZY6802843;     yUGFcaRZZY6802843 = yUGFcaRZZY87412124;     yUGFcaRZZY87412124 = yUGFcaRZZY60695426;     yUGFcaRZZY60695426 = yUGFcaRZZY75593405;     yUGFcaRZZY75593405 = yUGFcaRZZY85609010;     yUGFcaRZZY85609010 = yUGFcaRZZY41679315;     yUGFcaRZZY41679315 = yUGFcaRZZY24456874;     yUGFcaRZZY24456874 = yUGFcaRZZY23275272;     yUGFcaRZZY23275272 = yUGFcaRZZY28260192;     yUGFcaRZZY28260192 = yUGFcaRZZY74472316;     yUGFcaRZZY74472316 = yUGFcaRZZY4091073;     yUGFcaRZZY4091073 = yUGFcaRZZY64771843;     yUGFcaRZZY64771843 = yUGFcaRZZY80807045;     yUGFcaRZZY80807045 = yUGFcaRZZY40895011;     yUGFcaRZZY40895011 = yUGFcaRZZY46847464;     yUGFcaRZZY46847464 = yUGFcaRZZY48202756;     yUGFcaRZZY48202756 = yUGFcaRZZY25949622;     yUGFcaRZZY25949622 = yUGFcaRZZY17563110;     yUGFcaRZZY17563110 = yUGFcaRZZY22122640;     yUGFcaRZZY22122640 = yUGFcaRZZY5319217;     yUGFcaRZZY5319217 = yUGFcaRZZY28946629;     yUGFcaRZZY28946629 = yUGFcaRZZY48392295;     yUGFcaRZZY48392295 = yUGFcaRZZY63548266;     yUGFcaRZZY63548266 = yUGFcaRZZY66892293;     yUGFcaRZZY66892293 = yUGFcaRZZY58278281;     yUGFcaRZZY58278281 = yUGFcaRZZY67432495;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ZdZengxubg96752226() {     long vwURLAwSFa6089624 = -361307166;    long vwURLAwSFa39712857 = -172095138;    long vwURLAwSFa36678200 = 61716260;    long vwURLAwSFa14970842 = -111633685;    long vwURLAwSFa51326360 = -952844889;    long vwURLAwSFa36218059 = -741412319;    long vwURLAwSFa57320356 = -418621613;    long vwURLAwSFa45062254 = -624754192;    long vwURLAwSFa19466653 = -82402292;    long vwURLAwSFa35395280 = -839906442;    long vwURLAwSFa17970095 = -253256474;    long vwURLAwSFa93069615 = -353218856;    long vwURLAwSFa76494685 = -899807258;    long vwURLAwSFa77984797 = -674152521;    long vwURLAwSFa49850189 = -608507365;    long vwURLAwSFa42395582 = -37496940;    long vwURLAwSFa76712768 = -683624115;    long vwURLAwSFa2824288 = 76221423;    long vwURLAwSFa50382116 = -26525580;    long vwURLAwSFa18447847 = -510045428;    long vwURLAwSFa7048729 = -694829642;    long vwURLAwSFa42715717 = -986149245;    long vwURLAwSFa60703788 = -481204090;    long vwURLAwSFa6983232 = -625524380;    long vwURLAwSFa76619858 = -408555394;    long vwURLAwSFa28988713 = 39992118;    long vwURLAwSFa9782253 = -911701977;    long vwURLAwSFa85811946 = -544965702;    long vwURLAwSFa52566724 = 21117153;    long vwURLAwSFa88835694 = -608745227;    long vwURLAwSFa27316617 = -606795343;    long vwURLAwSFa16364081 = -132193458;    long vwURLAwSFa83241227 = -34239149;    long vwURLAwSFa9517460 = -606245571;    long vwURLAwSFa3657733 = -442679495;    long vwURLAwSFa87545783 = -873683371;    long vwURLAwSFa88772906 = -533425453;    long vwURLAwSFa53518330 = -318149690;    long vwURLAwSFa91897590 = -5925699;    long vwURLAwSFa41994545 = -795121557;    long vwURLAwSFa27193821 = -882467664;    long vwURLAwSFa31899191 = -562750015;    long vwURLAwSFa47227586 = -723336201;    long vwURLAwSFa40493005 = -942139986;    long vwURLAwSFa86396694 = -203621438;    long vwURLAwSFa67891372 = -452877286;    long vwURLAwSFa42241304 = -450335427;    long vwURLAwSFa70846724 = -59006674;    long vwURLAwSFa43064980 = -626333266;    long vwURLAwSFa57909504 = -691356932;    long vwURLAwSFa46702410 = -703836374;    long vwURLAwSFa63779278 = -542781162;    long vwURLAwSFa42500826 = -690911519;    long vwURLAwSFa74671999 = -33396812;    long vwURLAwSFa89703498 = -372472876;    long vwURLAwSFa63373906 = -375157921;    long vwURLAwSFa79009069 = -690891049;    long vwURLAwSFa29694969 = -312759360;    long vwURLAwSFa38350984 = -703078292;    long vwURLAwSFa22337648 = -892837007;    long vwURLAwSFa26435807 = -829710343;    long vwURLAwSFa71508410 = -873655911;    long vwURLAwSFa92495530 = -545871345;    long vwURLAwSFa30630959 = -473657066;    long vwURLAwSFa8078664 = -133111100;    long vwURLAwSFa1606014 = -21063017;    long vwURLAwSFa9828388 = -218979707;    long vwURLAwSFa66977226 = -193561687;    long vwURLAwSFa74327064 = -131473026;    long vwURLAwSFa62304406 = -734823994;    long vwURLAwSFa53622676 = -504071488;    long vwURLAwSFa23194439 = -265474425;    long vwURLAwSFa10926698 = -917852879;    long vwURLAwSFa8387571 = -231404024;    long vwURLAwSFa91254026 = -627577764;    long vwURLAwSFa75149538 = -32079627;    long vwURLAwSFa95488131 = -162813044;    long vwURLAwSFa20210783 = -539064104;    long vwURLAwSFa20586538 = -321902943;    long vwURLAwSFa8728486 = -955678109;    long vwURLAwSFa86747408 = -509672455;    long vwURLAwSFa38935528 = -752695303;    long vwURLAwSFa42746966 = -918632437;    long vwURLAwSFa94657219 = -287525916;    long vwURLAwSFa42133284 = -904908853;    long vwURLAwSFa63537338 = 35985819;    long vwURLAwSFa73863254 = -441281940;    long vwURLAwSFa8569228 = 99157662;    long vwURLAwSFa19813961 = -133772695;    long vwURLAwSFa40283826 = 32478425;    long vwURLAwSFa8536715 = -82792323;    long vwURLAwSFa59077938 = -120666093;    long vwURLAwSFa15167346 = -615071399;    long vwURLAwSFa69559943 = -113088692;    long vwURLAwSFa15558739 = -965411214;    long vwURLAwSFa55685410 = 91188247;    long vwURLAwSFa39403660 = 83121330;    long vwURLAwSFa16596628 = -149679135;    long vwURLAwSFa32414342 = -709028887;    long vwURLAwSFa84790680 = -361307166;     vwURLAwSFa6089624 = vwURLAwSFa39712857;     vwURLAwSFa39712857 = vwURLAwSFa36678200;     vwURLAwSFa36678200 = vwURLAwSFa14970842;     vwURLAwSFa14970842 = vwURLAwSFa51326360;     vwURLAwSFa51326360 = vwURLAwSFa36218059;     vwURLAwSFa36218059 = vwURLAwSFa57320356;     vwURLAwSFa57320356 = vwURLAwSFa45062254;     vwURLAwSFa45062254 = vwURLAwSFa19466653;     vwURLAwSFa19466653 = vwURLAwSFa35395280;     vwURLAwSFa35395280 = vwURLAwSFa17970095;     vwURLAwSFa17970095 = vwURLAwSFa93069615;     vwURLAwSFa93069615 = vwURLAwSFa76494685;     vwURLAwSFa76494685 = vwURLAwSFa77984797;     vwURLAwSFa77984797 = vwURLAwSFa49850189;     vwURLAwSFa49850189 = vwURLAwSFa42395582;     vwURLAwSFa42395582 = vwURLAwSFa76712768;     vwURLAwSFa76712768 = vwURLAwSFa2824288;     vwURLAwSFa2824288 = vwURLAwSFa50382116;     vwURLAwSFa50382116 = vwURLAwSFa18447847;     vwURLAwSFa18447847 = vwURLAwSFa7048729;     vwURLAwSFa7048729 = vwURLAwSFa42715717;     vwURLAwSFa42715717 = vwURLAwSFa60703788;     vwURLAwSFa60703788 = vwURLAwSFa6983232;     vwURLAwSFa6983232 = vwURLAwSFa76619858;     vwURLAwSFa76619858 = vwURLAwSFa28988713;     vwURLAwSFa28988713 = vwURLAwSFa9782253;     vwURLAwSFa9782253 = vwURLAwSFa85811946;     vwURLAwSFa85811946 = vwURLAwSFa52566724;     vwURLAwSFa52566724 = vwURLAwSFa88835694;     vwURLAwSFa88835694 = vwURLAwSFa27316617;     vwURLAwSFa27316617 = vwURLAwSFa16364081;     vwURLAwSFa16364081 = vwURLAwSFa83241227;     vwURLAwSFa83241227 = vwURLAwSFa9517460;     vwURLAwSFa9517460 = vwURLAwSFa3657733;     vwURLAwSFa3657733 = vwURLAwSFa87545783;     vwURLAwSFa87545783 = vwURLAwSFa88772906;     vwURLAwSFa88772906 = vwURLAwSFa53518330;     vwURLAwSFa53518330 = vwURLAwSFa91897590;     vwURLAwSFa91897590 = vwURLAwSFa41994545;     vwURLAwSFa41994545 = vwURLAwSFa27193821;     vwURLAwSFa27193821 = vwURLAwSFa31899191;     vwURLAwSFa31899191 = vwURLAwSFa47227586;     vwURLAwSFa47227586 = vwURLAwSFa40493005;     vwURLAwSFa40493005 = vwURLAwSFa86396694;     vwURLAwSFa86396694 = vwURLAwSFa67891372;     vwURLAwSFa67891372 = vwURLAwSFa42241304;     vwURLAwSFa42241304 = vwURLAwSFa70846724;     vwURLAwSFa70846724 = vwURLAwSFa43064980;     vwURLAwSFa43064980 = vwURLAwSFa57909504;     vwURLAwSFa57909504 = vwURLAwSFa46702410;     vwURLAwSFa46702410 = vwURLAwSFa63779278;     vwURLAwSFa63779278 = vwURLAwSFa42500826;     vwURLAwSFa42500826 = vwURLAwSFa74671999;     vwURLAwSFa74671999 = vwURLAwSFa89703498;     vwURLAwSFa89703498 = vwURLAwSFa63373906;     vwURLAwSFa63373906 = vwURLAwSFa79009069;     vwURLAwSFa79009069 = vwURLAwSFa29694969;     vwURLAwSFa29694969 = vwURLAwSFa38350984;     vwURLAwSFa38350984 = vwURLAwSFa22337648;     vwURLAwSFa22337648 = vwURLAwSFa26435807;     vwURLAwSFa26435807 = vwURLAwSFa71508410;     vwURLAwSFa71508410 = vwURLAwSFa92495530;     vwURLAwSFa92495530 = vwURLAwSFa30630959;     vwURLAwSFa30630959 = vwURLAwSFa8078664;     vwURLAwSFa8078664 = vwURLAwSFa1606014;     vwURLAwSFa1606014 = vwURLAwSFa9828388;     vwURLAwSFa9828388 = vwURLAwSFa66977226;     vwURLAwSFa66977226 = vwURLAwSFa74327064;     vwURLAwSFa74327064 = vwURLAwSFa62304406;     vwURLAwSFa62304406 = vwURLAwSFa53622676;     vwURLAwSFa53622676 = vwURLAwSFa23194439;     vwURLAwSFa23194439 = vwURLAwSFa10926698;     vwURLAwSFa10926698 = vwURLAwSFa8387571;     vwURLAwSFa8387571 = vwURLAwSFa91254026;     vwURLAwSFa91254026 = vwURLAwSFa75149538;     vwURLAwSFa75149538 = vwURLAwSFa95488131;     vwURLAwSFa95488131 = vwURLAwSFa20210783;     vwURLAwSFa20210783 = vwURLAwSFa20586538;     vwURLAwSFa20586538 = vwURLAwSFa8728486;     vwURLAwSFa8728486 = vwURLAwSFa86747408;     vwURLAwSFa86747408 = vwURLAwSFa38935528;     vwURLAwSFa38935528 = vwURLAwSFa42746966;     vwURLAwSFa42746966 = vwURLAwSFa94657219;     vwURLAwSFa94657219 = vwURLAwSFa42133284;     vwURLAwSFa42133284 = vwURLAwSFa63537338;     vwURLAwSFa63537338 = vwURLAwSFa73863254;     vwURLAwSFa73863254 = vwURLAwSFa8569228;     vwURLAwSFa8569228 = vwURLAwSFa19813961;     vwURLAwSFa19813961 = vwURLAwSFa40283826;     vwURLAwSFa40283826 = vwURLAwSFa8536715;     vwURLAwSFa8536715 = vwURLAwSFa59077938;     vwURLAwSFa59077938 = vwURLAwSFa15167346;     vwURLAwSFa15167346 = vwURLAwSFa69559943;     vwURLAwSFa69559943 = vwURLAwSFa15558739;     vwURLAwSFa15558739 = vwURLAwSFa55685410;     vwURLAwSFa55685410 = vwURLAwSFa39403660;     vwURLAwSFa39403660 = vwURLAwSFa16596628;     vwURLAwSFa16596628 = vwURLAwSFa32414342;     vwURLAwSFa32414342 = vwURLAwSFa84790680;     vwURLAwSFa84790680 = vwURLAwSFa6089624;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void BhrLaCgGEC2750577() {     long YAmLtYXBWs15404890 = -263838192;    long YAmLtYXBWs95135779 = -188629641;    long YAmLtYXBWs56830281 = -751924353;    long YAmLtYXBWs72760863 = -303297677;    long YAmLtYXBWs91389599 = -929360046;    long YAmLtYXBWs29761421 = -200281180;    long YAmLtYXBWs30974428 = -217870491;    long YAmLtYXBWs34198411 = -821713340;    long YAmLtYXBWs12275310 = -462462964;    long YAmLtYXBWs4019737 = -660702110;    long YAmLtYXBWs54872079 = -444497547;    long YAmLtYXBWs4307365 = -990588671;    long YAmLtYXBWs72276400 = -485229392;    long YAmLtYXBWs10073439 = -653206625;    long YAmLtYXBWs65126227 = -460037776;    long YAmLtYXBWs47366107 = -65020418;    long YAmLtYXBWs20523537 = -711209202;    long YAmLtYXBWs15016929 = -753835890;    long YAmLtYXBWs32395048 = 19833591;    long YAmLtYXBWs81643194 = -588753270;    long YAmLtYXBWs95728080 = 79470430;    long YAmLtYXBWs66924629 = -809045578;    long YAmLtYXBWs96765054 = -95733090;    long YAmLtYXBWs66189861 = -142685491;    long YAmLtYXBWs39682401 = -727688445;    long YAmLtYXBWs94896529 = -59219523;    long YAmLtYXBWs43540519 = -620590822;    long YAmLtYXBWs56906421 = 47897565;    long YAmLtYXBWs19683631 = -93302283;    long YAmLtYXBWs1616643 = -414829789;    long YAmLtYXBWs97314995 = -217447160;    long YAmLtYXBWs93623443 = -563364753;    long YAmLtYXBWs33100558 = -945330161;    long YAmLtYXBWs98546407 = -89805458;    long YAmLtYXBWs90308008 = -619092090;    long YAmLtYXBWs19370678 = -189908819;    long YAmLtYXBWs26240515 = -134625315;    long YAmLtYXBWs9555128 = -70745053;    long YAmLtYXBWs58123292 = -57141486;    long YAmLtYXBWs18094443 = -502307069;    long YAmLtYXBWs51256954 = 80375918;    long YAmLtYXBWs19550847 = -484022106;    long YAmLtYXBWs68944592 = -945216583;    long YAmLtYXBWs99249905 = -332534874;    long YAmLtYXBWs22346769 = 4602768;    long YAmLtYXBWs38130608 = -778411844;    long YAmLtYXBWs47490935 = -23169572;    long YAmLtYXBWs42317762 = -505550063;    long YAmLtYXBWs9092124 = -862029782;    long YAmLtYXBWs27547407 = -484370635;    long YAmLtYXBWs83670119 = -439712371;    long YAmLtYXBWs27996320 = -90767380;    long YAmLtYXBWs30508484 = -278688425;    long YAmLtYXBWs79253243 = -393249929;    long YAmLtYXBWs7022497 = -307390961;    long YAmLtYXBWs48480261 = -454792615;    long YAmLtYXBWs98370724 = 7103448;    long YAmLtYXBWs90640420 = -509238863;    long YAmLtYXBWs33078463 = -575609233;    long YAmLtYXBWs96493069 = -770140523;    long YAmLtYXBWs86220901 = -579690359;    long YAmLtYXBWs74068006 = -165768057;    long YAmLtYXBWs14514780 = -628411057;    long YAmLtYXBWs10658668 = 52366825;    long YAmLtYXBWs6704742 = -343254951;    long YAmLtYXBWs61248635 = -881132794;    long YAmLtYXBWs71206807 = 54741490;    long YAmLtYXBWs73729993 = -295423935;    long YAmLtYXBWs19765430 = 65885464;    long YAmLtYXBWs45755549 = -170128958;    long YAmLtYXBWs21125592 = -930395103;    long YAmLtYXBWs10968409 = -540464150;    long YAmLtYXBWs56893637 = -596694405;    long YAmLtYXBWs14300606 = -477859340;    long YAmLtYXBWs30386240 = -569129188;    long YAmLtYXBWs76177234 = -436507464;    long YAmLtYXBWs97980037 = -863828995;    long YAmLtYXBWs97515149 = -763198216;    long YAmLtYXBWs43843092 = -47288259;    long YAmLtYXBWs1551793 = -949276601;    long YAmLtYXBWs47405595 = 63950049;    long YAmLtYXBWs1222758 = -15040759;    long YAmLtYXBWs47814297 = -90072653;    long YAmLtYXBWs92136224 = -608931649;    long YAmLtYXBWs17946523 = -975117419;    long YAmLtYXBWs69318675 = -26679780;    long YAmLtYXBWs63114959 = -184676328;    long YAmLtYXBWs53847314 = -452080233;    long YAmLtYXBWs91523910 = -782414497;    long YAmLtYXBWs41827748 = -64299475;    long YAmLtYXBWs20999954 = -97012268;    long YAmLtYXBWs35600094 = -625386453;    long YAmLtYXBWs76476665 = -495135820;    long YAmLtYXBWs61630222 = -287000963;    long YAmLtYXBWs31873541 = -922616711;    long YAmLtYXBWs77188948 = -753856026;    long YAmLtYXBWs5036067 = -855611049;    long YAmLtYXBWs58285924 = -897583408;    long YAmLtYXBWs92545163 = -989279924;    long YAmLtYXBWs61098134 = -263838192;     YAmLtYXBWs15404890 = YAmLtYXBWs95135779;     YAmLtYXBWs95135779 = YAmLtYXBWs56830281;     YAmLtYXBWs56830281 = YAmLtYXBWs72760863;     YAmLtYXBWs72760863 = YAmLtYXBWs91389599;     YAmLtYXBWs91389599 = YAmLtYXBWs29761421;     YAmLtYXBWs29761421 = YAmLtYXBWs30974428;     YAmLtYXBWs30974428 = YAmLtYXBWs34198411;     YAmLtYXBWs34198411 = YAmLtYXBWs12275310;     YAmLtYXBWs12275310 = YAmLtYXBWs4019737;     YAmLtYXBWs4019737 = YAmLtYXBWs54872079;     YAmLtYXBWs54872079 = YAmLtYXBWs4307365;     YAmLtYXBWs4307365 = YAmLtYXBWs72276400;     YAmLtYXBWs72276400 = YAmLtYXBWs10073439;     YAmLtYXBWs10073439 = YAmLtYXBWs65126227;     YAmLtYXBWs65126227 = YAmLtYXBWs47366107;     YAmLtYXBWs47366107 = YAmLtYXBWs20523537;     YAmLtYXBWs20523537 = YAmLtYXBWs15016929;     YAmLtYXBWs15016929 = YAmLtYXBWs32395048;     YAmLtYXBWs32395048 = YAmLtYXBWs81643194;     YAmLtYXBWs81643194 = YAmLtYXBWs95728080;     YAmLtYXBWs95728080 = YAmLtYXBWs66924629;     YAmLtYXBWs66924629 = YAmLtYXBWs96765054;     YAmLtYXBWs96765054 = YAmLtYXBWs66189861;     YAmLtYXBWs66189861 = YAmLtYXBWs39682401;     YAmLtYXBWs39682401 = YAmLtYXBWs94896529;     YAmLtYXBWs94896529 = YAmLtYXBWs43540519;     YAmLtYXBWs43540519 = YAmLtYXBWs56906421;     YAmLtYXBWs56906421 = YAmLtYXBWs19683631;     YAmLtYXBWs19683631 = YAmLtYXBWs1616643;     YAmLtYXBWs1616643 = YAmLtYXBWs97314995;     YAmLtYXBWs97314995 = YAmLtYXBWs93623443;     YAmLtYXBWs93623443 = YAmLtYXBWs33100558;     YAmLtYXBWs33100558 = YAmLtYXBWs98546407;     YAmLtYXBWs98546407 = YAmLtYXBWs90308008;     YAmLtYXBWs90308008 = YAmLtYXBWs19370678;     YAmLtYXBWs19370678 = YAmLtYXBWs26240515;     YAmLtYXBWs26240515 = YAmLtYXBWs9555128;     YAmLtYXBWs9555128 = YAmLtYXBWs58123292;     YAmLtYXBWs58123292 = YAmLtYXBWs18094443;     YAmLtYXBWs18094443 = YAmLtYXBWs51256954;     YAmLtYXBWs51256954 = YAmLtYXBWs19550847;     YAmLtYXBWs19550847 = YAmLtYXBWs68944592;     YAmLtYXBWs68944592 = YAmLtYXBWs99249905;     YAmLtYXBWs99249905 = YAmLtYXBWs22346769;     YAmLtYXBWs22346769 = YAmLtYXBWs38130608;     YAmLtYXBWs38130608 = YAmLtYXBWs47490935;     YAmLtYXBWs47490935 = YAmLtYXBWs42317762;     YAmLtYXBWs42317762 = YAmLtYXBWs9092124;     YAmLtYXBWs9092124 = YAmLtYXBWs27547407;     YAmLtYXBWs27547407 = YAmLtYXBWs83670119;     YAmLtYXBWs83670119 = YAmLtYXBWs27996320;     YAmLtYXBWs27996320 = YAmLtYXBWs30508484;     YAmLtYXBWs30508484 = YAmLtYXBWs79253243;     YAmLtYXBWs79253243 = YAmLtYXBWs7022497;     YAmLtYXBWs7022497 = YAmLtYXBWs48480261;     YAmLtYXBWs48480261 = YAmLtYXBWs98370724;     YAmLtYXBWs98370724 = YAmLtYXBWs90640420;     YAmLtYXBWs90640420 = YAmLtYXBWs33078463;     YAmLtYXBWs33078463 = YAmLtYXBWs96493069;     YAmLtYXBWs96493069 = YAmLtYXBWs86220901;     YAmLtYXBWs86220901 = YAmLtYXBWs74068006;     YAmLtYXBWs74068006 = YAmLtYXBWs14514780;     YAmLtYXBWs14514780 = YAmLtYXBWs10658668;     YAmLtYXBWs10658668 = YAmLtYXBWs6704742;     YAmLtYXBWs6704742 = YAmLtYXBWs61248635;     YAmLtYXBWs61248635 = YAmLtYXBWs71206807;     YAmLtYXBWs71206807 = YAmLtYXBWs73729993;     YAmLtYXBWs73729993 = YAmLtYXBWs19765430;     YAmLtYXBWs19765430 = YAmLtYXBWs45755549;     YAmLtYXBWs45755549 = YAmLtYXBWs21125592;     YAmLtYXBWs21125592 = YAmLtYXBWs10968409;     YAmLtYXBWs10968409 = YAmLtYXBWs56893637;     YAmLtYXBWs56893637 = YAmLtYXBWs14300606;     YAmLtYXBWs14300606 = YAmLtYXBWs30386240;     YAmLtYXBWs30386240 = YAmLtYXBWs76177234;     YAmLtYXBWs76177234 = YAmLtYXBWs97980037;     YAmLtYXBWs97980037 = YAmLtYXBWs97515149;     YAmLtYXBWs97515149 = YAmLtYXBWs43843092;     YAmLtYXBWs43843092 = YAmLtYXBWs1551793;     YAmLtYXBWs1551793 = YAmLtYXBWs47405595;     YAmLtYXBWs47405595 = YAmLtYXBWs1222758;     YAmLtYXBWs1222758 = YAmLtYXBWs47814297;     YAmLtYXBWs47814297 = YAmLtYXBWs92136224;     YAmLtYXBWs92136224 = YAmLtYXBWs17946523;     YAmLtYXBWs17946523 = YAmLtYXBWs69318675;     YAmLtYXBWs69318675 = YAmLtYXBWs63114959;     YAmLtYXBWs63114959 = YAmLtYXBWs53847314;     YAmLtYXBWs53847314 = YAmLtYXBWs91523910;     YAmLtYXBWs91523910 = YAmLtYXBWs41827748;     YAmLtYXBWs41827748 = YAmLtYXBWs20999954;     YAmLtYXBWs20999954 = YAmLtYXBWs35600094;     YAmLtYXBWs35600094 = YAmLtYXBWs76476665;     YAmLtYXBWs76476665 = YAmLtYXBWs61630222;     YAmLtYXBWs61630222 = YAmLtYXBWs31873541;     YAmLtYXBWs31873541 = YAmLtYXBWs77188948;     YAmLtYXBWs77188948 = YAmLtYXBWs5036067;     YAmLtYXBWs5036067 = YAmLtYXBWs58285924;     YAmLtYXBWs58285924 = YAmLtYXBWs92545163;     YAmLtYXBWs92545163 = YAmLtYXBWs61098134;     YAmLtYXBWs61098134 = YAmLtYXBWs15404890;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void DDhkkqZdcr60661261() {     long MndBWZhETJ8722887 = 14252328;    long MndBWZhETJ28882804 = -913085658;    long MndBWZhETJ57746089 = -408655120;    long MndBWZhETJ62054540 = -310925691;    long MndBWZhETJ84454188 = -794904095;    long MndBWZhETJ47479417 = -86719725;    long MndBWZhETJ7350308 = -320236332;    long MndBWZhETJ95667290 = -72423631;    long MndBWZhETJ46993323 = -796029677;    long MndBWZhETJ32309719 = -459203697;    long MndBWZhETJ28136198 = -126193262;    long MndBWZhETJ32763256 = -398618782;    long MndBWZhETJ52048044 = 35345227;    long MndBWZhETJ51281477 = -443336098;    long MndBWZhETJ27906319 = -68939815;    long MndBWZhETJ9575527 = -152719873;    long MndBWZhETJ70313241 = -203208987;    long MndBWZhETJ74512662 = -558291474;    long MndBWZhETJ33920799 = -612430844;    long MndBWZhETJ3686389 = -470460953;    long MndBWZhETJ63446065 = -905633508;    long MndBWZhETJ80990365 = -467100713;    long MndBWZhETJ67352344 = -829162366;    long MndBWZhETJ92975321 = -866486511;    long MndBWZhETJ34373171 = -643830260;    long MndBWZhETJ71447714 = -63855504;    long MndBWZhETJ71027924 = -489146170;    long MndBWZhETJ73467671 = 37832740;    long MndBWZhETJ94555727 = -293608377;    long MndBWZhETJ69660903 = 46722751;    long MndBWZhETJ11946906 = -628537817;    long MndBWZhETJ57362957 = 22264587;    long MndBWZhETJ67670403 = -265977179;    long MndBWZhETJ16866273 = -789956470;    long MndBWZhETJ33438204 = -66421164;    long MndBWZhETJ78528855 = -774903314;    long MndBWZhETJ94621124 = -497658591;    long MndBWZhETJ25776677 = 86843671;    long MndBWZhETJ96585352 = -534577238;    long MndBWZhETJ23077436 = -350192819;    long MndBWZhETJ71206205 = -885311780;    long MndBWZhETJ15394170 = -143437214;    long MndBWZhETJ32694821 = 79151770;    long MndBWZhETJ60492905 = -224634456;    long MndBWZhETJ22326848 = -711044229;    long MndBWZhETJ57297610 = -314398863;    long MndBWZhETJ43083075 = -606991302;    long MndBWZhETJ71601898 = -477615528;    long MndBWZhETJ12020583 = 88307482;    long MndBWZhETJ33599485 = -234394752;    long MndBWZhETJ27562044 = -286231748;    long MndBWZhETJ39724007 = -184599859;    long MndBWZhETJ95168488 = -778582747;    long MndBWZhETJ51022940 = 11891965;    long MndBWZhETJ97215196 = -527276812;    long MndBWZhETJ27732522 = -518646960;    long MndBWZhETJ61530459 = 16076707;    long MndBWZhETJ64770767 = -542168609;    long MndBWZhETJ27681370 = -667095432;    long MndBWZhETJ13006474 = -631048592;    long MndBWZhETJ76451492 = -597573555;    long MndBWZhETJ33882636 = -258069072;    long MndBWZhETJ1111564 = -778815254;    long MndBWZhETJ77332419 = -742752428;    long MndBWZhETJ20362813 = -830665880;    long MndBWZhETJ70773241 = -48457849;    long MndBWZhETJ65092853 = -32641603;    long MndBWZhETJ35181771 = -174698303;    long MndBWZhETJ17843273 = -276914934;    long MndBWZhETJ49377463 = -294036501;    long MndBWZhETJ14954402 = -655061283;    long MndBWZhETJ44536564 = -190052659;    long MndBWZhETJ77927309 = 76285763;    long MndBWZhETJ10843364 = -162238026;    long MndBWZhETJ32480183 = -585149173;    long MndBWZhETJ48051896 = -662196295;    long MndBWZhETJ48295545 = -446252483;    long MndBWZhETJ6859440 = -504527910;    long MndBWZhETJ70648474 = -55442283;    long MndBWZhETJ77075560 = -229431398;    long MndBWZhETJ28364639 = -456864202;    long MndBWZhETJ99426026 = 88469357;    long MndBWZhETJ61447089 = 49525257;    long MndBWZhETJ60956242 = 40786374;    long MndBWZhETJ42098860 = -667045501;    long MndBWZhETJ72222899 = -343937959;    long MndBWZhETJ62194469 = -199152667;    long MndBWZhETJ16647463 = -177869145;    long MndBWZhETJ19651077 = -162679658;    long MndBWZhETJ5705683 = -547774205;    long MndBWZhETJ16998396 = -690980022;    long MndBWZhETJ29850357 = -955489982;    long MndBWZhETJ98095306 = -246060897;    long MndBWZhETJ83578879 = -903528647;    long MndBWZhETJ46625943 = -752619264;    long MndBWZhETJ37323570 = -527242709;    long MndBWZhETJ14282607 = -364621961;    long MndBWZhETJ55362401 = -178095803;    long MndBWZhETJ40130092 = -393968576;    long MndBWZhETJ51553607 = 14252328;     MndBWZhETJ8722887 = MndBWZhETJ28882804;     MndBWZhETJ28882804 = MndBWZhETJ57746089;     MndBWZhETJ57746089 = MndBWZhETJ62054540;     MndBWZhETJ62054540 = MndBWZhETJ84454188;     MndBWZhETJ84454188 = MndBWZhETJ47479417;     MndBWZhETJ47479417 = MndBWZhETJ7350308;     MndBWZhETJ7350308 = MndBWZhETJ95667290;     MndBWZhETJ95667290 = MndBWZhETJ46993323;     MndBWZhETJ46993323 = MndBWZhETJ32309719;     MndBWZhETJ32309719 = MndBWZhETJ28136198;     MndBWZhETJ28136198 = MndBWZhETJ32763256;     MndBWZhETJ32763256 = MndBWZhETJ52048044;     MndBWZhETJ52048044 = MndBWZhETJ51281477;     MndBWZhETJ51281477 = MndBWZhETJ27906319;     MndBWZhETJ27906319 = MndBWZhETJ9575527;     MndBWZhETJ9575527 = MndBWZhETJ70313241;     MndBWZhETJ70313241 = MndBWZhETJ74512662;     MndBWZhETJ74512662 = MndBWZhETJ33920799;     MndBWZhETJ33920799 = MndBWZhETJ3686389;     MndBWZhETJ3686389 = MndBWZhETJ63446065;     MndBWZhETJ63446065 = MndBWZhETJ80990365;     MndBWZhETJ80990365 = MndBWZhETJ67352344;     MndBWZhETJ67352344 = MndBWZhETJ92975321;     MndBWZhETJ92975321 = MndBWZhETJ34373171;     MndBWZhETJ34373171 = MndBWZhETJ71447714;     MndBWZhETJ71447714 = MndBWZhETJ71027924;     MndBWZhETJ71027924 = MndBWZhETJ73467671;     MndBWZhETJ73467671 = MndBWZhETJ94555727;     MndBWZhETJ94555727 = MndBWZhETJ69660903;     MndBWZhETJ69660903 = MndBWZhETJ11946906;     MndBWZhETJ11946906 = MndBWZhETJ57362957;     MndBWZhETJ57362957 = MndBWZhETJ67670403;     MndBWZhETJ67670403 = MndBWZhETJ16866273;     MndBWZhETJ16866273 = MndBWZhETJ33438204;     MndBWZhETJ33438204 = MndBWZhETJ78528855;     MndBWZhETJ78528855 = MndBWZhETJ94621124;     MndBWZhETJ94621124 = MndBWZhETJ25776677;     MndBWZhETJ25776677 = MndBWZhETJ96585352;     MndBWZhETJ96585352 = MndBWZhETJ23077436;     MndBWZhETJ23077436 = MndBWZhETJ71206205;     MndBWZhETJ71206205 = MndBWZhETJ15394170;     MndBWZhETJ15394170 = MndBWZhETJ32694821;     MndBWZhETJ32694821 = MndBWZhETJ60492905;     MndBWZhETJ60492905 = MndBWZhETJ22326848;     MndBWZhETJ22326848 = MndBWZhETJ57297610;     MndBWZhETJ57297610 = MndBWZhETJ43083075;     MndBWZhETJ43083075 = MndBWZhETJ71601898;     MndBWZhETJ71601898 = MndBWZhETJ12020583;     MndBWZhETJ12020583 = MndBWZhETJ33599485;     MndBWZhETJ33599485 = MndBWZhETJ27562044;     MndBWZhETJ27562044 = MndBWZhETJ39724007;     MndBWZhETJ39724007 = MndBWZhETJ95168488;     MndBWZhETJ95168488 = MndBWZhETJ51022940;     MndBWZhETJ51022940 = MndBWZhETJ97215196;     MndBWZhETJ97215196 = MndBWZhETJ27732522;     MndBWZhETJ27732522 = MndBWZhETJ61530459;     MndBWZhETJ61530459 = MndBWZhETJ64770767;     MndBWZhETJ64770767 = MndBWZhETJ27681370;     MndBWZhETJ27681370 = MndBWZhETJ13006474;     MndBWZhETJ13006474 = MndBWZhETJ76451492;     MndBWZhETJ76451492 = MndBWZhETJ33882636;     MndBWZhETJ33882636 = MndBWZhETJ1111564;     MndBWZhETJ1111564 = MndBWZhETJ77332419;     MndBWZhETJ77332419 = MndBWZhETJ20362813;     MndBWZhETJ20362813 = MndBWZhETJ70773241;     MndBWZhETJ70773241 = MndBWZhETJ65092853;     MndBWZhETJ65092853 = MndBWZhETJ35181771;     MndBWZhETJ35181771 = MndBWZhETJ17843273;     MndBWZhETJ17843273 = MndBWZhETJ49377463;     MndBWZhETJ49377463 = MndBWZhETJ14954402;     MndBWZhETJ14954402 = MndBWZhETJ44536564;     MndBWZhETJ44536564 = MndBWZhETJ77927309;     MndBWZhETJ77927309 = MndBWZhETJ10843364;     MndBWZhETJ10843364 = MndBWZhETJ32480183;     MndBWZhETJ32480183 = MndBWZhETJ48051896;     MndBWZhETJ48051896 = MndBWZhETJ48295545;     MndBWZhETJ48295545 = MndBWZhETJ6859440;     MndBWZhETJ6859440 = MndBWZhETJ70648474;     MndBWZhETJ70648474 = MndBWZhETJ77075560;     MndBWZhETJ77075560 = MndBWZhETJ28364639;     MndBWZhETJ28364639 = MndBWZhETJ99426026;     MndBWZhETJ99426026 = MndBWZhETJ61447089;     MndBWZhETJ61447089 = MndBWZhETJ60956242;     MndBWZhETJ60956242 = MndBWZhETJ42098860;     MndBWZhETJ42098860 = MndBWZhETJ72222899;     MndBWZhETJ72222899 = MndBWZhETJ62194469;     MndBWZhETJ62194469 = MndBWZhETJ16647463;     MndBWZhETJ16647463 = MndBWZhETJ19651077;     MndBWZhETJ19651077 = MndBWZhETJ5705683;     MndBWZhETJ5705683 = MndBWZhETJ16998396;     MndBWZhETJ16998396 = MndBWZhETJ29850357;     MndBWZhETJ29850357 = MndBWZhETJ98095306;     MndBWZhETJ98095306 = MndBWZhETJ83578879;     MndBWZhETJ83578879 = MndBWZhETJ46625943;     MndBWZhETJ46625943 = MndBWZhETJ37323570;     MndBWZhETJ37323570 = MndBWZhETJ14282607;     MndBWZhETJ14282607 = MndBWZhETJ55362401;     MndBWZhETJ55362401 = MndBWZhETJ40130092;     MndBWZhETJ40130092 = MndBWZhETJ51553607;     MndBWZhETJ51553607 = MndBWZhETJ8722887;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void owOgpMOzTY32856541() {     long HmBmRJqvtW55240661 = -355155254;    long HmBmRJqvtW40036392 = -833827616;    long HmBmRJqvtW87443490 = 86088575;    long HmBmRJqvtW85793493 = -89333859;    long HmBmRJqvtW46476501 = -549224600;    long HmBmRJqvtW58622215 = -342672693;    long HmBmRJqvtW54754459 = -431751956;    long HmBmRJqvtW29208923 = -957174827;    long HmBmRJqvtW39192457 = -438212878;    long HmBmRJqvtW88834619 = -115323756;    long HmBmRJqvtW73111859 = -681824445;    long HmBmRJqvtW37060936 = -615742916;    long HmBmRJqvtW83429056 = 40803420;    long HmBmRJqvtW52973425 = -143992844;    long HmBmRJqvtW48926994 = 51768114;    long HmBmRJqvtW41608940 = 63255650;    long HmBmRJqvtW56114520 = -801345105;    long HmBmRJqvtW68397751 = -603013823;    long HmBmRJqvtW75522573 = -88071445;    long HmBmRJqvtW40356326 = -470967445;    long HmBmRJqvtW11372852 = -783333326;    long HmBmRJqvtW88169923 = -187624493;    long HmBmRJqvtW29190509 = -490863695;    long HmBmRJqvtW34062511 = -364913524;    long HmBmRJqvtW66316160 = -124235629;    long HmBmRJqvtW60041521 = -861996320;    long HmBmRJqvtW41258423 = -90728232;    long HmBmRJqvtW39165391 = -811198118;    long HmBmRJqvtW17242863 = -499433624;    long HmBmRJqvtW87848008 = -661480561;    long HmBmRJqvtW95981476 = -90186044;    long HmBmRJqvtW4570247 = -565875113;    long HmBmRJqvtW71025524 = -829615785;    long HmBmRJqvtW29313814 = -427955170;    long HmBmRJqvtW31154514 = -86601246;    long HmBmRJqvtW90078966 = -167155713;    long HmBmRJqvtW41222065 = -758342515;    long HmBmRJqvtW96465391 = -837841288;    long HmBmRJqvtW68834462 = -616134926;    long HmBmRJqvtW23690166 = -904466936;    long HmBmRJqvtW12585450 = 24103973;    long HmBmRJqvtW70314276 = -505534115;    long HmBmRJqvtW50024236 = -547773111;    long HmBmRJqvtW53277089 = -698544877;    long HmBmRJqvtW75300023 = -613254016;    long HmBmRJqvtW24657661 = -512693155;    long HmBmRJqvtW69221823 = 25448516;    long HmBmRJqvtW20554236 = 90861490;    long HmBmRJqvtW41635858 = -45373817;    long HmBmRJqvtW41366456 = -893665543;    long HmBmRJqvtW19406157 = -131694699;    long HmBmRJqvtW51222202 = -755155798;    long HmBmRJqvtW55725605 = -826450885;    long HmBmRJqvtW78842432 = -864369151;    long HmBmRJqvtW21483689 = -42324147;    long HmBmRJqvtW67070738 = -67530762;    long HmBmRJqvtW10845883 = -242963922;    long HmBmRJqvtW53380980 = -548997902;    long HmBmRJqvtW19477333 = -965098230;    long HmBmRJqvtW86434980 = -687228280;    long HmBmRJqvtW17363792 = -151944461;    long HmBmRJqvtW15589068 = -620553839;    long HmBmRJqvtW11966060 = -357741204;    long HmBmRJqvtW51344448 = -776732317;    long HmBmRJqvtW92853143 = 74862287;    long HmBmRJqvtW68541612 = -15949333;    long HmBmRJqvtW66035411 = -786127131;    long HmBmRJqvtW54115243 = -531241411;    long HmBmRJqvtW21818911 = 42608402;    long HmBmRJqvtW58848027 = -781076174;    long HmBmRJqvtW386875 = -178401836;    long HmBmRJqvtW59649129 = -963503817;    long HmBmRJqvtW99563289 = -986878897;    long HmBmRJqvtW51832408 = -183604509;    long HmBmRJqvtW27770876 = -395071418;    long HmBmRJqvtW41058576 = -177799212;    long HmBmRJqvtW38145687 = -639851382;    long HmBmRJqvtW75913420 = -792318818;    long HmBmRJqvtW58762487 = -751659508;    long HmBmRJqvtW41658500 = -611542474;    long HmBmRJqvtW90819697 = -787444837;    long HmBmRJqvtW20704188 = -81589723;    long HmBmRJqvtW97529532 = -665824301;    long HmBmRJqvtW75876407 = -605768082;    long HmBmRJqvtW68441852 = -429785863;    long HmBmRJqvtW44759274 = -335030247;    long HmBmRJqvtW48844642 = -739424228;    long HmBmRJqvtW92183092 = -965246635;    long HmBmRJqvtW7830125 = -285631024;    long HmBmRJqvtW64083776 = 80929515;    long HmBmRJqvtW79233084 = -924191791;    long HmBmRJqvtW87841085 = -109344613;    long HmBmRJqvtW76988059 = -872743058;    long HmBmRJqvtW82399481 = -928906647;    long HmBmRJqvtW6326374 = -652522476;    long HmBmRJqvtW96996381 = -355342189;    long HmBmRJqvtW58348216 = -47792912;    long HmBmRJqvtW98679788 = -771040795;    long HmBmRJqvtW60423946 = -673407165;    long HmBmRJqvtW6758412 = -355155254;     HmBmRJqvtW55240661 = HmBmRJqvtW40036392;     HmBmRJqvtW40036392 = HmBmRJqvtW87443490;     HmBmRJqvtW87443490 = HmBmRJqvtW85793493;     HmBmRJqvtW85793493 = HmBmRJqvtW46476501;     HmBmRJqvtW46476501 = HmBmRJqvtW58622215;     HmBmRJqvtW58622215 = HmBmRJqvtW54754459;     HmBmRJqvtW54754459 = HmBmRJqvtW29208923;     HmBmRJqvtW29208923 = HmBmRJqvtW39192457;     HmBmRJqvtW39192457 = HmBmRJqvtW88834619;     HmBmRJqvtW88834619 = HmBmRJqvtW73111859;     HmBmRJqvtW73111859 = HmBmRJqvtW37060936;     HmBmRJqvtW37060936 = HmBmRJqvtW83429056;     HmBmRJqvtW83429056 = HmBmRJqvtW52973425;     HmBmRJqvtW52973425 = HmBmRJqvtW48926994;     HmBmRJqvtW48926994 = HmBmRJqvtW41608940;     HmBmRJqvtW41608940 = HmBmRJqvtW56114520;     HmBmRJqvtW56114520 = HmBmRJqvtW68397751;     HmBmRJqvtW68397751 = HmBmRJqvtW75522573;     HmBmRJqvtW75522573 = HmBmRJqvtW40356326;     HmBmRJqvtW40356326 = HmBmRJqvtW11372852;     HmBmRJqvtW11372852 = HmBmRJqvtW88169923;     HmBmRJqvtW88169923 = HmBmRJqvtW29190509;     HmBmRJqvtW29190509 = HmBmRJqvtW34062511;     HmBmRJqvtW34062511 = HmBmRJqvtW66316160;     HmBmRJqvtW66316160 = HmBmRJqvtW60041521;     HmBmRJqvtW60041521 = HmBmRJqvtW41258423;     HmBmRJqvtW41258423 = HmBmRJqvtW39165391;     HmBmRJqvtW39165391 = HmBmRJqvtW17242863;     HmBmRJqvtW17242863 = HmBmRJqvtW87848008;     HmBmRJqvtW87848008 = HmBmRJqvtW95981476;     HmBmRJqvtW95981476 = HmBmRJqvtW4570247;     HmBmRJqvtW4570247 = HmBmRJqvtW71025524;     HmBmRJqvtW71025524 = HmBmRJqvtW29313814;     HmBmRJqvtW29313814 = HmBmRJqvtW31154514;     HmBmRJqvtW31154514 = HmBmRJqvtW90078966;     HmBmRJqvtW90078966 = HmBmRJqvtW41222065;     HmBmRJqvtW41222065 = HmBmRJqvtW96465391;     HmBmRJqvtW96465391 = HmBmRJqvtW68834462;     HmBmRJqvtW68834462 = HmBmRJqvtW23690166;     HmBmRJqvtW23690166 = HmBmRJqvtW12585450;     HmBmRJqvtW12585450 = HmBmRJqvtW70314276;     HmBmRJqvtW70314276 = HmBmRJqvtW50024236;     HmBmRJqvtW50024236 = HmBmRJqvtW53277089;     HmBmRJqvtW53277089 = HmBmRJqvtW75300023;     HmBmRJqvtW75300023 = HmBmRJqvtW24657661;     HmBmRJqvtW24657661 = HmBmRJqvtW69221823;     HmBmRJqvtW69221823 = HmBmRJqvtW20554236;     HmBmRJqvtW20554236 = HmBmRJqvtW41635858;     HmBmRJqvtW41635858 = HmBmRJqvtW41366456;     HmBmRJqvtW41366456 = HmBmRJqvtW19406157;     HmBmRJqvtW19406157 = HmBmRJqvtW51222202;     HmBmRJqvtW51222202 = HmBmRJqvtW55725605;     HmBmRJqvtW55725605 = HmBmRJqvtW78842432;     HmBmRJqvtW78842432 = HmBmRJqvtW21483689;     HmBmRJqvtW21483689 = HmBmRJqvtW67070738;     HmBmRJqvtW67070738 = HmBmRJqvtW10845883;     HmBmRJqvtW10845883 = HmBmRJqvtW53380980;     HmBmRJqvtW53380980 = HmBmRJqvtW19477333;     HmBmRJqvtW19477333 = HmBmRJqvtW86434980;     HmBmRJqvtW86434980 = HmBmRJqvtW17363792;     HmBmRJqvtW17363792 = HmBmRJqvtW15589068;     HmBmRJqvtW15589068 = HmBmRJqvtW11966060;     HmBmRJqvtW11966060 = HmBmRJqvtW51344448;     HmBmRJqvtW51344448 = HmBmRJqvtW92853143;     HmBmRJqvtW92853143 = HmBmRJqvtW68541612;     HmBmRJqvtW68541612 = HmBmRJqvtW66035411;     HmBmRJqvtW66035411 = HmBmRJqvtW54115243;     HmBmRJqvtW54115243 = HmBmRJqvtW21818911;     HmBmRJqvtW21818911 = HmBmRJqvtW58848027;     HmBmRJqvtW58848027 = HmBmRJqvtW386875;     HmBmRJqvtW386875 = HmBmRJqvtW59649129;     HmBmRJqvtW59649129 = HmBmRJqvtW99563289;     HmBmRJqvtW99563289 = HmBmRJqvtW51832408;     HmBmRJqvtW51832408 = HmBmRJqvtW27770876;     HmBmRJqvtW27770876 = HmBmRJqvtW41058576;     HmBmRJqvtW41058576 = HmBmRJqvtW38145687;     HmBmRJqvtW38145687 = HmBmRJqvtW75913420;     HmBmRJqvtW75913420 = HmBmRJqvtW58762487;     HmBmRJqvtW58762487 = HmBmRJqvtW41658500;     HmBmRJqvtW41658500 = HmBmRJqvtW90819697;     HmBmRJqvtW90819697 = HmBmRJqvtW20704188;     HmBmRJqvtW20704188 = HmBmRJqvtW97529532;     HmBmRJqvtW97529532 = HmBmRJqvtW75876407;     HmBmRJqvtW75876407 = HmBmRJqvtW68441852;     HmBmRJqvtW68441852 = HmBmRJqvtW44759274;     HmBmRJqvtW44759274 = HmBmRJqvtW48844642;     HmBmRJqvtW48844642 = HmBmRJqvtW92183092;     HmBmRJqvtW92183092 = HmBmRJqvtW7830125;     HmBmRJqvtW7830125 = HmBmRJqvtW64083776;     HmBmRJqvtW64083776 = HmBmRJqvtW79233084;     HmBmRJqvtW79233084 = HmBmRJqvtW87841085;     HmBmRJqvtW87841085 = HmBmRJqvtW76988059;     HmBmRJqvtW76988059 = HmBmRJqvtW82399481;     HmBmRJqvtW82399481 = HmBmRJqvtW6326374;     HmBmRJqvtW6326374 = HmBmRJqvtW96996381;     HmBmRJqvtW96996381 = HmBmRJqvtW58348216;     HmBmRJqvtW58348216 = HmBmRJqvtW98679788;     HmBmRJqvtW98679788 = HmBmRJqvtW60423946;     HmBmRJqvtW60423946 = HmBmRJqvtW6758412;     HmBmRJqvtW6758412 = HmBmRJqvtW55240661;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void bPelPZbfUP33628842() {     float WnxVnrhNPd35759548 = -787072325;    float WnxVnrhNPd64157160 = -373139871;    float WnxVnrhNPd73232923 = -176540037;    float WnxVnrhNPd37306066 = 86158743;    float WnxVnrhNPd63710189 = -859662827;    float WnxVnrhNPd2641006 = -951053548;    float WnxVnrhNPd47017252 = -497518660;    float WnxVnrhNPd2386791 = -271721496;    float WnxVnrhNPd43985988 = -237313639;    float WnxVnrhNPd4184924 = -483351453;    float WnxVnrhNPd59529806 = -167778289;    float WnxVnrhNPd62149676 = -87396936;    float WnxVnrhNPd56763225 = -678156253;    float WnxVnrhNPd52245825 = -292013221;    float WnxVnrhNPd78744751 = -675573799;    float WnxVnrhNPd24522385 = -139143718;    float WnxVnrhNPd61857926 = -268799563;    float WnxVnrhNPd90336065 = -546402348;    float WnxVnrhNPd16744234 = -946831217;    float WnxVnrhNPd3892550 = -977479891;    float WnxVnrhNPd58255628 = -698053748;    float WnxVnrhNPd29780372 = -695805046;    float WnxVnrhNPd34774296 = -11204761;    float WnxVnrhNPd3641059 = -490210577;    float WnxVnrhNPd11998051 = -683323226;    float WnxVnrhNPd88422213 = -992612958;    float WnxVnrhNPd97773455 = 72823273;    float WnxVnrhNPd59180765 = -765398816;    float WnxVnrhNPd854801 = -677663108;    float WnxVnrhNPd55320894 = 79095386;    float WnxVnrhNPd33002749 = -999046421;    float WnxVnrhNPd34438651 = -785169617;    float WnxVnrhNPd30454268 = -678296450;    float WnxVnrhNPd71122981 = -976715429;    float WnxVnrhNPd55940254 = -542526290;    float WnxVnrhNPd39669409 = -23118597;    float WnxVnrhNPd96721349 = -430773196;    float WnxVnrhNPd94818276 = -751157831;    float WnxVnrhNPd72148330 = -477082933;    float WnxVnrhNPd46154215 = -126799212;    float WnxVnrhNPd46814728 = -741997528;    float WnxVnrhNPd29850465 = -654222054;    float WnxVnrhNPd99457715 = -618231822;    float WnxVnrhNPd88355346 = -463401103;    float WnxVnrhNPd63307717 = -182649856;    float WnxVnrhNPd51052470 = -699451076;    float WnxVnrhNPd42627529 = 76580595;    float WnxVnrhNPd71165567 = -943373908;    float WnxVnrhNPd37817046 = -258962302;    float WnxVnrhNPd40558960 = -306702970;    float WnxVnrhNPd71489327 = 17560217;    float WnxVnrhNPd63867857 = -42094435;    float WnxVnrhNPd36797156 = -934449940;    float WnxVnrhNPd26412946 = -833615217;    float WnxVnrhNPd75373213 = -881564067;    float WnxVnrhNPd5979177 = 8732720;    float WnxVnrhNPd29382865 = -261935111;    float WnxVnrhNPd69591864 = -686329461;    float WnxVnrhNPd25308015 = -230518031;    float WnxVnrhNPd75287976 = -867049869;    float WnxVnrhNPd4867550 = -923876822;    float WnxVnrhNPd87836486 = -732119845;    float WnxVnrhNPd1531991 = -594058388;    float WnxVnrhNPd88665093 = -216409025;    float WnxVnrhNPd71182175 = -484305033;    float WnxVnrhNPd25091155 = -382608672;    float WnxVnrhNPd31695409 = -409100487;    float WnxVnrhNPd85640244 = -701440824;    float WnxVnrhNPd96305570 = -749486932;    float WnxVnrhNPd39075342 = -552455202;    float WnxVnrhNPd27801035 = -708370522;    float WnxVnrhNPd67039649 = -517641733;    float WnxVnrhNPd18187735 = 30680584;    float WnxVnrhNPd70590018 = -720032006;    float WnxVnrhNPd57077822 = -135482363;    float WnxVnrhNPd28405164 = 56168305;    float WnxVnrhNPd30322657 = 22426776;    float WnxVnrhNPd46418949 = -547803658;    float WnxVnrhNPd40333342 = -207560721;    float WnxVnrhNPd60945580 = -983872151;    float WnxVnrhNPd45794685 = -969193554;    float WnxVnrhNPd26607888 = 16197181;    float WnxVnrhNPd21363720 = -406436515;    float WnxVnrhNPd60295840 = -270960138;    float WnxVnrhNPd83831567 = -938464832;    float WnxVnrhNPd69134892 = -856951986;    float WnxVnrhNPd97641495 = -850719678;    float WnxVnrhNPd4041322 = -844681234;    float WnxVnrhNPd95749767 = 4848638;    float WnxVnrhNPd49961078 = -451259011;    float WnxVnrhNPd10286545 = -761183487;    float WnxVnrhNPd27129486 = -744443736;    float WnxVnrhNPd69510261 = -420639800;    float WnxVnrhNPd96860354 = -610033065;    float WnxVnrhNPd41286665 = -202922390;    float WnxVnrhNPd58978241 = 90122317;    float WnxVnrhNPd28318475 = 39836334;    float WnxVnrhNPd10792623 = -301822798;    float WnxVnrhNPd17173172 = -979096071;    float WnxVnrhNPd38216562 = -787072325;     WnxVnrhNPd35759548 = WnxVnrhNPd64157160;     WnxVnrhNPd64157160 = WnxVnrhNPd73232923;     WnxVnrhNPd73232923 = WnxVnrhNPd37306066;     WnxVnrhNPd37306066 = WnxVnrhNPd63710189;     WnxVnrhNPd63710189 = WnxVnrhNPd2641006;     WnxVnrhNPd2641006 = WnxVnrhNPd47017252;     WnxVnrhNPd47017252 = WnxVnrhNPd2386791;     WnxVnrhNPd2386791 = WnxVnrhNPd43985988;     WnxVnrhNPd43985988 = WnxVnrhNPd4184924;     WnxVnrhNPd4184924 = WnxVnrhNPd59529806;     WnxVnrhNPd59529806 = WnxVnrhNPd62149676;     WnxVnrhNPd62149676 = WnxVnrhNPd56763225;     WnxVnrhNPd56763225 = WnxVnrhNPd52245825;     WnxVnrhNPd52245825 = WnxVnrhNPd78744751;     WnxVnrhNPd78744751 = WnxVnrhNPd24522385;     WnxVnrhNPd24522385 = WnxVnrhNPd61857926;     WnxVnrhNPd61857926 = WnxVnrhNPd90336065;     WnxVnrhNPd90336065 = WnxVnrhNPd16744234;     WnxVnrhNPd16744234 = WnxVnrhNPd3892550;     WnxVnrhNPd3892550 = WnxVnrhNPd58255628;     WnxVnrhNPd58255628 = WnxVnrhNPd29780372;     WnxVnrhNPd29780372 = WnxVnrhNPd34774296;     WnxVnrhNPd34774296 = WnxVnrhNPd3641059;     WnxVnrhNPd3641059 = WnxVnrhNPd11998051;     WnxVnrhNPd11998051 = WnxVnrhNPd88422213;     WnxVnrhNPd88422213 = WnxVnrhNPd97773455;     WnxVnrhNPd97773455 = WnxVnrhNPd59180765;     WnxVnrhNPd59180765 = WnxVnrhNPd854801;     WnxVnrhNPd854801 = WnxVnrhNPd55320894;     WnxVnrhNPd55320894 = WnxVnrhNPd33002749;     WnxVnrhNPd33002749 = WnxVnrhNPd34438651;     WnxVnrhNPd34438651 = WnxVnrhNPd30454268;     WnxVnrhNPd30454268 = WnxVnrhNPd71122981;     WnxVnrhNPd71122981 = WnxVnrhNPd55940254;     WnxVnrhNPd55940254 = WnxVnrhNPd39669409;     WnxVnrhNPd39669409 = WnxVnrhNPd96721349;     WnxVnrhNPd96721349 = WnxVnrhNPd94818276;     WnxVnrhNPd94818276 = WnxVnrhNPd72148330;     WnxVnrhNPd72148330 = WnxVnrhNPd46154215;     WnxVnrhNPd46154215 = WnxVnrhNPd46814728;     WnxVnrhNPd46814728 = WnxVnrhNPd29850465;     WnxVnrhNPd29850465 = WnxVnrhNPd99457715;     WnxVnrhNPd99457715 = WnxVnrhNPd88355346;     WnxVnrhNPd88355346 = WnxVnrhNPd63307717;     WnxVnrhNPd63307717 = WnxVnrhNPd51052470;     WnxVnrhNPd51052470 = WnxVnrhNPd42627529;     WnxVnrhNPd42627529 = WnxVnrhNPd71165567;     WnxVnrhNPd71165567 = WnxVnrhNPd37817046;     WnxVnrhNPd37817046 = WnxVnrhNPd40558960;     WnxVnrhNPd40558960 = WnxVnrhNPd71489327;     WnxVnrhNPd71489327 = WnxVnrhNPd63867857;     WnxVnrhNPd63867857 = WnxVnrhNPd36797156;     WnxVnrhNPd36797156 = WnxVnrhNPd26412946;     WnxVnrhNPd26412946 = WnxVnrhNPd75373213;     WnxVnrhNPd75373213 = WnxVnrhNPd5979177;     WnxVnrhNPd5979177 = WnxVnrhNPd29382865;     WnxVnrhNPd29382865 = WnxVnrhNPd69591864;     WnxVnrhNPd69591864 = WnxVnrhNPd25308015;     WnxVnrhNPd25308015 = WnxVnrhNPd75287976;     WnxVnrhNPd75287976 = WnxVnrhNPd4867550;     WnxVnrhNPd4867550 = WnxVnrhNPd87836486;     WnxVnrhNPd87836486 = WnxVnrhNPd1531991;     WnxVnrhNPd1531991 = WnxVnrhNPd88665093;     WnxVnrhNPd88665093 = WnxVnrhNPd71182175;     WnxVnrhNPd71182175 = WnxVnrhNPd25091155;     WnxVnrhNPd25091155 = WnxVnrhNPd31695409;     WnxVnrhNPd31695409 = WnxVnrhNPd85640244;     WnxVnrhNPd85640244 = WnxVnrhNPd96305570;     WnxVnrhNPd96305570 = WnxVnrhNPd39075342;     WnxVnrhNPd39075342 = WnxVnrhNPd27801035;     WnxVnrhNPd27801035 = WnxVnrhNPd67039649;     WnxVnrhNPd67039649 = WnxVnrhNPd18187735;     WnxVnrhNPd18187735 = WnxVnrhNPd70590018;     WnxVnrhNPd70590018 = WnxVnrhNPd57077822;     WnxVnrhNPd57077822 = WnxVnrhNPd28405164;     WnxVnrhNPd28405164 = WnxVnrhNPd30322657;     WnxVnrhNPd30322657 = WnxVnrhNPd46418949;     WnxVnrhNPd46418949 = WnxVnrhNPd40333342;     WnxVnrhNPd40333342 = WnxVnrhNPd60945580;     WnxVnrhNPd60945580 = WnxVnrhNPd45794685;     WnxVnrhNPd45794685 = WnxVnrhNPd26607888;     WnxVnrhNPd26607888 = WnxVnrhNPd21363720;     WnxVnrhNPd21363720 = WnxVnrhNPd60295840;     WnxVnrhNPd60295840 = WnxVnrhNPd83831567;     WnxVnrhNPd83831567 = WnxVnrhNPd69134892;     WnxVnrhNPd69134892 = WnxVnrhNPd97641495;     WnxVnrhNPd97641495 = WnxVnrhNPd4041322;     WnxVnrhNPd4041322 = WnxVnrhNPd95749767;     WnxVnrhNPd95749767 = WnxVnrhNPd49961078;     WnxVnrhNPd49961078 = WnxVnrhNPd10286545;     WnxVnrhNPd10286545 = WnxVnrhNPd27129486;     WnxVnrhNPd27129486 = WnxVnrhNPd69510261;     WnxVnrhNPd69510261 = WnxVnrhNPd96860354;     WnxVnrhNPd96860354 = WnxVnrhNPd41286665;     WnxVnrhNPd41286665 = WnxVnrhNPd58978241;     WnxVnrhNPd58978241 = WnxVnrhNPd28318475;     WnxVnrhNPd28318475 = WnxVnrhNPd10792623;     WnxVnrhNPd10792623 = WnxVnrhNPd17173172;     WnxVnrhNPd17173172 = WnxVnrhNPd38216562;     WnxVnrhNPd38216562 = WnxVnrhNPd35759548;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void iENkkwNpPV30906671() {     float EBnfSKxXhc93612105 = 84770953;    float EBnfSKxXhc23204423 = -159639407;    float EBnfSKxXhc38075466 = -124732343;    float EBnfSKxXhc39456248 = 79140971;    float EBnfSKxXhc9329611 = 12036648;    float EBnfSKxXhc18941562 = -274577009;    float EBnfSKxXhc81283061 = -459695234;    float EBnfSKxXhc70938159 = -682374963;    float EBnfSKxXhc59926560 = -896195015;    float EBnfSKxXhc14211707 = -253972912;    float EBnfSKxXhc14932796 = -6938347;    float EBnfSKxXhc4329097 = -466784639;    float EBnfSKxXhc30153137 = -727227603;    float EBnfSKxXhc94157220 = -450932336;    float EBnfSKxXhc28502436 = -843763675;    float EBnfSKxXhc77755051 = -923827217;    float EBnfSKxXhc11664454 = -153439366;    float EBnfSKxXhc73072140 = -674501486;    float EBnfSKxXhc38147925 = -780514497;    float EBnfSKxXhc4172289 = 55349041;    float EBnfSKxXhc92556174 = -636349372;    float EBnfSKxXhc18720850 = -777215770;    float EBnfSKxXhc71714602 = -465959695;    float EBnfSKxXhc80283683 = -584107516;    float EBnfSKxXhc27113559 = 97826304;    float EBnfSKxXhc70849303 = -116878061;    float EBnfSKxXhc35061868 = -290247647;    float EBnfSKxXhc70417115 = -114658455;    float EBnfSKxXhc41737129 = -949944715;    float EBnfSKxXhc93921614 = -200276278;    float EBnfSKxXhc62464107 = -145249825;    float EBnfSKxXhc45079003 = -818390625;    float EBnfSKxXhc38258526 = -53291706;    float EBnfSKxXhc59977257 = -388854360;    float EBnfSKxXhc15620035 = -298069038;    float EBnfSKxXhc90094932 = -473313533;    float EBnfSKxXhc27631511 = 71236190;    float EBnfSKxXhc29742101 = -606176205;    float EBnfSKxXhc15533427 = -916323825;    float EBnfSKxXhc58738569 = -118854101;    float EBnfSKxXhc21168039 = -926430210;    float EBnfSKxXhc22026322 = -912883953;    float EBnfSKxXhc34107926 = -599812938;    float EBnfSKxXhc68698906 = -408132719;    float EBnfSKxXhc47289390 = -445045093;    float EBnfSKxXhc64686112 = -8559133;    float EBnfSKxXhc46572297 = -504535396;    float EBnfSKxXhc58106973 = -257674136;    float EBnfSKxXhc36511228 = -308652019;    float EBnfSKxXhc42126872 = -252725159;    float EBnfSKxXhc47869898 = -633237610;    float EBnfSKxXhc6657329 = -304420315;    float EBnfSKxXhc8284359 = -470352716;    float EBnfSKxXhc92441066 = -768884674;    float EBnfSKxXhc38350497 = -511859050;    float EBnfSKxXhc74891256 = -138013277;    float EBnfSKxXhc51489820 = -693679713;    float EBnfSKxXhc57791783 = -540624828;    float EBnfSKxXhc12342690 = 81314666;    float EBnfSKxXhc38480308 = -871085292;    float EBnfSKxXhc83879693 = -984329363;    float EBnfSKxXhc10865946 = -245036779;    float EBnfSKxXhc29201031 = -732430249;    float EBnfSKxXhc66004945 = -595918738;    float EBnfSKxXhc51747600 = -8723088;    float EBnfSKxXhc69853792 = -188547723;    float EBnfSKxXhc66070571 = -313492933;    float EBnfSKxXhc70175879 = -238373243;    float EBnfSKxXhc78537186 = -52863298;    float EBnfSKxXhc38407503 = -270450142;    float EBnfSKxXhc50123540 = -895063407;    float EBnfSKxXhc81922353 = -547263161;    float EBnfSKxXhc57538714 = -758177661;    float EBnfSKxXhc79409355 = -561660397;    float EBnfSKxXhc83004249 = -18220750;    float EBnfSKxXhc70529852 = -723465419;    float EBnfSKxXhc84612924 = -77402833;    float EBnfSKxXhc3015697 = 42173024;    float EBnfSKxXhc32994293 = -39062423;    float EBnfSKxXhc62427447 = -893614564;    float EBnfSKxXhc24277006 = -612342665;    float EBnfSKxXhc76954895 = 67426488;    float EBnfSKxXhc33905888 = -806006437;    float EBnfSKxXhc99610256 = -597219557;    float EBnfSKxXhc46051717 = -567038668;    float EBnfSKxXhc55806778 = -840829511;    float EBnfSKxXhc36794644 = -248037909;    float EBnfSKxXhc45817459 = -284407033;    float EBnfSKxXhc21626761 = -876995310;    float EBnfSKxXhc40728778 = -60055762;    float EBnfSKxXhc38605112 = -779633821;    float EBnfSKxXhc69839727 = -388138983;    float EBnfSKxXhc17399412 = -587490871;    float EBnfSKxXhc77053119 = 54761466;    float EBnfSKxXhc74858875 = -134524739;    float EBnfSKxXhc10302094 = -581393431;    float EBnfSKxXhc92825291 = -80453705;    float EBnfSKxXhc68102980 = 96105799;    float EBnfSKxXhc16951307 = -299409632;    float EBnfSKxXhc77435598 = 84770953;     EBnfSKxXhc93612105 = EBnfSKxXhc23204423;     EBnfSKxXhc23204423 = EBnfSKxXhc38075466;     EBnfSKxXhc38075466 = EBnfSKxXhc39456248;     EBnfSKxXhc39456248 = EBnfSKxXhc9329611;     EBnfSKxXhc9329611 = EBnfSKxXhc18941562;     EBnfSKxXhc18941562 = EBnfSKxXhc81283061;     EBnfSKxXhc81283061 = EBnfSKxXhc70938159;     EBnfSKxXhc70938159 = EBnfSKxXhc59926560;     EBnfSKxXhc59926560 = EBnfSKxXhc14211707;     EBnfSKxXhc14211707 = EBnfSKxXhc14932796;     EBnfSKxXhc14932796 = EBnfSKxXhc4329097;     EBnfSKxXhc4329097 = EBnfSKxXhc30153137;     EBnfSKxXhc30153137 = EBnfSKxXhc94157220;     EBnfSKxXhc94157220 = EBnfSKxXhc28502436;     EBnfSKxXhc28502436 = EBnfSKxXhc77755051;     EBnfSKxXhc77755051 = EBnfSKxXhc11664454;     EBnfSKxXhc11664454 = EBnfSKxXhc73072140;     EBnfSKxXhc73072140 = EBnfSKxXhc38147925;     EBnfSKxXhc38147925 = EBnfSKxXhc4172289;     EBnfSKxXhc4172289 = EBnfSKxXhc92556174;     EBnfSKxXhc92556174 = EBnfSKxXhc18720850;     EBnfSKxXhc18720850 = EBnfSKxXhc71714602;     EBnfSKxXhc71714602 = EBnfSKxXhc80283683;     EBnfSKxXhc80283683 = EBnfSKxXhc27113559;     EBnfSKxXhc27113559 = EBnfSKxXhc70849303;     EBnfSKxXhc70849303 = EBnfSKxXhc35061868;     EBnfSKxXhc35061868 = EBnfSKxXhc70417115;     EBnfSKxXhc70417115 = EBnfSKxXhc41737129;     EBnfSKxXhc41737129 = EBnfSKxXhc93921614;     EBnfSKxXhc93921614 = EBnfSKxXhc62464107;     EBnfSKxXhc62464107 = EBnfSKxXhc45079003;     EBnfSKxXhc45079003 = EBnfSKxXhc38258526;     EBnfSKxXhc38258526 = EBnfSKxXhc59977257;     EBnfSKxXhc59977257 = EBnfSKxXhc15620035;     EBnfSKxXhc15620035 = EBnfSKxXhc90094932;     EBnfSKxXhc90094932 = EBnfSKxXhc27631511;     EBnfSKxXhc27631511 = EBnfSKxXhc29742101;     EBnfSKxXhc29742101 = EBnfSKxXhc15533427;     EBnfSKxXhc15533427 = EBnfSKxXhc58738569;     EBnfSKxXhc58738569 = EBnfSKxXhc21168039;     EBnfSKxXhc21168039 = EBnfSKxXhc22026322;     EBnfSKxXhc22026322 = EBnfSKxXhc34107926;     EBnfSKxXhc34107926 = EBnfSKxXhc68698906;     EBnfSKxXhc68698906 = EBnfSKxXhc47289390;     EBnfSKxXhc47289390 = EBnfSKxXhc64686112;     EBnfSKxXhc64686112 = EBnfSKxXhc46572297;     EBnfSKxXhc46572297 = EBnfSKxXhc58106973;     EBnfSKxXhc58106973 = EBnfSKxXhc36511228;     EBnfSKxXhc36511228 = EBnfSKxXhc42126872;     EBnfSKxXhc42126872 = EBnfSKxXhc47869898;     EBnfSKxXhc47869898 = EBnfSKxXhc6657329;     EBnfSKxXhc6657329 = EBnfSKxXhc8284359;     EBnfSKxXhc8284359 = EBnfSKxXhc92441066;     EBnfSKxXhc92441066 = EBnfSKxXhc38350497;     EBnfSKxXhc38350497 = EBnfSKxXhc74891256;     EBnfSKxXhc74891256 = EBnfSKxXhc51489820;     EBnfSKxXhc51489820 = EBnfSKxXhc57791783;     EBnfSKxXhc57791783 = EBnfSKxXhc12342690;     EBnfSKxXhc12342690 = EBnfSKxXhc38480308;     EBnfSKxXhc38480308 = EBnfSKxXhc83879693;     EBnfSKxXhc83879693 = EBnfSKxXhc10865946;     EBnfSKxXhc10865946 = EBnfSKxXhc29201031;     EBnfSKxXhc29201031 = EBnfSKxXhc66004945;     EBnfSKxXhc66004945 = EBnfSKxXhc51747600;     EBnfSKxXhc51747600 = EBnfSKxXhc69853792;     EBnfSKxXhc69853792 = EBnfSKxXhc66070571;     EBnfSKxXhc66070571 = EBnfSKxXhc70175879;     EBnfSKxXhc70175879 = EBnfSKxXhc78537186;     EBnfSKxXhc78537186 = EBnfSKxXhc38407503;     EBnfSKxXhc38407503 = EBnfSKxXhc50123540;     EBnfSKxXhc50123540 = EBnfSKxXhc81922353;     EBnfSKxXhc81922353 = EBnfSKxXhc57538714;     EBnfSKxXhc57538714 = EBnfSKxXhc79409355;     EBnfSKxXhc79409355 = EBnfSKxXhc83004249;     EBnfSKxXhc83004249 = EBnfSKxXhc70529852;     EBnfSKxXhc70529852 = EBnfSKxXhc84612924;     EBnfSKxXhc84612924 = EBnfSKxXhc3015697;     EBnfSKxXhc3015697 = EBnfSKxXhc32994293;     EBnfSKxXhc32994293 = EBnfSKxXhc62427447;     EBnfSKxXhc62427447 = EBnfSKxXhc24277006;     EBnfSKxXhc24277006 = EBnfSKxXhc76954895;     EBnfSKxXhc76954895 = EBnfSKxXhc33905888;     EBnfSKxXhc33905888 = EBnfSKxXhc99610256;     EBnfSKxXhc99610256 = EBnfSKxXhc46051717;     EBnfSKxXhc46051717 = EBnfSKxXhc55806778;     EBnfSKxXhc55806778 = EBnfSKxXhc36794644;     EBnfSKxXhc36794644 = EBnfSKxXhc45817459;     EBnfSKxXhc45817459 = EBnfSKxXhc21626761;     EBnfSKxXhc21626761 = EBnfSKxXhc40728778;     EBnfSKxXhc40728778 = EBnfSKxXhc38605112;     EBnfSKxXhc38605112 = EBnfSKxXhc69839727;     EBnfSKxXhc69839727 = EBnfSKxXhc17399412;     EBnfSKxXhc17399412 = EBnfSKxXhc77053119;     EBnfSKxXhc77053119 = EBnfSKxXhc74858875;     EBnfSKxXhc74858875 = EBnfSKxXhc10302094;     EBnfSKxXhc10302094 = EBnfSKxXhc92825291;     EBnfSKxXhc92825291 = EBnfSKxXhc68102980;     EBnfSKxXhc68102980 = EBnfSKxXhc16951307;     EBnfSKxXhc16951307 = EBnfSKxXhc77435598;     EBnfSKxXhc77435598 = EBnfSKxXhc93612105;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void NhidnzJfDt36905021() {     float stSkdGzWsR2927372 = -917760073;    float stSkdGzWsR78627345 = -176173910;    float stSkdGzWsR58227547 = -938372956;    float stSkdGzWsR97246270 = -112523021;    float stSkdGzWsR49392850 = 35521491;    float stSkdGzWsR12484924 = -833445870;    float stSkdGzWsR54937133 = -258944112;    float stSkdGzWsR60074316 = -879334111;    float stSkdGzWsR52735217 = -176255686;    float stSkdGzWsR82836164 = -74768580;    float stSkdGzWsR51834780 = -198179420;    float stSkdGzWsR15566846 = -4154454;    float stSkdGzWsR25934853 = -312649737;    float stSkdGzWsR26245862 = -429986441;    float stSkdGzWsR43778473 = -695294086;    float stSkdGzWsR82725575 = -951350695;    float stSkdGzWsR55475221 = -181024453;    float stSkdGzWsR85264781 = -404558799;    float stSkdGzWsR20160857 = -734155326;    float stSkdGzWsR67367637 = -23358800;    float stSkdGzWsR81235525 = -962049300;    float stSkdGzWsR42929762 = -600112103;    float stSkdGzWsR7775870 = -80488695;    float stSkdGzWsR39490312 = -101268626;    float stSkdGzWsR90176101 = -221306747;    float stSkdGzWsR36757120 = -216089702;    float stSkdGzWsR68820135 = 863508;    float stSkdGzWsR41511591 = -621795188;    float stSkdGzWsR8854036 = 35635849;    float stSkdGzWsR6702563 = -6360841;    float stSkdGzWsR32462486 = -855901642;    float stSkdGzWsR22338367 = -149561920;    float stSkdGzWsR88117855 = -964382719;    float stSkdGzWsR49006206 = -972414247;    float stSkdGzWsR2270310 = -474481632;    float stSkdGzWsR21919827 = -889538980;    float stSkdGzWsR65099119 = -629963673;    float stSkdGzWsR85778899 = -358771567;    float stSkdGzWsR81759127 = -967539612;    float stSkdGzWsR34838466 = -926039613;    float stSkdGzWsR45231173 = 36413372;    float stSkdGzWsR9677978 = -834156044;    float stSkdGzWsR55824931 = -821693319;    float stSkdGzWsR27455807 = -898527607;    float stSkdGzWsR83239464 = -236820887;    float stSkdGzWsR34925348 = -334093691;    float stSkdGzWsR51821928 = -77369542;    float stSkdGzWsR29578010 = -704217524;    float stSkdGzWsR2538372 = -544348535;    float stSkdGzWsR11764774 = -45738861;    float stSkdGzWsR84837606 = -369113607;    float stSkdGzWsR70874371 = -952406533;    float stSkdGzWsR96292016 = -58129623;    float stSkdGzWsR97022310 = -28737792;    float stSkdGzWsR55669495 = -446777135;    float stSkdGzWsR59997610 = -217647971;    float stSkdGzWsR70851476 = 4314785;    float stSkdGzWsR18737235 = -737104331;    float stSkdGzWsR7070169 = -891216275;    float stSkdGzWsR12635730 = -748388808;    float stSkdGzWsR43664789 = -734309378;    float stSkdGzWsR13425542 = -637148924;    float stSkdGzWsR51220280 = -814969961;    float stSkdGzWsR46032654 = -69894846;    float stSkdGzWsR50373678 = -218866939;    float stSkdGzWsR29496414 = 51382500;    float stSkdGzWsR27448991 = -39771735;    float stSkdGzWsR76928647 = -340235491;    float stSkdGzWsR23975552 = -955504809;    float stSkdGzWsR21858647 = -805755106;    float stSkdGzWsR17626457 = -221387022;    float stSkdGzWsR69696322 = -822252886;    float stSkdGzWsR3505654 = -437019187;    float stSkdGzWsR85322390 = -808115713;    float stSkdGzWsR22136464 = 40227827;    float stSkdGzWsR71557548 = -27893256;    float stSkdGzWsR87104830 = -778418784;    float stSkdGzWsR80320062 = -181961088;    float stSkdGzWsR56250847 = -864447739;    float stSkdGzWsR55250754 = -887213056;    float stSkdGzWsR84935192 = -38720161;    float stSkdGzWsR39242125 = -294918968;    float stSkdGzWsR38973219 = 22553347;    float stSkdGzWsR97089261 = -918625290;    float stSkdGzWsR21864956 = -637247234;    float stSkdGzWsR61588115 = -903495110;    float stSkdGzWsR26046350 = 8567702;    float stSkdGzWsR91095545 = -835644928;    float stSkdGzWsR93336710 = -425637112;    float stSkdGzWsR42272700 = -156833662;    float stSkdGzWsR51068351 = -793853765;    float stSkdGzWsR46361884 = -892859342;    float stSkdGzWsR78708730 = -467555293;    float stSkdGzWsR69123398 = -119150805;    float stSkdGzWsR91173676 = -91730236;    float stSkdGzWsR31805631 = -326437704;    float stSkdGzWsR58457697 = 80813916;    float stSkdGzWsR9792278 = -651798474;    float stSkdGzWsR77082128 = -579660669;    float stSkdGzWsR53743051 = -917760073;     stSkdGzWsR2927372 = stSkdGzWsR78627345;     stSkdGzWsR78627345 = stSkdGzWsR58227547;     stSkdGzWsR58227547 = stSkdGzWsR97246270;     stSkdGzWsR97246270 = stSkdGzWsR49392850;     stSkdGzWsR49392850 = stSkdGzWsR12484924;     stSkdGzWsR12484924 = stSkdGzWsR54937133;     stSkdGzWsR54937133 = stSkdGzWsR60074316;     stSkdGzWsR60074316 = stSkdGzWsR52735217;     stSkdGzWsR52735217 = stSkdGzWsR82836164;     stSkdGzWsR82836164 = stSkdGzWsR51834780;     stSkdGzWsR51834780 = stSkdGzWsR15566846;     stSkdGzWsR15566846 = stSkdGzWsR25934853;     stSkdGzWsR25934853 = stSkdGzWsR26245862;     stSkdGzWsR26245862 = stSkdGzWsR43778473;     stSkdGzWsR43778473 = stSkdGzWsR82725575;     stSkdGzWsR82725575 = stSkdGzWsR55475221;     stSkdGzWsR55475221 = stSkdGzWsR85264781;     stSkdGzWsR85264781 = stSkdGzWsR20160857;     stSkdGzWsR20160857 = stSkdGzWsR67367637;     stSkdGzWsR67367637 = stSkdGzWsR81235525;     stSkdGzWsR81235525 = stSkdGzWsR42929762;     stSkdGzWsR42929762 = stSkdGzWsR7775870;     stSkdGzWsR7775870 = stSkdGzWsR39490312;     stSkdGzWsR39490312 = stSkdGzWsR90176101;     stSkdGzWsR90176101 = stSkdGzWsR36757120;     stSkdGzWsR36757120 = stSkdGzWsR68820135;     stSkdGzWsR68820135 = stSkdGzWsR41511591;     stSkdGzWsR41511591 = stSkdGzWsR8854036;     stSkdGzWsR8854036 = stSkdGzWsR6702563;     stSkdGzWsR6702563 = stSkdGzWsR32462486;     stSkdGzWsR32462486 = stSkdGzWsR22338367;     stSkdGzWsR22338367 = stSkdGzWsR88117855;     stSkdGzWsR88117855 = stSkdGzWsR49006206;     stSkdGzWsR49006206 = stSkdGzWsR2270310;     stSkdGzWsR2270310 = stSkdGzWsR21919827;     stSkdGzWsR21919827 = stSkdGzWsR65099119;     stSkdGzWsR65099119 = stSkdGzWsR85778899;     stSkdGzWsR85778899 = stSkdGzWsR81759127;     stSkdGzWsR81759127 = stSkdGzWsR34838466;     stSkdGzWsR34838466 = stSkdGzWsR45231173;     stSkdGzWsR45231173 = stSkdGzWsR9677978;     stSkdGzWsR9677978 = stSkdGzWsR55824931;     stSkdGzWsR55824931 = stSkdGzWsR27455807;     stSkdGzWsR27455807 = stSkdGzWsR83239464;     stSkdGzWsR83239464 = stSkdGzWsR34925348;     stSkdGzWsR34925348 = stSkdGzWsR51821928;     stSkdGzWsR51821928 = stSkdGzWsR29578010;     stSkdGzWsR29578010 = stSkdGzWsR2538372;     stSkdGzWsR2538372 = stSkdGzWsR11764774;     stSkdGzWsR11764774 = stSkdGzWsR84837606;     stSkdGzWsR84837606 = stSkdGzWsR70874371;     stSkdGzWsR70874371 = stSkdGzWsR96292016;     stSkdGzWsR96292016 = stSkdGzWsR97022310;     stSkdGzWsR97022310 = stSkdGzWsR55669495;     stSkdGzWsR55669495 = stSkdGzWsR59997610;     stSkdGzWsR59997610 = stSkdGzWsR70851476;     stSkdGzWsR70851476 = stSkdGzWsR18737235;     stSkdGzWsR18737235 = stSkdGzWsR7070169;     stSkdGzWsR7070169 = stSkdGzWsR12635730;     stSkdGzWsR12635730 = stSkdGzWsR43664789;     stSkdGzWsR43664789 = stSkdGzWsR13425542;     stSkdGzWsR13425542 = stSkdGzWsR51220280;     stSkdGzWsR51220280 = stSkdGzWsR46032654;     stSkdGzWsR46032654 = stSkdGzWsR50373678;     stSkdGzWsR50373678 = stSkdGzWsR29496414;     stSkdGzWsR29496414 = stSkdGzWsR27448991;     stSkdGzWsR27448991 = stSkdGzWsR76928647;     stSkdGzWsR76928647 = stSkdGzWsR23975552;     stSkdGzWsR23975552 = stSkdGzWsR21858647;     stSkdGzWsR21858647 = stSkdGzWsR17626457;     stSkdGzWsR17626457 = stSkdGzWsR69696322;     stSkdGzWsR69696322 = stSkdGzWsR3505654;     stSkdGzWsR3505654 = stSkdGzWsR85322390;     stSkdGzWsR85322390 = stSkdGzWsR22136464;     stSkdGzWsR22136464 = stSkdGzWsR71557548;     stSkdGzWsR71557548 = stSkdGzWsR87104830;     stSkdGzWsR87104830 = stSkdGzWsR80320062;     stSkdGzWsR80320062 = stSkdGzWsR56250847;     stSkdGzWsR56250847 = stSkdGzWsR55250754;     stSkdGzWsR55250754 = stSkdGzWsR84935192;     stSkdGzWsR84935192 = stSkdGzWsR39242125;     stSkdGzWsR39242125 = stSkdGzWsR38973219;     stSkdGzWsR38973219 = stSkdGzWsR97089261;     stSkdGzWsR97089261 = stSkdGzWsR21864956;     stSkdGzWsR21864956 = stSkdGzWsR61588115;     stSkdGzWsR61588115 = stSkdGzWsR26046350;     stSkdGzWsR26046350 = stSkdGzWsR91095545;     stSkdGzWsR91095545 = stSkdGzWsR93336710;     stSkdGzWsR93336710 = stSkdGzWsR42272700;     stSkdGzWsR42272700 = stSkdGzWsR51068351;     stSkdGzWsR51068351 = stSkdGzWsR46361884;     stSkdGzWsR46361884 = stSkdGzWsR78708730;     stSkdGzWsR78708730 = stSkdGzWsR69123398;     stSkdGzWsR69123398 = stSkdGzWsR91173676;     stSkdGzWsR91173676 = stSkdGzWsR31805631;     stSkdGzWsR31805631 = stSkdGzWsR58457697;     stSkdGzWsR58457697 = stSkdGzWsR9792278;     stSkdGzWsR9792278 = stSkdGzWsR77082128;     stSkdGzWsR77082128 = stSkdGzWsR53743051;     stSkdGzWsR53743051 = stSkdGzWsR2927372;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qofddTUtQp12272403() {     double QXQrquFXAh54373903 = -823444731;    double QXQrquFXAh21433797 = -512696689;    double QXQrquFXAh66820114 = -46642798;    double QXQrquFXAh15585762 = -398521316;    double QXQrquFXAh65936923 = -883581445;    double QXQrquFXAh76741310 = -217373298;    double QXQrquFXAh15693735 = 92642416;    double QXQrquFXAh53694230 = 73916915;    double QXQrquFXAh36453712 = -831550156;    double QXQrquFXAh33032622 = -866959966;    double QXQrquFXAh84135288 = -448940614;    double QXQrquFXAh20354368 = -700832473;    double QXQrquFXAh27958942 = -453146708;    double QXQrquFXAh1033658 = -13004059;    double QXQrquFXAh22227099 = -285416751;    double QXQrquFXAh70874801 = -476179800;    double QXQrquFXAh89111359 = -973006162;    double QXQrquFXAh22222680 = -449196029;    double QXQrquFXAh81840772 = -199068542;    double QXQrquFXAh10467654 = -464956702;    double QXQrquFXAh34787891 = -625619538;    double QXQrquFXAh23938861 = 33422581;    double QXQrquFXAh99092820 = -937657366;    double QXQrquFXAh31179588 = -326834104;    double QXQrquFXAh59229859 = -738323961;    double QXQrquFXAh11673041 = -961551061;    double QXQrquFXAh90843943 = -96953698;    double QXQrquFXAh89878528 = -2089752;    double QXQrquFXAh66784731 = -871677767;    double QXQrquFXAh21107466 = -921652174;    double QXQrquFXAh56531203 = -88083141;    double QXQrquFXAh50767021 = -427066611;    double QXQrquFXAh43803986 = -255339015;    double QXQrquFXAh49887970 = -185539534;    double QXQrquFXAh35135900 = -443636290;    double QXQrquFXAh10389672 = -504983857;    double QXQrquFXAh51509985 = -432306367;    double QXQrquFXAh81686071 = -244505254;    double QXQrquFXAh92883724 = -711218048;    double QXQrquFXAh28036241 = -214749452;    double QXQrquFXAh64580165 = -686170110;    double QXQrquFXAh69397928 = -981246441;    double QXQrquFXAh43600127 = -259818221;    double QXQrquFXAh3948894 = -336601988;    double QXQrquFXAh45252997 = -399349948;    double QXQrquFXAh92600861 = -330631870;    double QXQrquFXAh22371272 = -272289251;    double QXQrquFXAh52566594 = -608364075;    double QXQrquFXAh66517307 = -189764988;    double QXQrquFXAh29948322 = 39707409;    double QXQrquFXAh78573170 = -600579294;    double QXQrquFXAh28670085 = -643431240;    double QXQrquFXAh51433342 = -390138774;    double QXQrquFXAh61201110 = -133121081;    double QXQrquFXAh77484511 = -143648431;    double QXQrquFXAh30435042 = -756867313;    double QXQrquFXAh22340976 = -575039324;    double QXQrquFXAh35640527 = -719808695;    double QXQrquFXAh56355902 = -660197356;    double QXQrquFXAh54263882 = -922030384;    double QXQrquFXAh85897367 = -20419600;    double QXQrquFXAh25815207 = -905267832;    double QXQrquFXAh86909498 = -54405318;    double QXQrquFXAh15346247 = -909897982;    double QXQrquFXAh76501418 = -678876826;    double QXQrquFXAh33368267 = 78125997;    double QXQrquFXAh76550382 = -345493459;    double QXQrquFXAh78070971 = -167607174;    double QXQrquFXAh65897758 = -569367770;    double QXQrquFXAh11837427 = -780432894;    double QXQrquFXAh19364817 = 56126567;    double QXQrquFXAh7425288 = -628500908;    double QXQrquFXAh29338956 = -737977981;    double QXQrquFXAh53804531 = -984319090;    double QXQrquFXAh45887488 = -778786592;    double QXQrquFXAh65389963 = -644373097;    double QXQrquFXAh80338734 = -706759199;    double QXQrquFXAh95143927 = -501055378;    double QXQrquFXAh85926590 = -927484156;    double QXQrquFXAh66628998 = -307692091;    double QXQrquFXAh89301768 = -589261811;    double QXQrquFXAh38277349 = -488589624;    double QXQrquFXAh23361221 = -812324765;    double QXQrquFXAh36836410 = -811385177;    double QXQrquFXAh42534296 = -221072881;    double QXQrquFXAh27861119 = -444651901;    double QXQrquFXAh99333679 = 63072162;    double QXQrquFXAh82602875 = -22217935;    double QXQrquFXAh72403459 = 58108897;    double QXQrquFXAh4700859 = -686768978;    double QXQrquFXAh88048696 = -929944533;    double QXQrquFXAh15869459 = -712497673;    double QXQrquFXAh25330170 = -584307898;    double QXQrquFXAh38619842 = -789187665;    double QXQrquFXAh42138874 = -94329852;    double QXQrquFXAh38764959 = -780902278;    double QXQrquFXAh82488430 = -826841124;    double QXQrquFXAh28253881 = -349920239;    double QXQrquFXAh27447475 = -657725163;    double QXQrquFXAh11884731 = -823444731;     QXQrquFXAh54373903 = QXQrquFXAh21433797;     QXQrquFXAh21433797 = QXQrquFXAh66820114;     QXQrquFXAh66820114 = QXQrquFXAh15585762;     QXQrquFXAh15585762 = QXQrquFXAh65936923;     QXQrquFXAh65936923 = QXQrquFXAh76741310;     QXQrquFXAh76741310 = QXQrquFXAh15693735;     QXQrquFXAh15693735 = QXQrquFXAh53694230;     QXQrquFXAh53694230 = QXQrquFXAh36453712;     QXQrquFXAh36453712 = QXQrquFXAh33032622;     QXQrquFXAh33032622 = QXQrquFXAh84135288;     QXQrquFXAh84135288 = QXQrquFXAh20354368;     QXQrquFXAh20354368 = QXQrquFXAh27958942;     QXQrquFXAh27958942 = QXQrquFXAh1033658;     QXQrquFXAh1033658 = QXQrquFXAh22227099;     QXQrquFXAh22227099 = QXQrquFXAh70874801;     QXQrquFXAh70874801 = QXQrquFXAh89111359;     QXQrquFXAh89111359 = QXQrquFXAh22222680;     QXQrquFXAh22222680 = QXQrquFXAh81840772;     QXQrquFXAh81840772 = QXQrquFXAh10467654;     QXQrquFXAh10467654 = QXQrquFXAh34787891;     QXQrquFXAh34787891 = QXQrquFXAh23938861;     QXQrquFXAh23938861 = QXQrquFXAh99092820;     QXQrquFXAh99092820 = QXQrquFXAh31179588;     QXQrquFXAh31179588 = QXQrquFXAh59229859;     QXQrquFXAh59229859 = QXQrquFXAh11673041;     QXQrquFXAh11673041 = QXQrquFXAh90843943;     QXQrquFXAh90843943 = QXQrquFXAh89878528;     QXQrquFXAh89878528 = QXQrquFXAh66784731;     QXQrquFXAh66784731 = QXQrquFXAh21107466;     QXQrquFXAh21107466 = QXQrquFXAh56531203;     QXQrquFXAh56531203 = QXQrquFXAh50767021;     QXQrquFXAh50767021 = QXQrquFXAh43803986;     QXQrquFXAh43803986 = QXQrquFXAh49887970;     QXQrquFXAh49887970 = QXQrquFXAh35135900;     QXQrquFXAh35135900 = QXQrquFXAh10389672;     QXQrquFXAh10389672 = QXQrquFXAh51509985;     QXQrquFXAh51509985 = QXQrquFXAh81686071;     QXQrquFXAh81686071 = QXQrquFXAh92883724;     QXQrquFXAh92883724 = QXQrquFXAh28036241;     QXQrquFXAh28036241 = QXQrquFXAh64580165;     QXQrquFXAh64580165 = QXQrquFXAh69397928;     QXQrquFXAh69397928 = QXQrquFXAh43600127;     QXQrquFXAh43600127 = QXQrquFXAh3948894;     QXQrquFXAh3948894 = QXQrquFXAh45252997;     QXQrquFXAh45252997 = QXQrquFXAh92600861;     QXQrquFXAh92600861 = QXQrquFXAh22371272;     QXQrquFXAh22371272 = QXQrquFXAh52566594;     QXQrquFXAh52566594 = QXQrquFXAh66517307;     QXQrquFXAh66517307 = QXQrquFXAh29948322;     QXQrquFXAh29948322 = QXQrquFXAh78573170;     QXQrquFXAh78573170 = QXQrquFXAh28670085;     QXQrquFXAh28670085 = QXQrquFXAh51433342;     QXQrquFXAh51433342 = QXQrquFXAh61201110;     QXQrquFXAh61201110 = QXQrquFXAh77484511;     QXQrquFXAh77484511 = QXQrquFXAh30435042;     QXQrquFXAh30435042 = QXQrquFXAh22340976;     QXQrquFXAh22340976 = QXQrquFXAh35640527;     QXQrquFXAh35640527 = QXQrquFXAh56355902;     QXQrquFXAh56355902 = QXQrquFXAh54263882;     QXQrquFXAh54263882 = QXQrquFXAh85897367;     QXQrquFXAh85897367 = QXQrquFXAh25815207;     QXQrquFXAh25815207 = QXQrquFXAh86909498;     QXQrquFXAh86909498 = QXQrquFXAh15346247;     QXQrquFXAh15346247 = QXQrquFXAh76501418;     QXQrquFXAh76501418 = QXQrquFXAh33368267;     QXQrquFXAh33368267 = QXQrquFXAh76550382;     QXQrquFXAh76550382 = QXQrquFXAh78070971;     QXQrquFXAh78070971 = QXQrquFXAh65897758;     QXQrquFXAh65897758 = QXQrquFXAh11837427;     QXQrquFXAh11837427 = QXQrquFXAh19364817;     QXQrquFXAh19364817 = QXQrquFXAh7425288;     QXQrquFXAh7425288 = QXQrquFXAh29338956;     QXQrquFXAh29338956 = QXQrquFXAh53804531;     QXQrquFXAh53804531 = QXQrquFXAh45887488;     QXQrquFXAh45887488 = QXQrquFXAh65389963;     QXQrquFXAh65389963 = QXQrquFXAh80338734;     QXQrquFXAh80338734 = QXQrquFXAh95143927;     QXQrquFXAh95143927 = QXQrquFXAh85926590;     QXQrquFXAh85926590 = QXQrquFXAh66628998;     QXQrquFXAh66628998 = QXQrquFXAh89301768;     QXQrquFXAh89301768 = QXQrquFXAh38277349;     QXQrquFXAh38277349 = QXQrquFXAh23361221;     QXQrquFXAh23361221 = QXQrquFXAh36836410;     QXQrquFXAh36836410 = QXQrquFXAh42534296;     QXQrquFXAh42534296 = QXQrquFXAh27861119;     QXQrquFXAh27861119 = QXQrquFXAh99333679;     QXQrquFXAh99333679 = QXQrquFXAh82602875;     QXQrquFXAh82602875 = QXQrquFXAh72403459;     QXQrquFXAh72403459 = QXQrquFXAh4700859;     QXQrquFXAh4700859 = QXQrquFXAh88048696;     QXQrquFXAh88048696 = QXQrquFXAh15869459;     QXQrquFXAh15869459 = QXQrquFXAh25330170;     QXQrquFXAh25330170 = QXQrquFXAh38619842;     QXQrquFXAh38619842 = QXQrquFXAh42138874;     QXQrquFXAh42138874 = QXQrquFXAh38764959;     QXQrquFXAh38764959 = QXQrquFXAh82488430;     QXQrquFXAh82488430 = QXQrquFXAh28253881;     QXQrquFXAh28253881 = QXQrquFXAh27447475;     QXQrquFXAh27447475 = QXQrquFXAh11884731;     QXQrquFXAh11884731 = QXQrquFXAh54373903;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void IdpESApTbW18270753() {     double fjqNFgWQpu63689169 = -725975758;    double fjqNFgWQpu76856718 = -529231192;    double fjqNFgWQpu86972195 = -860283411;    double fjqNFgWQpu73375783 = -590185308;    double fjqNFgWQpu6000163 = -860096602;    double fjqNFgWQpu70284672 = -776242158;    double fjqNFgWQpu89347806 = -806606462;    double fjqNFgWQpu42830386 = -123042233;    double fjqNFgWQpu29262369 = -111610827;    double fjqNFgWQpu1657080 = -687755634;    double fjqNFgWQpu21037273 = -640181687;    double fjqNFgWQpu31592117 = -238202288;    double fjqNFgWQpu23740657 = -38568842;    double fjqNFgWQpu33122299 = 7941836;    double fjqNFgWQpu37503137 = -136947162;    double fjqNFgWQpu75845325 = -503703278;    double fjqNFgWQpu32922127 = 99408751;    double fjqNFgWQpu34415321 = -179253341;    double fjqNFgWQpu63853704 = -152709371;    double fjqNFgWQpu73663001 = -543664543;    double fjqNFgWQpu23467243 = -951319467;    double fjqNFgWQpu48147773 = -889473752;    double fjqNFgWQpu35154088 = -552186366;    double fjqNFgWQpu90386217 = -943995214;    double fjqNFgWQpu22292402 = 42542989;    double fjqNFgWQpu77580858 = 39237298;    double fjqNFgWQpu24602210 = -905842543;    double fjqNFgWQpu60973004 = -509226485;    double fjqNFgWQpu33901639 = -986097203;    double fjqNFgWQpu33888414 = -727736737;    double fjqNFgWQpu26529582 = -798734958;    double fjqNFgWQpu28026385 = -858237906;    double fjqNFgWQpu93663315 = -66430027;    double fjqNFgWQpu38916918 = -769099420;    double fjqNFgWQpu21786176 = -620048884;    double fjqNFgWQpu42214566 = -921209304;    double fjqNFgWQpu88977592 = -33506230;    double fjqNFgWQpu37722870 = 2899383;    double fjqNFgWQpu59109425 = -762433835;    double fjqNFgWQpu4136138 = 78065035;    double fjqNFgWQpu88643299 = -823326528;    double fjqNFgWQpu57049584 = -902518533;    double fjqNFgWQpu65317132 = -481698602;    double fjqNFgWQpu62705793 = -826996876;    double fjqNFgWQpu81203071 = -191125742;    double fjqNFgWQpu62840097 = -656166428;    double fjqNFgWQpu27620903 = -945123396;    double fjqNFgWQpu24037632 = 45092537;    double fjqNFgWQpu32544452 = -425461504;    double fjqNFgWQpu99586223 = -853306293;    double fjqNFgWQpu15540880 = -336455291;    double fjqNFgWQpu92887126 = -191417458;    double fjqNFgWQpu39441000 = 22084320;    double fjqNFgWQpu65782354 = -492974198;    double fjqNFgWQpu94803510 = -78566515;    double fjqNFgWQpu15541397 = -836502007;    double fjqNFgWQpu41702631 = -977044827;    double fjqNFgWQpu96585978 = -916288198;    double fjqNFgWQpu51083381 = -532728297;    double fjqNFgWQpu28419304 = -799333900;    double fjqNFgWQpu45682462 = -870399616;    double fjqNFgWQpu28374803 = -197379978;    double fjqNFgWQpu8928748 = -136945030;    double fjqNFgWQpu95373955 = -383874091;    double fjqNFgWQpu75127497 = -889020677;    double fjqNFgWQpu93010888 = -781943781;    double fjqNFgWQpu37928802 = -71772262;    double fjqNFgWQpu84823738 = -269469422;    double fjqNFgWQpu11336124 = -372009280;    double fjqNFgWQpu95288570 = -215737858;    double fjqNFgWQpu86867732 = -370197048;    double fjqNFgWQpu95199257 = -903490633;    double fjqNFgWQpu75305895 = -416819507;    double fjqNFgWQpu59717566 = -130774407;    double fjqNFgWQpu85019702 = -720338016;    double fjqNFgWQpu66417658 = 51199066;    double fjqNFgWQpu82830640 = -307775150;    double fjqNFgWQpu72448294 = -725189490;    double fjqNFgWQpu9183146 = -652869473;    double fjqNFgWQpu59452305 = -301290583;    double fjqNFgWQpu49959955 = -15639306;    double fjqNFgWQpu564579 = -850935080;    double fjqNFgWQpu28428553 = 16235019;    double fjqNFgWQpu34315415 = -32790911;    double fjqNFgWQpu18347535 = -291281447;    double fjqNFgWQpu33642456 = -507317500;    double fjqNFgWQpu88585385 = -780322227;    double fjqNFgWQpu27880961 = -573455829;    double fjqNFgWQpu44113408 = -590532905;    double fjqNFgWQpu6244780 = -783546878;    double fjqNFgWQpu511935 = -944164477;    double fjqNFgWQpu92391614 = -117218033;    double fjqNFgWQpu86639488 = -464372320;    double fjqNFgWQpu30690122 = -963099935;    double fjqNFgWQpu58453675 = -51535349;    double fjqNFgWQpu60268496 = -525946551;    double fjqNFgWQpu48120837 = -665573503;    double fjqNFgWQpu69943177 = 2175488;    double fjqNFgWQpu87578296 = -937976200;    double fjqNFgWQpu88192183 = -725975758;     fjqNFgWQpu63689169 = fjqNFgWQpu76856718;     fjqNFgWQpu76856718 = fjqNFgWQpu86972195;     fjqNFgWQpu86972195 = fjqNFgWQpu73375783;     fjqNFgWQpu73375783 = fjqNFgWQpu6000163;     fjqNFgWQpu6000163 = fjqNFgWQpu70284672;     fjqNFgWQpu70284672 = fjqNFgWQpu89347806;     fjqNFgWQpu89347806 = fjqNFgWQpu42830386;     fjqNFgWQpu42830386 = fjqNFgWQpu29262369;     fjqNFgWQpu29262369 = fjqNFgWQpu1657080;     fjqNFgWQpu1657080 = fjqNFgWQpu21037273;     fjqNFgWQpu21037273 = fjqNFgWQpu31592117;     fjqNFgWQpu31592117 = fjqNFgWQpu23740657;     fjqNFgWQpu23740657 = fjqNFgWQpu33122299;     fjqNFgWQpu33122299 = fjqNFgWQpu37503137;     fjqNFgWQpu37503137 = fjqNFgWQpu75845325;     fjqNFgWQpu75845325 = fjqNFgWQpu32922127;     fjqNFgWQpu32922127 = fjqNFgWQpu34415321;     fjqNFgWQpu34415321 = fjqNFgWQpu63853704;     fjqNFgWQpu63853704 = fjqNFgWQpu73663001;     fjqNFgWQpu73663001 = fjqNFgWQpu23467243;     fjqNFgWQpu23467243 = fjqNFgWQpu48147773;     fjqNFgWQpu48147773 = fjqNFgWQpu35154088;     fjqNFgWQpu35154088 = fjqNFgWQpu90386217;     fjqNFgWQpu90386217 = fjqNFgWQpu22292402;     fjqNFgWQpu22292402 = fjqNFgWQpu77580858;     fjqNFgWQpu77580858 = fjqNFgWQpu24602210;     fjqNFgWQpu24602210 = fjqNFgWQpu60973004;     fjqNFgWQpu60973004 = fjqNFgWQpu33901639;     fjqNFgWQpu33901639 = fjqNFgWQpu33888414;     fjqNFgWQpu33888414 = fjqNFgWQpu26529582;     fjqNFgWQpu26529582 = fjqNFgWQpu28026385;     fjqNFgWQpu28026385 = fjqNFgWQpu93663315;     fjqNFgWQpu93663315 = fjqNFgWQpu38916918;     fjqNFgWQpu38916918 = fjqNFgWQpu21786176;     fjqNFgWQpu21786176 = fjqNFgWQpu42214566;     fjqNFgWQpu42214566 = fjqNFgWQpu88977592;     fjqNFgWQpu88977592 = fjqNFgWQpu37722870;     fjqNFgWQpu37722870 = fjqNFgWQpu59109425;     fjqNFgWQpu59109425 = fjqNFgWQpu4136138;     fjqNFgWQpu4136138 = fjqNFgWQpu88643299;     fjqNFgWQpu88643299 = fjqNFgWQpu57049584;     fjqNFgWQpu57049584 = fjqNFgWQpu65317132;     fjqNFgWQpu65317132 = fjqNFgWQpu62705793;     fjqNFgWQpu62705793 = fjqNFgWQpu81203071;     fjqNFgWQpu81203071 = fjqNFgWQpu62840097;     fjqNFgWQpu62840097 = fjqNFgWQpu27620903;     fjqNFgWQpu27620903 = fjqNFgWQpu24037632;     fjqNFgWQpu24037632 = fjqNFgWQpu32544452;     fjqNFgWQpu32544452 = fjqNFgWQpu99586223;     fjqNFgWQpu99586223 = fjqNFgWQpu15540880;     fjqNFgWQpu15540880 = fjqNFgWQpu92887126;     fjqNFgWQpu92887126 = fjqNFgWQpu39441000;     fjqNFgWQpu39441000 = fjqNFgWQpu65782354;     fjqNFgWQpu65782354 = fjqNFgWQpu94803510;     fjqNFgWQpu94803510 = fjqNFgWQpu15541397;     fjqNFgWQpu15541397 = fjqNFgWQpu41702631;     fjqNFgWQpu41702631 = fjqNFgWQpu96585978;     fjqNFgWQpu96585978 = fjqNFgWQpu51083381;     fjqNFgWQpu51083381 = fjqNFgWQpu28419304;     fjqNFgWQpu28419304 = fjqNFgWQpu45682462;     fjqNFgWQpu45682462 = fjqNFgWQpu28374803;     fjqNFgWQpu28374803 = fjqNFgWQpu8928748;     fjqNFgWQpu8928748 = fjqNFgWQpu95373955;     fjqNFgWQpu95373955 = fjqNFgWQpu75127497;     fjqNFgWQpu75127497 = fjqNFgWQpu93010888;     fjqNFgWQpu93010888 = fjqNFgWQpu37928802;     fjqNFgWQpu37928802 = fjqNFgWQpu84823738;     fjqNFgWQpu84823738 = fjqNFgWQpu11336124;     fjqNFgWQpu11336124 = fjqNFgWQpu95288570;     fjqNFgWQpu95288570 = fjqNFgWQpu86867732;     fjqNFgWQpu86867732 = fjqNFgWQpu95199257;     fjqNFgWQpu95199257 = fjqNFgWQpu75305895;     fjqNFgWQpu75305895 = fjqNFgWQpu59717566;     fjqNFgWQpu59717566 = fjqNFgWQpu85019702;     fjqNFgWQpu85019702 = fjqNFgWQpu66417658;     fjqNFgWQpu66417658 = fjqNFgWQpu82830640;     fjqNFgWQpu82830640 = fjqNFgWQpu72448294;     fjqNFgWQpu72448294 = fjqNFgWQpu9183146;     fjqNFgWQpu9183146 = fjqNFgWQpu59452305;     fjqNFgWQpu59452305 = fjqNFgWQpu49959955;     fjqNFgWQpu49959955 = fjqNFgWQpu564579;     fjqNFgWQpu564579 = fjqNFgWQpu28428553;     fjqNFgWQpu28428553 = fjqNFgWQpu34315415;     fjqNFgWQpu34315415 = fjqNFgWQpu18347535;     fjqNFgWQpu18347535 = fjqNFgWQpu33642456;     fjqNFgWQpu33642456 = fjqNFgWQpu88585385;     fjqNFgWQpu88585385 = fjqNFgWQpu27880961;     fjqNFgWQpu27880961 = fjqNFgWQpu44113408;     fjqNFgWQpu44113408 = fjqNFgWQpu6244780;     fjqNFgWQpu6244780 = fjqNFgWQpu511935;     fjqNFgWQpu511935 = fjqNFgWQpu92391614;     fjqNFgWQpu92391614 = fjqNFgWQpu86639488;     fjqNFgWQpu86639488 = fjqNFgWQpu30690122;     fjqNFgWQpu30690122 = fjqNFgWQpu58453675;     fjqNFgWQpu58453675 = fjqNFgWQpu60268496;     fjqNFgWQpu60268496 = fjqNFgWQpu48120837;     fjqNFgWQpu48120837 = fjqNFgWQpu69943177;     fjqNFgWQpu69943177 = fjqNFgWQpu87578296;     fjqNFgWQpu87578296 = fjqNFgWQpu88192183;     fjqNFgWQpu88192183 = fjqNFgWQpu63689169;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QjcKiUdvok76511634() {     double NYodRVgJfe2346298 = -982881795;    double NYodRVgJfe2178441 = -716717521;    double NYodRVgJfe28468569 = -88758178;    double NYodRVgJfe76314379 = -412251741;    double NYodRVgJfe33453182 = -421560733;    double NYodRVgJfe8633704 = -232962679;    double NYodRVgJfe13170319 = -311616097;    double NYodRVgJfe44338213 = -777361608;    double NYodRVgJfe58946136 = -111970240;    double NYodRVgJfe43954589 = -944262822;    double NYodRVgJfe36010702 = -755992902;    double NYodRVgJfe11574973 = -295286673;    double NYodRVgJfe71547900 = -836112393;    double NYodRVgJfe35208127 = -515237110;    double NYodRVgJfe15231264 = -901440421;    double NYodRVgJfe22851757 = -194038820;    double NYodRVgJfe38732828 = -938605776;    double NYodRVgJfe49315001 = -317216080;    double NYodRVgJfe84587123 = -17144525;    double NYodRVgJfe50145403 = -692030531;    double NYodRVgJfe36680264 = 21193372;    double NYodRVgJfe89257186 = -891076662;    double NYodRVgJfe6149942 = -57830063;    double NYodRVgJfe59393418 = -749675940;    double NYodRVgJfe49673246 = 72620773;    double NYodRVgJfe29465172 = -969895827;    double NYodRVgJfe20321273 = -520353326;    double NYodRVgJfe59688779 = -20206438;    double NYodRVgJfe81554504 = -352228737;    double NYodRVgJfe83587136 = -750857602;    double NYodRVgJfe22868643 = 51953676;    double NYodRVgJfe45498145 = -252933800;    double NYodRVgJfe46029708 = -132503647;    double NYodRVgJfe62863729 = -565811355;    double NYodRVgJfe12770253 = -108828624;    double NYodRVgJfe56874391 = -237973949;    double NYodRVgJfe94595082 = -645766263;    double NYodRVgJfe10884860 = 39154449;    double NYodRVgJfe82115434 = -470602402;    double NYodRVgJfe57005629 = -820943800;    double NYodRVgJfe40488817 = -664407966;    double NYodRVgJfe1915910 = -148193637;    double NYodRVgJfe98350538 = -175955186;    double NYodRVgJfe74186291 = -802381236;    double NYodRVgJfe5217140 = -147514543;    double NYodRVgJfe67101465 = 64591497;    double NYodRVgJfe34437124 = -883168364;    double NYodRVgJfe5278040 = -558081913;    double NYodRVgJfe11788533 = -239157913;    double NYodRVgJfe80842062 = 49663997;    double NYodRVgJfe97578634 = -104314173;    double NYodRVgJfe29779921 = -152329702;    double NYodRVgJfe47821349 = -629948553;    double NYodRVgJfe90386564 = -723865671;    double NYodRVgJfe39831370 = -759442963;    double NYodRVgJfe13089112 = 8194866;    double NYodRVgJfe96028498 = -558887458;    double NYodRVgJfe69075151 = -339082238;    double NYodRVgJfe26641134 = -384872514;    double NYodRVgJfe3988010 = -451664907;    double NYodRVgJfe88312431 = -712609354;    double NYodRVgJfe53481539 = -191409659;    double NYodRVgJfe62783708 = -325132872;    double NYodRVgJfe75358999 = -361112638;    double NYodRVgJfe21085946 = -896216499;    double NYodRVgJfe90512557 = -403059102;    double NYodRVgJfe65545265 = -62783027;    double NYodRVgJfe8684171 = -170301038;    double NYodRVgJfe22437875 = -306408486;    double NYodRVgJfe58356872 = -563466473;    double NYodRVgJfe28256675 = -548272557;    double NYodRVgJfe27847969 = -877760225;    double NYodRVgJfe67199566 = -846613679;    double NYodRVgJfe27581495 = -196200725;    double NYodRVgJfe9656587 = 72377434;    double NYodRVgJfe34764354 = -830612992;    double NYodRVgJfe90906647 = -615121476;    double NYodRVgJfe31963650 = -255448828;    double NYodRVgJfe54176278 = -502161398;    double NYodRVgJfe82571780 = -991970725;    double NYodRVgJfe95028048 = 13272537;    double NYodRVgJfe15043233 = -962271414;    double NYodRVgJfe47900246 = -781048526;    double NYodRVgJfe712443 = -301892734;    double NYodRVgJfe86008502 = -546543430;    double NYodRVgJfe93088721 = -795716622;    double NYodRVgJfe97676796 = -622985248;    double NYodRVgJfe55643143 = -408637976;    double NYodRVgJfe23032359 = -806368392;    double NYodRVgJfe99681141 = -17023491;    double NYodRVgJfe60845893 = -679086491;    double NYodRVgJfe25519932 = -206684026;    double NYodRVgJfe84243725 = -575973037;    double NYodRVgJfe78127424 = 81062505;    double NYodRVgJfe68693198 = -8334447;    double NYodRVgJfe87007277 = -372998307;    double NYodRVgJfe39132202 = -823060765;    double NYodRVgJfe22991539 = -814842549;    double NYodRVgJfe53100345 = -906164737;    double NYodRVgJfe14704583 = -982881795;     NYodRVgJfe2346298 = NYodRVgJfe2178441;     NYodRVgJfe2178441 = NYodRVgJfe28468569;     NYodRVgJfe28468569 = NYodRVgJfe76314379;     NYodRVgJfe76314379 = NYodRVgJfe33453182;     NYodRVgJfe33453182 = NYodRVgJfe8633704;     NYodRVgJfe8633704 = NYodRVgJfe13170319;     NYodRVgJfe13170319 = NYodRVgJfe44338213;     NYodRVgJfe44338213 = NYodRVgJfe58946136;     NYodRVgJfe58946136 = NYodRVgJfe43954589;     NYodRVgJfe43954589 = NYodRVgJfe36010702;     NYodRVgJfe36010702 = NYodRVgJfe11574973;     NYodRVgJfe11574973 = NYodRVgJfe71547900;     NYodRVgJfe71547900 = NYodRVgJfe35208127;     NYodRVgJfe35208127 = NYodRVgJfe15231264;     NYodRVgJfe15231264 = NYodRVgJfe22851757;     NYodRVgJfe22851757 = NYodRVgJfe38732828;     NYodRVgJfe38732828 = NYodRVgJfe49315001;     NYodRVgJfe49315001 = NYodRVgJfe84587123;     NYodRVgJfe84587123 = NYodRVgJfe50145403;     NYodRVgJfe50145403 = NYodRVgJfe36680264;     NYodRVgJfe36680264 = NYodRVgJfe89257186;     NYodRVgJfe89257186 = NYodRVgJfe6149942;     NYodRVgJfe6149942 = NYodRVgJfe59393418;     NYodRVgJfe59393418 = NYodRVgJfe49673246;     NYodRVgJfe49673246 = NYodRVgJfe29465172;     NYodRVgJfe29465172 = NYodRVgJfe20321273;     NYodRVgJfe20321273 = NYodRVgJfe59688779;     NYodRVgJfe59688779 = NYodRVgJfe81554504;     NYodRVgJfe81554504 = NYodRVgJfe83587136;     NYodRVgJfe83587136 = NYodRVgJfe22868643;     NYodRVgJfe22868643 = NYodRVgJfe45498145;     NYodRVgJfe45498145 = NYodRVgJfe46029708;     NYodRVgJfe46029708 = NYodRVgJfe62863729;     NYodRVgJfe62863729 = NYodRVgJfe12770253;     NYodRVgJfe12770253 = NYodRVgJfe56874391;     NYodRVgJfe56874391 = NYodRVgJfe94595082;     NYodRVgJfe94595082 = NYodRVgJfe10884860;     NYodRVgJfe10884860 = NYodRVgJfe82115434;     NYodRVgJfe82115434 = NYodRVgJfe57005629;     NYodRVgJfe57005629 = NYodRVgJfe40488817;     NYodRVgJfe40488817 = NYodRVgJfe1915910;     NYodRVgJfe1915910 = NYodRVgJfe98350538;     NYodRVgJfe98350538 = NYodRVgJfe74186291;     NYodRVgJfe74186291 = NYodRVgJfe5217140;     NYodRVgJfe5217140 = NYodRVgJfe67101465;     NYodRVgJfe67101465 = NYodRVgJfe34437124;     NYodRVgJfe34437124 = NYodRVgJfe5278040;     NYodRVgJfe5278040 = NYodRVgJfe11788533;     NYodRVgJfe11788533 = NYodRVgJfe80842062;     NYodRVgJfe80842062 = NYodRVgJfe97578634;     NYodRVgJfe97578634 = NYodRVgJfe29779921;     NYodRVgJfe29779921 = NYodRVgJfe47821349;     NYodRVgJfe47821349 = NYodRVgJfe90386564;     NYodRVgJfe90386564 = NYodRVgJfe39831370;     NYodRVgJfe39831370 = NYodRVgJfe13089112;     NYodRVgJfe13089112 = NYodRVgJfe96028498;     NYodRVgJfe96028498 = NYodRVgJfe69075151;     NYodRVgJfe69075151 = NYodRVgJfe26641134;     NYodRVgJfe26641134 = NYodRVgJfe3988010;     NYodRVgJfe3988010 = NYodRVgJfe88312431;     NYodRVgJfe88312431 = NYodRVgJfe53481539;     NYodRVgJfe53481539 = NYodRVgJfe62783708;     NYodRVgJfe62783708 = NYodRVgJfe75358999;     NYodRVgJfe75358999 = NYodRVgJfe21085946;     NYodRVgJfe21085946 = NYodRVgJfe90512557;     NYodRVgJfe90512557 = NYodRVgJfe65545265;     NYodRVgJfe65545265 = NYodRVgJfe8684171;     NYodRVgJfe8684171 = NYodRVgJfe22437875;     NYodRVgJfe22437875 = NYodRVgJfe58356872;     NYodRVgJfe58356872 = NYodRVgJfe28256675;     NYodRVgJfe28256675 = NYodRVgJfe27847969;     NYodRVgJfe27847969 = NYodRVgJfe67199566;     NYodRVgJfe67199566 = NYodRVgJfe27581495;     NYodRVgJfe27581495 = NYodRVgJfe9656587;     NYodRVgJfe9656587 = NYodRVgJfe34764354;     NYodRVgJfe34764354 = NYodRVgJfe90906647;     NYodRVgJfe90906647 = NYodRVgJfe31963650;     NYodRVgJfe31963650 = NYodRVgJfe54176278;     NYodRVgJfe54176278 = NYodRVgJfe82571780;     NYodRVgJfe82571780 = NYodRVgJfe95028048;     NYodRVgJfe95028048 = NYodRVgJfe15043233;     NYodRVgJfe15043233 = NYodRVgJfe47900246;     NYodRVgJfe47900246 = NYodRVgJfe712443;     NYodRVgJfe712443 = NYodRVgJfe86008502;     NYodRVgJfe86008502 = NYodRVgJfe93088721;     NYodRVgJfe93088721 = NYodRVgJfe97676796;     NYodRVgJfe97676796 = NYodRVgJfe55643143;     NYodRVgJfe55643143 = NYodRVgJfe23032359;     NYodRVgJfe23032359 = NYodRVgJfe99681141;     NYodRVgJfe99681141 = NYodRVgJfe60845893;     NYodRVgJfe60845893 = NYodRVgJfe25519932;     NYodRVgJfe25519932 = NYodRVgJfe84243725;     NYodRVgJfe84243725 = NYodRVgJfe78127424;     NYodRVgJfe78127424 = NYodRVgJfe68693198;     NYodRVgJfe68693198 = NYodRVgJfe87007277;     NYodRVgJfe87007277 = NYodRVgJfe39132202;     NYodRVgJfe39132202 = NYodRVgJfe22991539;     NYodRVgJfe22991539 = NYodRVgJfe53100345;     NYodRVgJfe53100345 = NYodRVgJfe14704583;     NYodRVgJfe14704583 = NYodRVgJfe2346298;}
// Junk Finished
